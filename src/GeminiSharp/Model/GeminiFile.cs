/*
 * Google Gemini API
 *
 * Comprehensive API for interacting with Google's Gemini models supporting text, chat, image generation, file uploads, grounding, code execution, model tuning, and more.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = GeminiSharp.Client.FileParameter;
using OpenAPIDateConverter = GeminiSharp.Client.OpenAPIDateConverter;

namespace GeminiSharp.Model
{
    /// <summary>
    /// File
    /// </summary>
    [DataContract(Name = "File")]
    public partial class GeminiFile : IValidatableObject
    {
        /// <summary>
        /// Output only. Processing state of the File
        /// </summary>
        /// <value>Output only. Processing state of the File</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StateEnum
        {
            /// <summary>
            /// Enum STATEUNSPECIFIED for value: STATE_UNSPECIFIED
            /// </summary>
            [EnumMember(Value = "STATE_UNSPECIFIED")]
            STATEUNSPECIFIED = 1,

            /// <summary>
            /// Enum PROCESSING for value: PROCESSING
            /// </summary>
            [EnumMember(Value = "PROCESSING")]
            PROCESSING = 2,

            /// <summary>
            /// Enum ACTIVE for value: ACTIVE
            /// </summary>
            [EnumMember(Value = "ACTIVE")]
            ACTIVE = 3,

            /// <summary>
            /// Enum FAILED for value: FAILED
            /// </summary>
            [EnumMember(Value = "FAILED")]
            FAILED = 4
        }


        /// <summary>
        /// Output only. Processing state of the File
        /// </summary>
        /// <value>Output only. Processing state of the File</value>
        [DataMember(Name = "state", EmitDefaultValue = false)]
        public StateEnum? State { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GeminiFile" /> class.
        /// </summary>
        /// <param name="name">Immutable. Identifier. The File resource name.</param>
        /// <param name="displayName">Optional. The human-readable display name for the File.</param>
        /// <param name="mimeType">Output only. MIME type of the file.</param>
        /// <param name="sizeBytes">Output only. Size of the file in bytes.</param>
        /// <param name="createTime">Output only. The timestamp of when the File was created.</param>
        /// <param name="updateTime">Output only. The timestamp of when the File was last updated.</param>
        /// <param name="expirationTime">Output only. The timestamp of when the File will be deleted.</param>
        /// <param name="sha256Hash">Output only. SHA256 hash of the uploaded bytes.</param>
        /// <param name="uri">Output only. The uri of the File.</param>
        /// <param name="state">Output only. Processing state of the File.</param>
        /// <param name="error">error.</param>
        /// <param name="videoMetadata">videoMetadata.</param>
        public GeminiFile(string name = default, string displayName = default, string mimeType = default, string sizeBytes = default, DateTime createTime = default, DateTime updateTime = default, DateTime expirationTime = default, byte[] sha256Hash = default, string uri = default, StateEnum? state = default, Status error = default, VideoMetadata videoMetadata = default)
        {
            this.Name = name;
            this.DisplayName = displayName;
            this.MimeType = mimeType;
            this.SizeBytes = sizeBytes;
            this.CreateTime = createTime;
            this.UpdateTime = updateTime;
            this.ExpirationTime = expirationTime;
            this.Sha256Hash = sha256Hash;
            this.Uri = uri;
            this.State = state;
            this.Error = error;
            this.VideoMetadata = videoMetadata;
        }

        /// <summary>
        /// Immutable. Identifier. The File resource name
        /// </summary>
        /// <value>Immutable. Identifier. The File resource name</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Optional. The human-readable display name for the File
        /// </summary>
        /// <value>Optional. The human-readable display name for the File</value>
        [DataMember(Name = "displayName", EmitDefaultValue = false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Output only. MIME type of the file
        /// </summary>
        /// <value>Output only. MIME type of the file</value>
        [DataMember(Name = "mimeType", EmitDefaultValue = false)]
        public string MimeType { get; set; }

        /// <summary>
        /// Output only. Size of the file in bytes
        /// </summary>
        /// <value>Output only. Size of the file in bytes</value>
        [DataMember(Name = "sizeBytes", EmitDefaultValue = false)]
        public string SizeBytes { get; set; }

        /// <summary>
        /// Output only. The timestamp of when the File was created
        /// </summary>
        /// <value>Output only. The timestamp of when the File was created</value>
        [DataMember(Name = "createTime", EmitDefaultValue = false)]
        public DateTime CreateTime { get; set; }

        /// <summary>
        /// Output only. The timestamp of when the File was last updated
        /// </summary>
        /// <value>Output only. The timestamp of when the File was last updated</value>
        [DataMember(Name = "updateTime", EmitDefaultValue = false)]
        public DateTime UpdateTime { get; set; }

        /// <summary>
        /// Output only. The timestamp of when the File will be deleted
        /// </summary>
        /// <value>Output only. The timestamp of when the File will be deleted</value>
        [DataMember(Name = "expirationTime", EmitDefaultValue = false)]
        public DateTime ExpirationTime { get; set; }

        /// <summary>
        /// Output only. SHA256 hash of the uploaded bytes
        /// </summary>
        /// <value>Output only. SHA256 hash of the uploaded bytes</value>
        [DataMember(Name = "sha256Hash", EmitDefaultValue = false)]
        public byte[] Sha256Hash { get; set; }

        /// <summary>
        /// Output only. The uri of the File
        /// </summary>
        /// <value>Output only. The uri of the File</value>
        [DataMember(Name = "uri", EmitDefaultValue = false)]
        public string Uri { get; set; }

        /// <summary>
        /// Gets or Sets Error
        /// </summary>
        [DataMember(Name = "error", EmitDefaultValue = false)]
        public Status Error { get; set; }

        /// <summary>
        /// Gets or Sets VideoMetadata
        /// </summary>
        [DataMember(Name = "videoMetadata", EmitDefaultValue = false)]
        public VideoMetadata VideoMetadata { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class File {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  MimeType: ").Append(MimeType).Append("\n");
            sb.Append("  SizeBytes: ").Append(SizeBytes).Append("\n");
            sb.Append("  CreateTime: ").Append(CreateTime).Append("\n");
            sb.Append("  UpdateTime: ").Append(UpdateTime).Append("\n");
            sb.Append("  ExpirationTime: ").Append(ExpirationTime).Append("\n");
            sb.Append("  Sha256Hash: ").Append(Sha256Hash).Append("\n");
            sb.Append("  Uri: ").Append(Uri).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("  VideoMetadata: ").Append(VideoMetadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
