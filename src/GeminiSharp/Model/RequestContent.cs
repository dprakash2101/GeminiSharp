/*
 * Google Gemini API
 *
 * Comprehensive API for interacting with Google's Gemini models supporting text, chat, image generation, file uploads, grounding, code execution, model tuning, and more.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = GeminiSharp.Client.FileParameter;
using OpenAPIDateConverter = GeminiSharp.Client.OpenAPIDateConverter;

namespace GeminiSharp.Model
{
    /// <summary>
    /// RequestContent
    /// </summary>
    [DataContract(Name = "RequestContent")]
    public partial class RequestContent : IValidatableObject
    {
        /// <summary>
        /// The producer of the content
        /// </summary>
        /// <value>The producer of the content</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RoleEnum
        {
            /// <summary>
            /// Enum User for value: user
            /// </summary>
            [EnumMember(Value = "user")]
            User = 1,

            /// <summary>
            /// Enum Model for value: model
            /// </summary>
            [EnumMember(Value = "model")]
            Model = 2,

            /// <summary>
            /// Enum System for value: system
            /// </summary>
            [EnumMember(Value = "system")]
            System = 3
        }


        /// <summary>
        /// The producer of the content
        /// </summary>
        /// <value>The producer of the content</value>
        [DataMember(Name = "role", EmitDefaultValue = false)]
        public RoleEnum? Role { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="RequestContent" /> class.
        /// </summary>
        /// <param name="role">The producer of the content.</param>
        /// <param name="parts">Ordered Parts that constitute a single message.</param>
        public RequestContent(RoleEnum? role = default, Collection<RequestContentPart> parts = default)
        {
            this.Role = role;
            this.Parts = parts;
        }

        /// <summary>
        /// Ordered Parts that constitute a single message
        /// </summary>
        /// <value>Ordered Parts that constitute a single message</value>
        [DataMember(Name = "parts", EmitDefaultValue = false)]
        public Collection<RequestContentPart> Parts { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RequestContent {\n");
            sb.Append("  Role: ").Append(Role).Append("\n");
            sb.Append("  Parts: ").Append(Parts).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
