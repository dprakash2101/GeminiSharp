/*
 * Google Gemini API
 *
 * Comprehensive API for interacting with Google's Gemini models supporting text, chat, image generation, file uploads, grounding, code execution, model tuning, and more.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = GeminiSharp.Client.FileParameter;
using OpenAPIDateConverter = GeminiSharp.Client.OpenAPIDateConverter;

namespace GeminiSharp.Model
{
    /// <summary>
    /// Chunk
    /// </summary>
    [DataContract(Name = "Chunk")]
    public partial class Chunk : IValidatableObject
    {
        /// <summary>
        /// Output only. Current state of the Chunk
        /// </summary>
        /// <value>Output only. Current state of the Chunk</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StateEnum
        {
            /// <summary>
            /// Enum STATEUNSPECIFIED for value: STATE_UNSPECIFIED
            /// </summary>
            [EnumMember(Value = "STATE_UNSPECIFIED")]
            STATEUNSPECIFIED = 1,

            /// <summary>
            /// Enum STATEPENDINGPROCESSING for value: STATE_PENDING_PROCESSING
            /// </summary>
            [EnumMember(Value = "STATE_PENDING_PROCESSING")]
            STATEPENDINGPROCESSING = 2,

            /// <summary>
            /// Enum STATEACTIVE for value: STATE_ACTIVE
            /// </summary>
            [EnumMember(Value = "STATE_ACTIVE")]
            STATEACTIVE = 3,

            /// <summary>
            /// Enum STATEFAILED for value: STATE_FAILED
            /// </summary>
            [EnumMember(Value = "STATE_FAILED")]
            STATEFAILED = 4
        }


        /// <summary>
        /// Output only. Current state of the Chunk
        /// </summary>
        /// <value>Output only. Current state of the Chunk</value>
        [DataMember(Name = "state", EmitDefaultValue = false)]
        public StateEnum? State { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Chunk" /> class.
        /// </summary>
        /// <param name="name">Immutable. Identifier. The Chunk resource name.</param>
        /// <param name="data">data.</param>
        /// <param name="customMetadata">Optional. User provided custom metadata stored as key-value pairs.</param>
        /// <param name="updateTime">Output only. The Timestamp of when the Chunk was last updated.</param>
        /// <param name="createTime">Output only. The Timestamp of when the Chunk was created.</param>
        /// <param name="state">Output only. Current state of the Chunk.</param>
        public Chunk(string name = default, ChunkData data = default, Collection<CustomMetadata> customMetadata = default, DateTime updateTime = default, DateTime createTime = default, StateEnum? state = default)
        {
            this.Name = name;
            this.Data = data;
            this.CustomMetadata = customMetadata;
            this.UpdateTime = updateTime;
            this.CreateTime = createTime;
            this.State = state;
        }

        /// <summary>
        /// Immutable. Identifier. The Chunk resource name
        /// </summary>
        /// <value>Immutable. Identifier. The Chunk resource name</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [DataMember(Name = "data", EmitDefaultValue = false)]
        public ChunkData Data { get; set; }

        /// <summary>
        /// Optional. User provided custom metadata stored as key-value pairs
        /// </summary>
        /// <value>Optional. User provided custom metadata stored as key-value pairs</value>
        [DataMember(Name = "customMetadata", EmitDefaultValue = false)]
        public Collection<CustomMetadata> CustomMetadata { get; set; }

        /// <summary>
        /// Output only. The Timestamp of when the Chunk was last updated
        /// </summary>
        /// <value>Output only. The Timestamp of when the Chunk was last updated</value>
        [DataMember(Name = "updateTime", EmitDefaultValue = false)]
        public DateTime UpdateTime { get; set; }

        /// <summary>
        /// Output only. The Timestamp of when the Chunk was created
        /// </summary>
        /// <value>Output only. The Timestamp of when the Chunk was created</value>
        [DataMember(Name = "createTime", EmitDefaultValue = false)]
        public DateTime CreateTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Chunk {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  CustomMetadata: ").Append(CustomMetadata).Append("\n");
            sb.Append("  UpdateTime: ").Append(UpdateTime).Append("\n");
            sb.Append("  CreateTime: ").Append(CreateTime).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
