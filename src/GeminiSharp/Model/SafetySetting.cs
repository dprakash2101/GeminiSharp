/*
 * Google Gemini API
 *
 * Comprehensive API for interacting with Google's Gemini models supporting text, chat, image generation, file uploads, grounding, code execution, model tuning, and more.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = GeminiSharp.Client.FileParameter;
using OpenAPIDateConverter = GeminiSharp.Client.OpenAPIDateConverter;

namespace GeminiSharp.Model
{
    /// <summary>
    /// SafetySetting
    /// </summary>
    [DataContract(Name = "SafetySetting")]
    public partial class SafetySetting : IValidatableObject
    {
        /// <summary>
        /// The category for this setting
        /// </summary>
        /// <value>The category for this setting</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CategoryEnum
        {
            /// <summary>
            /// Enum HARMCATEGORYUNSPECIFIED for value: HARM_CATEGORY_UNSPECIFIED
            /// </summary>
            [EnumMember(Value = "HARM_CATEGORY_UNSPECIFIED")]
            HARMCATEGORYUNSPECIFIED = 1,

            /// <summary>
            /// Enum HARMCATEGORYDEROGATORY for value: HARM_CATEGORY_DEROGATORY
            /// </summary>
            [EnumMember(Value = "HARM_CATEGORY_DEROGATORY")]
            HARMCATEGORYDEROGATORY = 2,

            /// <summary>
            /// Enum HARMCATEGORYTOXICITY for value: HARM_CATEGORY_TOXICITY
            /// </summary>
            [EnumMember(Value = "HARM_CATEGORY_TOXICITY")]
            HARMCATEGORYTOXICITY = 3,

            /// <summary>
            /// Enum HARMCATEGORYVIOLENCE for value: HARM_CATEGORY_VIOLENCE
            /// </summary>
            [EnumMember(Value = "HARM_CATEGORY_VIOLENCE")]
            HARMCATEGORYVIOLENCE = 4,

            /// <summary>
            /// Enum HARMCATEGORYSEXUAL for value: HARM_CATEGORY_SEXUAL
            /// </summary>
            [EnumMember(Value = "HARM_CATEGORY_SEXUAL")]
            HARMCATEGORYSEXUAL = 5,

            /// <summary>
            /// Enum HARMCATEGORYMEDICAL for value: HARM_CATEGORY_MEDICAL
            /// </summary>
            [EnumMember(Value = "HARM_CATEGORY_MEDICAL")]
            HARMCATEGORYMEDICAL = 6,

            /// <summary>
            /// Enum HARMCATEGORYDANGEROUS for value: HARM_CATEGORY_DANGEROUS
            /// </summary>
            [EnumMember(Value = "HARM_CATEGORY_DANGEROUS")]
            HARMCATEGORYDANGEROUS = 7,

            /// <summary>
            /// Enum HARMCATEGORYHARASSMENT for value: HARM_CATEGORY_HARASSMENT
            /// </summary>
            [EnumMember(Value = "HARM_CATEGORY_HARASSMENT")]
            HARMCATEGORYHARASSMENT = 8,

            /// <summary>
            /// Enum HARMCATEGORYHATESPEECH for value: HARM_CATEGORY_HATE_SPEECH
            /// </summary>
            [EnumMember(Value = "HARM_CATEGORY_HATE_SPEECH")]
            HARMCATEGORYHATESPEECH = 9,

            /// <summary>
            /// Enum HARMCATEGORYSEXUALLYEXPLICIT for value: HARM_CATEGORY_SEXUALLY_EXPLICIT
            /// </summary>
            [EnumMember(Value = "HARM_CATEGORY_SEXUALLY_EXPLICIT")]
            HARMCATEGORYSEXUALLYEXPLICIT = 10,

            /// <summary>
            /// Enum HARMCATEGORYDANGEROUSCONTENT for value: HARM_CATEGORY_DANGEROUS_CONTENT
            /// </summary>
            [EnumMember(Value = "HARM_CATEGORY_DANGEROUS_CONTENT")]
            HARMCATEGORYDANGEROUSCONTENT = 11,

            /// <summary>
            /// Enum HARMCATEGORYCIVICINTEGRITY for value: HARM_CATEGORY_CIVIC_INTEGRITY
            /// </summary>
            [EnumMember(Value = "HARM_CATEGORY_CIVIC_INTEGRITY")]
            HARMCATEGORYCIVICINTEGRITY = 12
        }


        /// <summary>
        /// The category for this setting
        /// </summary>
        /// <value>The category for this setting</value>
        [DataMember(Name = "category", EmitDefaultValue = false)]
        public CategoryEnum? Category { get; set; }
        /// <summary>
        /// Controls the probability threshold at which harm is blocked
        /// </summary>
        /// <value>Controls the probability threshold at which harm is blocked</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ThresholdEnum
        {
            /// <summary>
            /// Enum HARMBLOCKTHRESHOLDUNSPECIFIED for value: HARM_BLOCK_THRESHOLD_UNSPECIFIED
            /// </summary>
            [EnumMember(Value = "HARM_BLOCK_THRESHOLD_UNSPECIFIED")]
            HARMBLOCKTHRESHOLDUNSPECIFIED = 1,

            /// <summary>
            /// Enum BLOCKLOWANDABOVE for value: BLOCK_LOW_AND_ABOVE
            /// </summary>
            [EnumMember(Value = "BLOCK_LOW_AND_ABOVE")]
            BLOCKLOWANDABOVE = 2,

            /// <summary>
            /// Enum BLOCKMEDIUMANDABOVE for value: BLOCK_MEDIUM_AND_ABOVE
            /// </summary>
            [EnumMember(Value = "BLOCK_MEDIUM_AND_ABOVE")]
            BLOCKMEDIUMANDABOVE = 3,

            /// <summary>
            /// Enum BLOCKONLYHIGH for value: BLOCK_ONLY_HIGH
            /// </summary>
            [EnumMember(Value = "BLOCK_ONLY_HIGH")]
            BLOCKONLYHIGH = 4,

            /// <summary>
            /// Enum BLOCKNONE for value: BLOCK_NONE
            /// </summary>
            [EnumMember(Value = "BLOCK_NONE")]
            BLOCKNONE = 5
        }


        /// <summary>
        /// Controls the probability threshold at which harm is blocked
        /// </summary>
        /// <value>Controls the probability threshold at which harm is blocked</value>
        [DataMember(Name = "threshold", EmitDefaultValue = false)]
        public ThresholdEnum? Threshold { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SafetySetting" /> class.
        /// </summary>
        /// <param name="category">The category for this setting.</param>
        /// <param name="threshold">Controls the probability threshold at which harm is blocked.</param>
        public SafetySetting(CategoryEnum? category = default, ThresholdEnum? threshold = default)
        {
            this.Category = category;
            this.Threshold = threshold;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SafetySetting {\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Threshold: ").Append(Threshold).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
