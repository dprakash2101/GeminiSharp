/*
 * Google Gemini API
 *
 * Comprehensive API for interacting with Google's Gemini models supporting text, chat, image generation, file uploads, grounding, code execution, model tuning, and more.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = GeminiSharp.Client.FileParameter;
using OpenAPIDateConverter = GeminiSharp.Client.OpenAPIDateConverter;

namespace GeminiSharp.Model
{
    /// <summary>
    /// Candidate
    /// </summary>
    [DataContract(Name = "Candidate")]
    public partial class Candidate : IValidatableObject
    {
        /// <summary>
        /// Output only. The reason why the model stopped generating tokens
        /// </summary>
        /// <value>Output only. The reason why the model stopped generating tokens</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FinishReasonEnum
        {
            /// <summary>
            /// Enum FINISHREASONUNSPECIFIED for value: FINISH_REASON_UNSPECIFIED
            /// </summary>
            [EnumMember(Value = "FINISH_REASON_UNSPECIFIED")]
            FINISHREASONUNSPECIFIED = 1,

            /// <summary>
            /// Enum STOP for value: STOP
            /// </summary>
            [EnumMember(Value = "STOP")]
            STOP = 2,

            /// <summary>
            /// Enum MAXTOKENS for value: MAX_TOKENS
            /// </summary>
            [EnumMember(Value = "MAX_TOKENS")]
            MAXTOKENS = 3,

            /// <summary>
            /// Enum SAFETY for value: SAFETY
            /// </summary>
            [EnumMember(Value = "SAFETY")]
            SAFETY = 4,

            /// <summary>
            /// Enum RECITATION for value: RECITATION
            /// </summary>
            [EnumMember(Value = "RECITATION")]
            RECITATION = 5,

            /// <summary>
            /// Enum LANGUAGE for value: LANGUAGE
            /// </summary>
            [EnumMember(Value = "LANGUAGE")]
            LANGUAGE = 6,

            /// <summary>
            /// Enum OTHER for value: OTHER
            /// </summary>
            [EnumMember(Value = "OTHER")]
            OTHER = 7,

            /// <summary>
            /// Enum BLOCKLIST for value: BLOCKLIST
            /// </summary>
            [EnumMember(Value = "BLOCKLIST")]
            BLOCKLIST = 8,

            /// <summary>
            /// Enum PROHIBITEDCONTENT for value: PROHIBITED_CONTENT
            /// </summary>
            [EnumMember(Value = "PROHIBITED_CONTENT")]
            PROHIBITEDCONTENT = 9,

            /// <summary>
            /// Enum SPII for value: SPII
            /// </summary>
            [EnumMember(Value = "SPII")]
            SPII = 10,

            /// <summary>
            /// Enum MALFORMEDFUNCTIONCALL for value: MALFORMED_FUNCTION_CALL
            /// </summary>
            [EnumMember(Value = "MALFORMED_FUNCTION_CALL")]
            MALFORMEDFUNCTIONCALL = 11
        }


        /// <summary>
        /// Output only. The reason why the model stopped generating tokens
        /// </summary>
        /// <value>Output only. The reason why the model stopped generating tokens</value>
        [DataMember(Name = "finishReason", EmitDefaultValue = false)]
        public FinishReasonEnum? FinishReason { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Candidate" /> class.
        /// </summary>
        /// <param name="content">content.</param>
        /// <param name="finishReason">Output only. The reason why the model stopped generating tokens.</param>
        /// <param name="index">Output only. Index of the candidate in the list of response candidates.</param>
        /// <param name="safetyRatings">List of ratings for the safety of a response candidate.</param>
        /// <param name="citationMetadata">citationMetadata.</param>
        /// <param name="tokenCount">Output only. Token count for this candidate.</param>
        /// <param name="groundingAttributions">Output only. Attribution information for sources that contributed to a grounded answer.</param>
        /// <param name="groundingMetadata">groundingMetadata.</param>
        /// <param name="avgLogprobs">Output only. Average log probability of the candidate.</param>
        /// <param name="logprobsResult">logprobsResult.</param>
        public Candidate(ResponseContent content = default, FinishReasonEnum? finishReason = default, int index = default, Collection<SafetyRating> safetyRatings = default, CitationMetadata citationMetadata = default, int tokenCount = default, Collection<GroundingAttribution> groundingAttributions = default, GroundingMetadata groundingMetadata = default, double avgLogprobs = default, LogprobsResult logprobsResult = default)
        {
            this.Content = content;
            this.FinishReason = finishReason;
            this.Index = index;
            this.SafetyRatings = safetyRatings;
            this.CitationMetadata = citationMetadata;
            this.TokenCount = tokenCount;
            this.GroundingAttributions = groundingAttributions;
            this.GroundingMetadata = groundingMetadata;
            this.AvgLogprobs = avgLogprobs;
            this.LogprobsResult = logprobsResult;
        }

        /// <summary>
        /// Gets or Sets Content
        /// </summary>
        [DataMember(Name = "content", EmitDefaultValue = false)]
        public ResponseContent Content { get; set; }

        /// <summary>
        /// Output only. Index of the candidate in the list of response candidates
        /// </summary>
        /// <value>Output only. Index of the candidate in the list of response candidates</value>
        [DataMember(Name = "index", EmitDefaultValue = false)]
        public int Index { get; set; }

        /// <summary>
        /// List of ratings for the safety of a response candidate
        /// </summary>
        /// <value>List of ratings for the safety of a response candidate</value>
        [DataMember(Name = "safetyRatings", EmitDefaultValue = false)]
        public Collection<SafetyRating> SafetyRatings { get; set; }

        /// <summary>
        /// Gets or Sets CitationMetadata
        /// </summary>
        [DataMember(Name = "citationMetadata", EmitDefaultValue = false)]
        public CitationMetadata CitationMetadata { get; set; }

        /// <summary>
        /// Output only. Token count for this candidate
        /// </summary>
        /// <value>Output only. Token count for this candidate</value>
        [DataMember(Name = "tokenCount", EmitDefaultValue = false)]
        public int TokenCount { get; set; }

        /// <summary>
        /// Output only. Attribution information for sources that contributed to a grounded answer
        /// </summary>
        /// <value>Output only. Attribution information for sources that contributed to a grounded answer</value>
        [DataMember(Name = "groundingAttributions", EmitDefaultValue = false)]
        public Collection<GroundingAttribution> GroundingAttributions { get; set; }

        /// <summary>
        /// Gets or Sets GroundingMetadata
        /// </summary>
        [DataMember(Name = "groundingMetadata", EmitDefaultValue = false)]
        public GroundingMetadata GroundingMetadata { get; set; }

        /// <summary>
        /// Output only. Average log probability of the candidate
        /// </summary>
        /// <value>Output only. Average log probability of the candidate</value>
        [DataMember(Name = "avgLogprobs", EmitDefaultValue = false)]
        public double AvgLogprobs { get; set; }

        /// <summary>
        /// Gets or Sets LogprobsResult
        /// </summary>
        [DataMember(Name = "logprobsResult", EmitDefaultValue = false)]
        public LogprobsResult LogprobsResult { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Candidate {\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  FinishReason: ").Append(FinishReason).Append("\n");
            sb.Append("  Index: ").Append(Index).Append("\n");
            sb.Append("  SafetyRatings: ").Append(SafetyRatings).Append("\n");
            sb.Append("  CitationMetadata: ").Append(CitationMetadata).Append("\n");
            sb.Append("  TokenCount: ").Append(TokenCount).Append("\n");
            sb.Append("  GroundingAttributions: ").Append(GroundingAttributions).Append("\n");
            sb.Append("  GroundingMetadata: ").Append(GroundingMetadata).Append("\n");
            sb.Append("  AvgLogprobs: ").Append(AvgLogprobs).Append("\n");
            sb.Append("  LogprobsResult: ").Append(LogprobsResult).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
