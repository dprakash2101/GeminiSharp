/*
 * Google Gemini API
 *
 * Comprehensive API for interacting with Google's Gemini models supporting text, chat, image generation, file uploads, grounding, code execution, model tuning, and more.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = GeminiSharp.Client.FileParameter;
using OpenAPIDateConverter = GeminiSharp.Client.OpenAPIDateConverter;

namespace GeminiSharp.Model
{
    /// <summary>
    /// CachedContent
    /// </summary>
    [DataContract(Name = "CachedContent")]
    public partial class CachedContent : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CachedContent" /> class.
        /// </summary>
        /// <param name="name">Optional. Identifier. The resource name of the CachedContent.</param>
        /// <param name="model">Immutable. The name of the Model to use for cached content.</param>
        /// <param name="systemInstruction">systemInstruction.</param>
        /// <param name="contents">Optional. Input only. Immutable. The content to cache.</param>
        /// <param name="tools">Optional. Input only. Immutable. A list of Tools the Model may use to generate the next response.</param>
        /// <param name="toolConfig">toolConfig.</param>
        /// <param name="createTime">Output only. Creation time of the cache entry.</param>
        /// <param name="updateTime">Output only. When the cache entry was last updated.</param>
        /// <param name="usageMetadata">usageMetadata.</param>
        /// <param name="expireTime">Timestamp in UTC of when this resource is considered expired.</param>
        /// <param name="ttl">Input only. New TTL for this resource, input only.</param>
        /// <param name="displayName">Optional. Immutable. The user-generated meaningful display name of the cached content.</param>
        public CachedContent(string name = default, string model = default, RequestContent systemInstruction = default, Collection<RequestContent> contents = default, Collection<Tool> tools = default, ToolConfig toolConfig = default, DateTime createTime = default, DateTime updateTime = default, CachedContentUsageMetadata usageMetadata = default, DateTime expireTime = default, string ttl = default, string displayName = default)
        {
            this.Name = name;
            this.Model = model;
            this.SystemInstruction = systemInstruction;
            this.Contents = contents;
            this.Tools = tools;
            this.ToolConfig = toolConfig;
            this.CreateTime = createTime;
            this.UpdateTime = updateTime;
            this.UsageMetadata = usageMetadata;
            this.ExpireTime = expireTime;
            this.Ttl = ttl;
            this.DisplayName = displayName;
        }

        /// <summary>
        /// Optional. Identifier. The resource name of the CachedContent
        /// </summary>
        /// <value>Optional. Identifier. The resource name of the CachedContent</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Immutable. The name of the Model to use for cached content
        /// </summary>
        /// <value>Immutable. The name of the Model to use for cached content</value>
        [DataMember(Name = "model", EmitDefaultValue = false)]
        public string Model { get; set; }

        /// <summary>
        /// Gets or Sets SystemInstruction
        /// </summary>
        [DataMember(Name = "systemInstruction", EmitDefaultValue = false)]
        public RequestContent SystemInstruction { get; set; }

        /// <summary>
        /// Optional. Input only. Immutable. The content to cache
        /// </summary>
        /// <value>Optional. Input only. Immutable. The content to cache</value>
        [DataMember(Name = "contents", EmitDefaultValue = false)]
        public Collection<RequestContent> Contents { get; set; }

        /// <summary>
        /// Optional. Input only. Immutable. A list of Tools the Model may use to generate the next response
        /// </summary>
        /// <value>Optional. Input only. Immutable. A list of Tools the Model may use to generate the next response</value>
        [DataMember(Name = "tools", EmitDefaultValue = false)]
        public Collection<Tool> Tools { get; set; }

        /// <summary>
        /// Gets or Sets ToolConfig
        /// </summary>
        [DataMember(Name = "toolConfig", EmitDefaultValue = false)]
        public ToolConfig ToolConfig { get; set; }

        /// <summary>
        /// Output only. Creation time of the cache entry
        /// </summary>
        /// <value>Output only. Creation time of the cache entry</value>
        [DataMember(Name = "createTime", EmitDefaultValue = false)]
        public DateTime CreateTime { get; set; }

        /// <summary>
        /// Output only. When the cache entry was last updated
        /// </summary>
        /// <value>Output only. When the cache entry was last updated</value>
        [DataMember(Name = "updateTime", EmitDefaultValue = false)]
        public DateTime UpdateTime { get; set; }

        /// <summary>
        /// Gets or Sets UsageMetadata
        /// </summary>
        [DataMember(Name = "usageMetadata", EmitDefaultValue = false)]
        public CachedContentUsageMetadata UsageMetadata { get; set; }

        /// <summary>
        /// Timestamp in UTC of when this resource is considered expired
        /// </summary>
        /// <value>Timestamp in UTC of when this resource is considered expired</value>
        [DataMember(Name = "expireTime", EmitDefaultValue = false)]
        public DateTime ExpireTime { get; set; }

        /// <summary>
        /// Input only. New TTL for this resource, input only
        /// </summary>
        /// <value>Input only. New TTL for this resource, input only</value>
        [DataMember(Name = "ttl", EmitDefaultValue = false)]
        public string Ttl { get; set; }

        /// <summary>
        /// Optional. Immutable. The user-generated meaningful display name of the cached content
        /// </summary>
        /// <value>Optional. Immutable. The user-generated meaningful display name of the cached content</value>
        [DataMember(Name = "displayName", EmitDefaultValue = false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CachedContent {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Model: ").Append(Model).Append("\n");
            sb.Append("  SystemInstruction: ").Append(SystemInstruction).Append("\n");
            sb.Append("  Contents: ").Append(Contents).Append("\n");
            sb.Append("  Tools: ").Append(Tools).Append("\n");
            sb.Append("  ToolConfig: ").Append(ToolConfig).Append("\n");
            sb.Append("  CreateTime: ").Append(CreateTime).Append("\n");
            sb.Append("  UpdateTime: ").Append(UpdateTime).Append("\n");
            sb.Append("  UsageMetadata: ").Append(UsageMetadata).Append("\n");
            sb.Append("  ExpireTime: ").Append(ExpireTime).Append("\n");
            sb.Append("  Ttl: ").Append(Ttl).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
