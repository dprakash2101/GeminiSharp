/*
 * Google Gemini API
 *
 * Comprehensive API for interacting with Google's Gemini models supporting text, chat, image generation, file uploads, grounding, code execution, model tuning, and more.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = GeminiSharp.Client.FileParameter;
using OpenAPIDateConverter = GeminiSharp.Client.OpenAPIDateConverter;

namespace GeminiSharp.Model
{
    /// <summary>
    /// FunctionDeclaration
    /// </summary>
    [DataContract(Name = "FunctionDeclaration")]
    public partial class FunctionDeclaration : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FunctionDeclaration" /> class.
        /// </summary>
        /// <param name="name">The name of the function.</param>
        /// <param name="description">A brief description of the function.</param>
        /// <param name="parameters">JSON Schema object to describe a function&#39;s parameters.</param>
        /// <param name="response">JSON Schema object to describe a function&#39;s response.</param>
        public FunctionDeclaration(string name = default, string description = default, Object parameters = default, Object response = default)
        {
            this.Name = name;
            this.Description = description;
            this.Parameters = parameters;
            this.Response = response;
        }

        /// <summary>
        /// The name of the function
        /// </summary>
        /// <value>The name of the function</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// A brief description of the function
        /// </summary>
        /// <value>A brief description of the function</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// JSON Schema object to describe a function&#39;s parameters
        /// </summary>
        /// <value>JSON Schema object to describe a function&#39;s parameters</value>
        [DataMember(Name = "parameters", EmitDefaultValue = false)]
        public Object Parameters { get; set; }

        /// <summary>
        /// JSON Schema object to describe a function&#39;s response
        /// </summary>
        /// <value>JSON Schema object to describe a function&#39;s response</value>
        [DataMember(Name = "response", EmitDefaultValue = false)]
        public Object Response { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FunctionDeclaration {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Parameters: ").Append(Parameters).Append("\n");
            sb.Append("  Response: ").Append(Response).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
