/*
 * Google Gemini API
 *
 * Comprehensive API for interacting with Google's Gemini models supporting text, chat, image generation, file uploads, grounding, code execution, model tuning, and more.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = GeminiSharp.Client.FileParameter;
using OpenAPIDateConverter = GeminiSharp.Client.OpenAPIDateConverter;

namespace GeminiSharp.Model
{
    /// <summary>
    /// Document
    /// </summary>
    [DataContract(Name = "Document")]
    public partial class Document : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Document" /> class.
        /// </summary>
        /// <param name="name">Immutable. Identifier. The Document resource name.</param>
        /// <param name="displayName">Optional. The human-readable display name for the Document.</param>
        /// <param name="customMetadata">Optional. User provided custom metadata stored as key-value pairs.</param>
        /// <param name="updateTime">Output only. The Timestamp of when the Document was last updated.</param>
        /// <param name="createTime">Output only. The Timestamp of when the Document was created.</param>
        public Document(string name = default, string displayName = default, Collection<CustomMetadata> customMetadata = default, DateTime updateTime = default, DateTime createTime = default)
        {
            this.Name = name;
            this.DisplayName = displayName;
            this.CustomMetadata = customMetadata;
            this.UpdateTime = updateTime;
            this.CreateTime = createTime;
        }

        /// <summary>
        /// Immutable. Identifier. The Document resource name
        /// </summary>
        /// <value>Immutable. Identifier. The Document resource name</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Optional. The human-readable display name for the Document
        /// </summary>
        /// <value>Optional. The human-readable display name for the Document</value>
        [DataMember(Name = "displayName", EmitDefaultValue = false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Optional. User provided custom metadata stored as key-value pairs
        /// </summary>
        /// <value>Optional. User provided custom metadata stored as key-value pairs</value>
        [DataMember(Name = "customMetadata", EmitDefaultValue = false)]
        public Collection<CustomMetadata> CustomMetadata { get; set; }

        /// <summary>
        /// Output only. The Timestamp of when the Document was last updated
        /// </summary>
        /// <value>Output only. The Timestamp of when the Document was last updated</value>
        [DataMember(Name = "updateTime", EmitDefaultValue = false)]
        public DateTime UpdateTime { get; set; }

        /// <summary>
        /// Output only. The Timestamp of when the Document was created
        /// </summary>
        /// <value>Output only. The Timestamp of when the Document was created</value>
        [DataMember(Name = "createTime", EmitDefaultValue = false)]
        public DateTime CreateTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Document {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  CustomMetadata: ").Append(CustomMetadata).Append("\n");
            sb.Append("  UpdateTime: ").Append(UpdateTime).Append("\n");
            sb.Append("  CreateTime: ").Append(CreateTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
