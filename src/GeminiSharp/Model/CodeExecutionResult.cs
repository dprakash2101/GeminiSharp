/*
 * Google Gemini API
 *
 * Comprehensive API for interacting with Google's Gemini models supporting text, chat, image generation, file uploads, grounding, code execution, model tuning, and more.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = GeminiSharp.Client.FileParameter;
using OpenAPIDateConverter = GeminiSharp.Client.OpenAPIDateConverter;

namespace GeminiSharp.Model
{
    /// <summary>
    /// CodeExecutionResult
    /// </summary>
    [DataContract(Name = "CodeExecutionResult")]
    public partial class CodeExecutionResult : IValidatableObject
    {
        /// <summary>
        /// Outcome of the code execution
        /// </summary>
        /// <value>Outcome of the code execution</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OutcomeEnum
        {
            /// <summary>
            /// Enum OUTCOMEUNSPECIFIED for value: OUTCOME_UNSPECIFIED
            /// </summary>
            [EnumMember(Value = "OUTCOME_UNSPECIFIED")]
            OUTCOMEUNSPECIFIED = 1,

            /// <summary>
            /// Enum OUTCOMEOK for value: OUTCOME_OK
            /// </summary>
            [EnumMember(Value = "OUTCOME_OK")]
            OUTCOMEOK = 2,

            /// <summary>
            /// Enum OUTCOMEFAILED for value: OUTCOME_FAILED
            /// </summary>
            [EnumMember(Value = "OUTCOME_FAILED")]
            OUTCOMEFAILED = 3,

            /// <summary>
            /// Enum OUTCOMEDEADLINEEXCEEDED for value: OUTCOME_DEADLINE_EXCEEDED
            /// </summary>
            [EnumMember(Value = "OUTCOME_DEADLINE_EXCEEDED")]
            OUTCOMEDEADLINEEXCEEDED = 4
        }


        /// <summary>
        /// Outcome of the code execution
        /// </summary>
        /// <value>Outcome of the code execution</value>
        [DataMember(Name = "outcome", EmitDefaultValue = false)]
        public OutcomeEnum? Outcome { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CodeExecutionResult" /> class.
        /// </summary>
        /// <param name="outcome">Outcome of the code execution.</param>
        /// <param name="output">Contains stdout when code execution is successful, stderr or other description when code execution fails.</param>
        public CodeExecutionResult(OutcomeEnum? outcome = default, string output = default)
        {
            this.Outcome = outcome;
            this.Output = output;
        }

        /// <summary>
        /// Contains stdout when code execution is successful, stderr or other description when code execution fails
        /// </summary>
        /// <value>Contains stdout when code execution is successful, stderr or other description when code execution fails</value>
        [DataMember(Name = "output", EmitDefaultValue = false)]
        public string Output { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CodeExecutionResult {\n");
            sb.Append("  Outcome: ").Append(Outcome).Append("\n");
            sb.Append("  Output: ").Append(Output).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
