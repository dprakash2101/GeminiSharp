/*
 * Google Gemini API
 *
 * Comprehensive API for interacting with Google's Gemini models supporting text, chat, image generation, file uploads, grounding, code execution, model tuning, and more.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = GeminiSharp.Client.FileParameter;
using OpenAPIDateConverter = GeminiSharp.Client.OpenAPIDateConverter;

namespace GeminiSharp.Model
{
    /// <summary>
    /// Hyperparameters
    /// </summary>
    [DataContract(Name = "Hyperparameters")]
    public partial class Hyperparameters : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Hyperparameters" /> class.
        /// </summary>
        /// <param name="epochCount">Optional. The number of training epochs.</param>
        /// <param name="batchSize">Optional. The batch size hyperparameter for tuning.</param>
        /// <param name="learningRate">Optional. The learning rate hyperparameter for tuning.</param>
        /// <param name="learningRateMultiplier">Optional. Multiplier for the learning rate.</param>
        public Hyperparameters(int epochCount = default, int batchSize = default, float learningRate = default, float learningRateMultiplier = default)
        {
            this.EpochCount = epochCount;
            this.BatchSize = batchSize;
            this.LearningRate = learningRate;
            this.LearningRateMultiplier = learningRateMultiplier;
        }

        /// <summary>
        /// Optional. The number of training epochs
        /// </summary>
        /// <value>Optional. The number of training epochs</value>
        [DataMember(Name = "epochCount", EmitDefaultValue = false)]
        public int EpochCount { get; set; }

        /// <summary>
        /// Optional. The batch size hyperparameter for tuning
        /// </summary>
        /// <value>Optional. The batch size hyperparameter for tuning</value>
        [DataMember(Name = "batchSize", EmitDefaultValue = false)]
        public int BatchSize { get; set; }

        /// <summary>
        /// Optional. The learning rate hyperparameter for tuning
        /// </summary>
        /// <value>Optional. The learning rate hyperparameter for tuning</value>
        [DataMember(Name = "learningRate", EmitDefaultValue = false)]
        public float LearningRate { get; set; }

        /// <summary>
        /// Optional. Multiplier for the learning rate
        /// </summary>
        /// <value>Optional. Multiplier for the learning rate</value>
        [DataMember(Name = "learningRateMultiplier", EmitDefaultValue = false)]
        public float LearningRateMultiplier { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Hyperparameters {\n");
            sb.Append("  EpochCount: ").Append(EpochCount).Append("\n");
            sb.Append("  BatchSize: ").Append(BatchSize).Append("\n");
            sb.Append("  LearningRate: ").Append(LearningRate).Append("\n");
            sb.Append("  LearningRateMultiplier: ").Append(LearningRateMultiplier).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
