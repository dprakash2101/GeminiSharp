/*
 * Google Gemini API
 *
 * Comprehensive API for interacting with Google's Gemini models supporting text, chat, image generation, file uploads, grounding, code execution, model tuning, and more.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = GeminiSharp.Client.FileParameter;
using OpenAPIDateConverter = GeminiSharp.Client.OpenAPIDateConverter;

namespace GeminiSharp.Model
{
    /// <summary>
    /// TunedModelSource
    /// </summary>
    [DataContract(Name = "TunedModelSource")]
    public partial class TunedModelSource : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TunedModelSource" /> class.
        /// </summary>
        /// <param name="tunedModel">Immutable. The name of the TunedModel to use as the starting point for training the new model.</param>
        /// <param name="baseModel">Output only. The name of the base Model this TunedModel is based on.</param>
        public TunedModelSource(string tunedModel = default, string baseModel = default)
        {
            this.TunedModel = tunedModel;
            this.BaseModel = baseModel;
        }

        /// <summary>
        /// Immutable. The name of the TunedModel to use as the starting point for training the new model
        /// </summary>
        /// <value>Immutable. The name of the TunedModel to use as the starting point for training the new model</value>
        [DataMember(Name = "tunedModel", EmitDefaultValue = false)]
        public string TunedModel { get; set; }

        /// <summary>
        /// Output only. The name of the base Model this TunedModel is based on
        /// </summary>
        /// <value>Output only. The name of the base Model this TunedModel is based on</value>
        [DataMember(Name = "baseModel", EmitDefaultValue = false)]
        public string BaseModel { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TunedModelSource {\n");
            sb.Append("  TunedModel: ").Append(TunedModel).Append("\n");
            sb.Append("  BaseModel: ").Append(BaseModel).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
