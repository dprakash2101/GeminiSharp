/*
 * Google Gemini API
 *
 * Comprehensive API for interacting with Google's Gemini models supporting text, chat, image generation, file uploads, grounding, code execution, model tuning, and more.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = GeminiSharp.Client.FileParameter;
using OpenAPIDateConverter = GeminiSharp.Client.OpenAPIDateConverter;

namespace GeminiSharp.Model
{
    /// <summary>
    /// TuningSnapshot
    /// </summary>
    [DataContract(Name = "TuningSnapshot")]
    public partial class TuningSnapshot : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TuningSnapshot" /> class.
        /// </summary>
        /// <param name="step">Output only. The tuning step.</param>
        /// <param name="epoch">Output only. The epoch this step was part of.</param>
        /// <param name="meanLoss">Output only. The mean loss of the training examples for this step.</param>
        /// <param name="computeTime">Output only. The timestamp when this metric was computed.</param>
        public TuningSnapshot(int step = default, int epoch = default, float meanLoss = default, DateTime computeTime = default)
        {
            this.Step = step;
            this.Epoch = epoch;
            this.MeanLoss = meanLoss;
            this.ComputeTime = computeTime;
        }

        /// <summary>
        /// Output only. The tuning step
        /// </summary>
        /// <value>Output only. The tuning step</value>
        [DataMember(Name = "step", EmitDefaultValue = false)]
        public int Step { get; set; }

        /// <summary>
        /// Output only. The epoch this step was part of
        /// </summary>
        /// <value>Output only. The epoch this step was part of</value>
        [DataMember(Name = "epoch", EmitDefaultValue = false)]
        public int Epoch { get; set; }

        /// <summary>
        /// Output only. The mean loss of the training examples for this step
        /// </summary>
        /// <value>Output only. The mean loss of the training examples for this step</value>
        [DataMember(Name = "meanLoss", EmitDefaultValue = false)]
        public float MeanLoss { get; set; }

        /// <summary>
        /// Output only. The timestamp when this metric was computed
        /// </summary>
        /// <value>Output only. The timestamp when this metric was computed</value>
        [DataMember(Name = "computeTime", EmitDefaultValue = false)]
        public DateTime ComputeTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TuningSnapshot {\n");
            sb.Append("  Step: ").Append(Step).Append("\n");
            sb.Append("  Epoch: ").Append(Epoch).Append("\n");
            sb.Append("  MeanLoss: ").Append(MeanLoss).Append("\n");
            sb.Append("  ComputeTime: ").Append(ComputeTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
