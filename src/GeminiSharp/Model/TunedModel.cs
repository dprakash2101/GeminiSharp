/*
 * Google Gemini API
 *
 * Comprehensive API for interacting with Google's Gemini models supporting text, chat, image generation, file uploads, grounding, code execution, model tuning, and more.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = GeminiSharp.Client.FileParameter;
using OpenAPIDateConverter = GeminiSharp.Client.OpenAPIDateConverter;

namespace GeminiSharp.Model
{
    /// <summary>
    /// TunedModel
    /// </summary>
    [DataContract(Name = "TunedModel")]
    public partial class TunedModel : IValidatableObject
    {
        /// <summary>
        /// Output only. The state of the tuned model
        /// </summary>
        /// <value>Output only. The state of the tuned model</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StateEnum
        {
            /// <summary>
            /// Enum STATEUNSPECIFIED for value: STATE_UNSPECIFIED
            /// </summary>
            [EnumMember(Value = "STATE_UNSPECIFIED")]
            STATEUNSPECIFIED = 1,

            /// <summary>
            /// Enum CREATING for value: CREATING
            /// </summary>
            [EnumMember(Value = "CREATING")]
            CREATING = 2,

            /// <summary>
            /// Enum ACTIVE for value: ACTIVE
            /// </summary>
            [EnumMember(Value = "ACTIVE")]
            ACTIVE = 3,

            /// <summary>
            /// Enum FAILED for value: FAILED
            /// </summary>
            [EnumMember(Value = "FAILED")]
            FAILED = 4
        }


        /// <summary>
        /// Output only. The state of the tuned model
        /// </summary>
        /// <value>Output only. The state of the tuned model</value>
        [DataMember(Name = "state", EmitDefaultValue = false)]
        public StateEnum? State { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TunedModel" /> class.
        /// </summary>
        /// <param name="name">Output only. The tuned model name.</param>
        /// <param name="displayName">Optional. The name to display for this model in user interfaces.</param>
        /// <param name="description">Optional. A short description of this model.</param>
        /// <param name="state">Output only. The state of the tuned model.</param>
        /// <param name="createTime">Output only. The timestamp when this model was created.</param>
        /// <param name="updateTime">Output only. The timestamp when this model was updated.</param>
        /// <param name="tunedModelSource">tunedModelSource.</param>
        /// <param name="baseModel">Immutable. The name of the base Model this TunedModel is based on.</param>
        /// <param name="tuningTask">tuningTask.</param>
        /// <param name="temperature">Optional. Controls the randomness of the output.</param>
        /// <param name="topP">Optional. For Nucleus sampling.</param>
        /// <param name="topK">Optional. For Top-k sampling.</param>
        public TunedModel(string name = default, string displayName = default, string description = default, StateEnum? state = default, DateTime createTime = default, DateTime updateTime = default, TunedModelSource tunedModelSource = default, string baseModel = default, TuningTask tuningTask = default, float temperature = default, float topP = default, int topK = default)
        {
            this.Name = name;
            this.DisplayName = displayName;
            this.Description = description;
            this.State = state;
            this.CreateTime = createTime;
            this.UpdateTime = updateTime;
            this.TunedModelSource = tunedModelSource;
            this.BaseModel = baseModel;
            this.TuningTask = tuningTask;
            this.Temperature = temperature;
            this.TopP = topP;
            this.TopK = topK;
        }

        /// <summary>
        /// Output only. The tuned model name
        /// </summary>
        /// <value>Output only. The tuned model name</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Optional. The name to display for this model in user interfaces
        /// </summary>
        /// <value>Optional. The name to display for this model in user interfaces</value>
        [DataMember(Name = "displayName", EmitDefaultValue = false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Optional. A short description of this model
        /// </summary>
        /// <value>Optional. A short description of this model</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Output only. The timestamp when this model was created
        /// </summary>
        /// <value>Output only. The timestamp when this model was created</value>
        [DataMember(Name = "createTime", EmitDefaultValue = false)]
        public DateTime CreateTime { get; set; }

        /// <summary>
        /// Output only. The timestamp when this model was updated
        /// </summary>
        /// <value>Output only. The timestamp when this model was updated</value>
        [DataMember(Name = "updateTime", EmitDefaultValue = false)]
        public DateTime UpdateTime { get; set; }

        /// <summary>
        /// Gets or Sets TunedModelSource
        /// </summary>
        [DataMember(Name = "tunedModelSource", EmitDefaultValue = false)]
        public TunedModelSource TunedModelSource { get; set; }

        /// <summary>
        /// Immutable. The name of the base Model this TunedModel is based on
        /// </summary>
        /// <value>Immutable. The name of the base Model this TunedModel is based on</value>
        [DataMember(Name = "baseModel", EmitDefaultValue = false)]
        public string BaseModel { get; set; }

        /// <summary>
        /// Gets or Sets TuningTask
        /// </summary>
        [DataMember(Name = "tuningTask", EmitDefaultValue = false)]
        public TuningTask TuningTask { get; set; }

        /// <summary>
        /// Optional. Controls the randomness of the output
        /// </summary>
        /// <value>Optional. Controls the randomness of the output</value>
        [DataMember(Name = "temperature", EmitDefaultValue = false)]
        public float Temperature { get; set; }

        /// <summary>
        /// Optional. For Nucleus sampling
        /// </summary>
        /// <value>Optional. For Nucleus sampling</value>
        [DataMember(Name = "topP", EmitDefaultValue = false)]
        public float TopP { get; set; }

        /// <summary>
        /// Optional. For Top-k sampling
        /// </summary>
        /// <value>Optional. For Top-k sampling</value>
        [DataMember(Name = "topK", EmitDefaultValue = false)]
        public int TopK { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TunedModel {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  CreateTime: ").Append(CreateTime).Append("\n");
            sb.Append("  UpdateTime: ").Append(UpdateTime).Append("\n");
            sb.Append("  TunedModelSource: ").Append(TunedModelSource).Append("\n");
            sb.Append("  BaseModel: ").Append(BaseModel).Append("\n");
            sb.Append("  TuningTask: ").Append(TuningTask).Append("\n");
            sb.Append("  Temperature: ").Append(Temperature).Append("\n");
            sb.Append("  TopP: ").Append(TopP).Append("\n");
            sb.Append("  TopK: ").Append(TopK).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
