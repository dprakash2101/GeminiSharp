/*
 * Google Gemini API
 *
 * Comprehensive API for interacting with Google's Gemini models supporting text, chat, image generation, file uploads, grounding, code execution, model tuning, and more.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = GeminiSharp.Client.FileParameter;
using OpenAPIDateConverter = GeminiSharp.Client.OpenAPIDateConverter;

namespace GeminiSharp.Model
{
    /// <summary>
    /// RequestContentPart
    /// </summary>
    [DataContract(Name = "RequestContentPart")]
    public partial class RequestContentPart : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RequestContentPart" /> class.
        /// </summary>
        /// <param name="text">Inline text.</param>
        /// <param name="inlineData">inlineData.</param>
        /// <param name="fileData">fileData.</param>
        /// <param name="functionCall">functionCall.</param>
        /// <param name="functionResponse">functionResponse.</param>
        /// <param name="executableCode">executableCode.</param>
        /// <param name="codeExecutionResult">codeExecutionResult.</param>
        /// <param name="videoMetadata">videoMetadata.</param>
        public RequestContentPart(string text = default, InlineData inlineData = default, FileData fileData = default, FunctionCall functionCall = default, FunctionResponse functionResponse = default, ExecutableCode executableCode = default, CodeExecutionResult codeExecutionResult = default, VideoMetadata videoMetadata = default)
        {
            this.Text = text;
            this.InlineData = inlineData;
            this.FileData = fileData;
            this.FunctionCall = functionCall;
            this.FunctionResponse = functionResponse;
            this.ExecutableCode = executableCode;
            this.CodeExecutionResult = codeExecutionResult;
            this.VideoMetadata = videoMetadata;
        }

        /// <summary>
        /// Inline text
        /// </summary>
        /// <value>Inline text</value>
        [DataMember(Name = "text", EmitDefaultValue = false)]
        public string Text { get; set; }

        /// <summary>
        /// Gets or Sets InlineData
        /// </summary>
        [DataMember(Name = "inlineData", EmitDefaultValue = false)]
        public InlineData InlineData { get; set; }

        /// <summary>
        /// Gets or Sets FileData
        /// </summary>
        [DataMember(Name = "fileData", EmitDefaultValue = false)]
        public FileData FileData { get; set; }

        /// <summary>
        /// Gets or Sets FunctionCall
        /// </summary>
        [DataMember(Name = "functionCall", EmitDefaultValue = false)]
        public FunctionCall FunctionCall { get; set; }

        /// <summary>
        /// Gets or Sets FunctionResponse
        /// </summary>
        [DataMember(Name = "functionResponse", EmitDefaultValue = false)]
        public FunctionResponse FunctionResponse { get; set; }

        /// <summary>
        /// Gets or Sets ExecutableCode
        /// </summary>
        [DataMember(Name = "executableCode", EmitDefaultValue = false)]
        public ExecutableCode ExecutableCode { get; set; }

        /// <summary>
        /// Gets or Sets CodeExecutionResult
        /// </summary>
        [DataMember(Name = "codeExecutionResult", EmitDefaultValue = false)]
        public CodeExecutionResult CodeExecutionResult { get; set; }

        /// <summary>
        /// Gets or Sets VideoMetadata
        /// </summary>
        [DataMember(Name = "videoMetadata", EmitDefaultValue = false)]
        public VideoMetadata VideoMetadata { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RequestContentPart {\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  InlineData: ").Append(InlineData).Append("\n");
            sb.Append("  FileData: ").Append(FileData).Append("\n");
            sb.Append("  FunctionCall: ").Append(FunctionCall).Append("\n");
            sb.Append("  FunctionResponse: ").Append(FunctionResponse).Append("\n");
            sb.Append("  ExecutableCode: ").Append(ExecutableCode).Append("\n");
            sb.Append("  CodeExecutionResult: ").Append(CodeExecutionResult).Append("\n");
            sb.Append("  VideoMetadata: ").Append(VideoMetadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
