/*
 * Google Gemini API
 *
 * Comprehensive API for interacting with Google's Gemini models supporting text, chat, image generation, file uploads, grounding, code execution, model tuning, and more.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = GeminiSharp.Client.FileParameter;
using OpenAPIDateConverter = GeminiSharp.Client.OpenAPIDateConverter;

namespace GeminiSharp.Model
{
    /// <summary>
    /// PromptFeedback
    /// </summary>
    [DataContract(Name = "PromptFeedback")]
    public partial class PromptFeedback : IValidatableObject
    {
        /// <summary>
        /// If set, the prompt was blocked and no candidates are returned
        /// </summary>
        /// <value>If set, the prompt was blocked and no candidates are returned</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum BlockReasonEnum
        {
            /// <summary>
            /// Enum BLOCKREASONUNSPECIFIED for value: BLOCK_REASON_UNSPECIFIED
            /// </summary>
            [EnumMember(Value = "BLOCK_REASON_UNSPECIFIED")]
            BLOCKREASONUNSPECIFIED = 1,

            /// <summary>
            /// Enum SAFETY for value: SAFETY
            /// </summary>
            [EnumMember(Value = "SAFETY")]
            SAFETY = 2,

            /// <summary>
            /// Enum OTHER for value: OTHER
            /// </summary>
            [EnumMember(Value = "OTHER")]
            OTHER = 3,

            /// <summary>
            /// Enum BLOCKLIST for value: BLOCKLIST
            /// </summary>
            [EnumMember(Value = "BLOCKLIST")]
            BLOCKLIST = 4,

            /// <summary>
            /// Enum PROHIBITEDCONTENT for value: PROHIBITED_CONTENT
            /// </summary>
            [EnumMember(Value = "PROHIBITED_CONTENT")]
            PROHIBITEDCONTENT = 5
        }


        /// <summary>
        /// If set, the prompt was blocked and no candidates are returned
        /// </summary>
        /// <value>If set, the prompt was blocked and no candidates are returned</value>
        [DataMember(Name = "blockReason", EmitDefaultValue = false)]
        public BlockReasonEnum? BlockReason { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PromptFeedback" /> class.
        /// </summary>
        /// <param name="blockReason">If set, the prompt was blocked and no candidates are returned.</param>
        /// <param name="safetyRatings">Ratings for safety of the prompt.</param>
        public PromptFeedback(BlockReasonEnum? blockReason = default, Collection<SafetyRating> safetyRatings = default)
        {
            this.BlockReason = blockReason;
            this.SafetyRatings = safetyRatings;
        }

        /// <summary>
        /// Ratings for safety of the prompt
        /// </summary>
        /// <value>Ratings for safety of the prompt</value>
        [DataMember(Name = "safetyRatings", EmitDefaultValue = false)]
        public Collection<SafetyRating> SafetyRatings { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PromptFeedback {\n");
            sb.Append("  BlockReason: ").Append(BlockReason).Append("\n");
            sb.Append("  SafetyRatings: ").Append(SafetyRatings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
