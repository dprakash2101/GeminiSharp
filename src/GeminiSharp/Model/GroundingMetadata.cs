/*
 * Google Gemini API
 *
 * Comprehensive API for interacting with Google's Gemini models supporting text, chat, image generation, file uploads, grounding, code execution, model tuning, and more.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = GeminiSharp.Client.FileParameter;
using OpenAPIDateConverter = GeminiSharp.Client.OpenAPIDateConverter;

namespace GeminiSharp.Model
{
    /// <summary>
    /// GroundingMetadata
    /// </summary>
    [DataContract(Name = "GroundingMetadata")]
    public partial class GroundingMetadata : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GroundingMetadata" /> class.
        /// </summary>
        /// <param name="groundingChunks">List of supporting references retrieved from the specified grounding source.</param>
        /// <param name="groundingSupports">List of grounding support.</param>
        /// <param name="webSearchQueries">Web search queries for the following-up web search.</param>
        /// <param name="searchEntryPoint">searchEntryPoint.</param>
        /// <param name="retrievalMetadata">retrievalMetadata.</param>
        public GroundingMetadata(Collection<GroundingChunk> groundingChunks = default, Collection<GroundingSupport> groundingSupports = default, Collection<string> webSearchQueries = default, SearchEntryPoint searchEntryPoint = default, RetrievalMetadata retrievalMetadata = default)
        {
            this.GroundingChunks = groundingChunks;
            this.GroundingSupports = groundingSupports;
            this.WebSearchQueries = webSearchQueries;
            this.SearchEntryPoint = searchEntryPoint;
            this.RetrievalMetadata = retrievalMetadata;
        }

        /// <summary>
        /// List of supporting references retrieved from the specified grounding source
        /// </summary>
        /// <value>List of supporting references retrieved from the specified grounding source</value>
        [DataMember(Name = "groundingChunks", EmitDefaultValue = false)]
        public Collection<GroundingChunk> GroundingChunks { get; set; }

        /// <summary>
        /// List of grounding support
        /// </summary>
        /// <value>List of grounding support</value>
        [DataMember(Name = "groundingSupports", EmitDefaultValue = false)]
        public Collection<GroundingSupport> GroundingSupports { get; set; }

        /// <summary>
        /// Web search queries for the following-up web search
        /// </summary>
        /// <value>Web search queries for the following-up web search</value>
        [DataMember(Name = "webSearchQueries", EmitDefaultValue = false)]
        public Collection<string> WebSearchQueries { get; set; }

        /// <summary>
        /// Gets or Sets SearchEntryPoint
        /// </summary>
        [DataMember(Name = "searchEntryPoint", EmitDefaultValue = false)]
        public SearchEntryPoint SearchEntryPoint { get; set; }

        /// <summary>
        /// Gets or Sets RetrievalMetadata
        /// </summary>
        [DataMember(Name = "retrievalMetadata", EmitDefaultValue = false)]
        public RetrievalMetadata RetrievalMetadata { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GroundingMetadata {\n");
            sb.Append("  GroundingChunks: ").Append(GroundingChunks).Append("\n");
            sb.Append("  GroundingSupports: ").Append(GroundingSupports).Append("\n");
            sb.Append("  WebSearchQueries: ").Append(WebSearchQueries).Append("\n");
            sb.Append("  SearchEntryPoint: ").Append(SearchEntryPoint).Append("\n");
            sb.Append("  RetrievalMetadata: ").Append(RetrievalMetadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
