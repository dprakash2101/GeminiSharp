/*
 * Google Gemini API
 *
 * Comprehensive API for interacting with Google's Gemini models supporting text, chat, image generation, file uploads, grounding, code execution, model tuning, and more.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = GeminiSharp.Client.FileParameter;
using OpenAPIDateConverter = GeminiSharp.Client.OpenAPIDateConverter;

namespace GeminiSharp.Model
{
    /// <summary>
    /// TuningTask
    /// </summary>
    [DataContract(Name = "TuningTask")]
    public partial class TuningTask : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TuningTask" /> class.
        /// </summary>
        /// <param name="startTime">Output only. The timestamp when tuning this model started.</param>
        /// <param name="completeTime">Output only. The timestamp when tuning this model completed.</param>
        /// <param name="snapshots">Output only. Metrics collected during tuning.</param>
        /// <param name="trainingData">trainingData.</param>
        /// <param name="hyperparameters">hyperparameters.</param>
        public TuningTask(DateTime startTime = default, DateTime completeTime = default, Collection<TuningSnapshot> snapshots = default, Dataset trainingData = default, Hyperparameters hyperparameters = default)
        {
            this.StartTime = startTime;
            this.CompleteTime = completeTime;
            this.Snapshots = snapshots;
            this.TrainingData = trainingData;
            this.Hyperparameters = hyperparameters;
        }

        /// <summary>
        /// Output only. The timestamp when tuning this model started
        /// </summary>
        /// <value>Output only. The timestamp when tuning this model started</value>
        [DataMember(Name = "startTime", EmitDefaultValue = false)]
        public DateTime StartTime { get; set; }

        /// <summary>
        /// Output only. The timestamp when tuning this model completed
        /// </summary>
        /// <value>Output only. The timestamp when tuning this model completed</value>
        [DataMember(Name = "completeTime", EmitDefaultValue = false)]
        public DateTime CompleteTime { get; set; }

        /// <summary>
        /// Output only. Metrics collected during tuning
        /// </summary>
        /// <value>Output only. Metrics collected during tuning</value>
        [DataMember(Name = "snapshots", EmitDefaultValue = false)]
        public Collection<TuningSnapshot> Snapshots { get; set; }

        /// <summary>
        /// Gets or Sets TrainingData
        /// </summary>
        [DataMember(Name = "trainingData", EmitDefaultValue = false)]
        public Dataset TrainingData { get; set; }

        /// <summary>
        /// Gets or Sets Hyperparameters
        /// </summary>
        [DataMember(Name = "hyperparameters", EmitDefaultValue = false)]
        public Hyperparameters Hyperparameters { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TuningTask {\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  CompleteTime: ").Append(CompleteTime).Append("\n");
            sb.Append("  Snapshots: ").Append(Snapshots).Append("\n");
            sb.Append("  TrainingData: ").Append(TrainingData).Append("\n");
            sb.Append("  Hyperparameters: ").Append(Hyperparameters).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
