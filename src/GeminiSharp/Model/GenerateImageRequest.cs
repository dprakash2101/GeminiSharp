/*
 * Google Gemini API
 *
 * Comprehensive API for interacting with Google's Gemini models supporting text, chat, image generation, file uploads, grounding, code execution, model tuning, and more.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = GeminiSharp.Client.FileParameter;
using OpenAPIDateConverter = GeminiSharp.Client.OpenAPIDateConverter;

namespace GeminiSharp.Model
{
    /// <summary>
    /// GenerateImageRequest
    /// </summary>
    [DataContract(Name = "GenerateImageRequest")]
    public partial class GenerateImageRequest : IValidatableObject
    {
        /// <summary>
        /// Optional. Controls the aspect ratio of the generated image
        /// </summary>
        /// <value>Optional. Controls the aspect ratio of the generated image</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AspectRatioEnum
        {
            /// <summary>
            /// Enum ASPECTRATIOUNSPECIFIED for value: ASPECT_RATIO_UNSPECIFIED
            /// </summary>
            [EnumMember(Value = "ASPECT_RATIO_UNSPECIFIED")]
            ASPECTRATIOUNSPECIFIED = 1,

            /// <summary>
            /// Enum ASPECTRATIOSQUARE for value: ASPECT_RATIO_SQUARE
            /// </summary>
            [EnumMember(Value = "ASPECT_RATIO_SQUARE")]
            ASPECTRATIOSQUARE = 2,

            /// <summary>
            /// Enum ASPECTRATIOLANDSCAPE for value: ASPECT_RATIO_LANDSCAPE
            /// </summary>
            [EnumMember(Value = "ASPECT_RATIO_LANDSCAPE")]
            ASPECTRATIOLANDSCAPE = 3,

            /// <summary>
            /// Enum ASPECTRATIOPORTRAIT for value: ASPECT_RATIO_PORTRAIT
            /// </summary>
            [EnumMember(Value = "ASPECT_RATIO_PORTRAIT")]
            ASPECTRATIOPORTRAIT = 4
        }


        /// <summary>
        /// Optional. Controls the aspect ratio of the generated image
        /// </summary>
        /// <value>Optional. Controls the aspect ratio of the generated image</value>
        [DataMember(Name = "aspectRatio", EmitDefaultValue = false)]
        public AspectRatioEnum? AspectRatio { get; set; }
        /// <summary>
        /// Optional. Level of the safety filter applied to detect problematic content
        /// </summary>
        /// <value>Optional. Level of the safety filter applied to detect problematic content</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SafetyFilterLevelEnum
        {
            /// <summary>
            /// Enum SAFETYFILTERLEVELUNSPECIFIED for value: SAFETY_FILTER_LEVEL_UNSPECIFIED
            /// </summary>
            [EnumMember(Value = "SAFETY_FILTER_LEVEL_UNSPECIFIED")]
            SAFETYFILTERLEVELUNSPECIFIED = 1,

            /// <summary>
            /// Enum SAFETYFILTERLEVELLOW for value: SAFETY_FILTER_LEVEL_LOW
            /// </summary>
            [EnumMember(Value = "SAFETY_FILTER_LEVEL_LOW")]
            SAFETYFILTERLEVELLOW = 2,

            /// <summary>
            /// Enum SAFETYFILTERLEVELMEDIUM for value: SAFETY_FILTER_LEVEL_MEDIUM
            /// </summary>
            [EnumMember(Value = "SAFETY_FILTER_LEVEL_MEDIUM")]
            SAFETYFILTERLEVELMEDIUM = 3,

            /// <summary>
            /// Enum SAFETYFILTERLEVELHIGH for value: SAFETY_FILTER_LEVEL_HIGH
            /// </summary>
            [EnumMember(Value = "SAFETY_FILTER_LEVEL_HIGH")]
            SAFETYFILTERLEVELHIGH = 4
        }


        /// <summary>
        /// Optional. Level of the safety filter applied to detect problematic content
        /// </summary>
        /// <value>Optional. Level of the safety filter applied to detect problematic content</value>
        [DataMember(Name = "safetyFilterLevel", EmitDefaultValue = false)]
        public SafetyFilterLevelEnum? SafetyFilterLevel { get; set; }
        /// <summary>
        /// Optional. Allow generation of people in the image
        /// </summary>
        /// <value>Optional. Allow generation of people in the image</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PersonGenerationEnum
        {
            /// <summary>
            /// Enum PERSONGENERATIONUNSPECIFIED for value: PERSON_GENERATION_UNSPECIFIED
            /// </summary>
            [EnumMember(Value = "PERSON_GENERATION_UNSPECIFIED")]
            PERSONGENERATIONUNSPECIFIED = 1,

            /// <summary>
            /// Enum DONTALLOW for value: DONT_ALLOW
            /// </summary>
            [EnumMember(Value = "DONT_ALLOW")]
            DONTALLOW = 2,

            /// <summary>
            /// Enum ALLOWADULT for value: ALLOW_ADULT
            /// </summary>
            [EnumMember(Value = "ALLOW_ADULT")]
            ALLOWADULT = 3,

            /// <summary>
            /// Enum ALLOWALL for value: ALLOW_ALL
            /// </summary>
            [EnumMember(Value = "ALLOW_ALL")]
            ALLOWALL = 4
        }


        /// <summary>
        /// Optional. Allow generation of people in the image
        /// </summary>
        /// <value>Optional. Allow generation of people in the image</value>
        [DataMember(Name = "personGeneration", EmitDefaultValue = false)]
        public PersonGenerationEnum? PersonGeneration { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GenerateImageRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GenerateImageRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GenerateImageRequest" /> class.
        /// </summary>
        /// <param name="prompt">Required. A text description of the desired image (required).</param>
        /// <param name="numberOfImages">Optional. Number of images to generate (default to 1).</param>
        /// <param name="aspectRatio">Optional. Controls the aspect ratio of the generated image.</param>
        /// <param name="negativePrompt">Optional. A description of what you want to omit from the generated image.</param>
        /// <param name="safetyFilterLevel">Optional. Level of the safety filter applied to detect problematic content.</param>
        /// <param name="personGeneration">Optional. Allow generation of people in the image.</param>
        public GenerateImageRequest(string prompt = default, int numberOfImages = 1, AspectRatioEnum? aspectRatio = default, string negativePrompt = default, SafetyFilterLevelEnum? safetyFilterLevel = default, PersonGenerationEnum? personGeneration = default)
        {
            // to ensure "prompt" is required (not null)
            if (prompt == null)
            {
                throw new ArgumentNullException("prompt is a required property for GenerateImageRequest and cannot be null");
            }
            this.Prompt = prompt;
            this.NumberOfImages = numberOfImages;
            this.AspectRatio = aspectRatio;
            this.NegativePrompt = negativePrompt;
            this.SafetyFilterLevel = safetyFilterLevel;
            this.PersonGeneration = personGeneration;
        }

        /// <summary>
        /// Required. A text description of the desired image
        /// </summary>
        /// <value>Required. A text description of the desired image</value>
        [DataMember(Name = "prompt", IsRequired = true, EmitDefaultValue = true)]
        public string Prompt { get; set; }

        /// <summary>
        /// Optional. Number of images to generate
        /// </summary>
        /// <value>Optional. Number of images to generate</value>
        [DataMember(Name = "numberOfImages", EmitDefaultValue = false)]
        public int NumberOfImages { get; set; }

        /// <summary>
        /// Optional. A description of what you want to omit from the generated image
        /// </summary>
        /// <value>Optional. A description of what you want to omit from the generated image</value>
        [DataMember(Name = "negativePrompt", EmitDefaultValue = false)]
        public string NegativePrompt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GenerateImageRequest {\n");
            sb.Append("  Prompt: ").Append(Prompt).Append("\n");
            sb.Append("  NumberOfImages: ").Append(NumberOfImages).Append("\n");
            sb.Append("  AspectRatio: ").Append(AspectRatio).Append("\n");
            sb.Append("  NegativePrompt: ").Append(NegativePrompt).Append("\n");
            sb.Append("  SafetyFilterLevel: ").Append(SafetyFilterLevel).Append("\n");
            sb.Append("  PersonGeneration: ").Append(PersonGeneration).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // NumberOfImages (int) maximum
            if (this.NumberOfImages > (int)8)
            {
                yield return new ValidationResult("Invalid value for NumberOfImages, must be a value less than or equal to 8.", new [] { "NumberOfImages" });
            }

            // NumberOfImages (int) minimum
            if (this.NumberOfImages < (int)1)
            {
                yield return new ValidationResult("Invalid value for NumberOfImages, must be a value greater than or equal to 1.", new [] { "NumberOfImages" });
            }

            yield break;
        }
    }

}
