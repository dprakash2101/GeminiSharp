/*
 * Google Gemini API
 *
 * Comprehensive API for interacting with Google's Gemini models supporting text, chat, image generation, file uploads, grounding, code execution, model tuning, and more.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using Xunit;

using GeminiSharp.Client;
using GeminiSharp.Api;
// uncomment below to import models
//using GeminiSharp.Model;

namespace GeminiSharp.Test.Api
{
    /// <summary>
    ///  Class for testing GeminiApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class GeminiApiTests : IDisposable
    {
        private GeminiApi instance;

        public GeminiApiTests()
        {
            instance = new GeminiApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of GeminiApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' GeminiApi
            //Assert.IsType<GeminiApi>(instance);
        }

        /// <summary>
        /// Test BatchEmbedContents
        /// </summary>
        [Fact]
        public void BatchEmbedContentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string model = null;
            //BatchEmbedContentsRequest batchEmbedContentsRequest = null;
            //var response = instance.BatchEmbedContents(model, batchEmbedContentsRequest);
            //Assert.IsType<BatchEmbedContents200Response>(response);
        }

        /// <summary>
        /// Test CancelOperation
        /// </summary>
        [Fact]
        public void CancelOperationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //instance.CancelOperation(name);
        }

        /// <summary>
        /// Test CountTokens
        /// </summary>
        [Fact]
        public void CountTokensTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string model = null;
            //GenerateContentRequest generateContentRequest = null;
            //var response = instance.CountTokens(model, generateContentRequest);
            //Assert.IsType<CountTokens200Response>(response);
        }

        /// <summary>
        /// Test CreateCachedContent
        /// </summary>
        [Fact]
        public void CreateCachedContentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CachedContent cachedContent = null;
            //var response = instance.CreateCachedContent(cachedContent);
            //Assert.IsType<CachedContent>(response);
        }

        /// <summary>
        /// Test CreateChunk
        /// </summary>
        [Fact]
        public void CreateChunkTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string corpus = null;
            //string document = null;
            //Chunk chunk = null;
            //var response = instance.CreateChunk(corpus, document, chunk);
            //Assert.IsType<Chunk>(response);
        }

        /// <summary>
        /// Test CreateCorpus
        /// </summary>
        [Fact]
        public void CreateCorpusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Corpus corpus = null;
            //var response = instance.CreateCorpus(corpus);
            //Assert.IsType<Corpus>(response);
        }

        /// <summary>
        /// Test CreateDocument
        /// </summary>
        [Fact]
        public void CreateDocumentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string corpus = null;
            //Document document = null;
            //var response = instance.CreateDocument(corpus, document);
            //Assert.IsType<Document>(response);
        }

        /// <summary>
        /// Test CreateTunedModel
        /// </summary>
        [Fact]
        public void CreateTunedModelTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateTunedModelRequest createTunedModelRequest = null;
            //var response = instance.CreateTunedModel(createTunedModelRequest);
            //Assert.IsType<Operation>(response);
        }

        /// <summary>
        /// Test DeleteCachedContent
        /// </summary>
        [Fact]
        public void DeleteCachedContentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //instance.DeleteCachedContent(name);
        }

        /// <summary>
        /// Test DeleteChunk
        /// </summary>
        [Fact]
        public void DeleteChunkTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string corpus = null;
            //string document = null;
            //string chunk = null;
            //instance.DeleteChunk(corpus, document, chunk);
        }

        /// <summary>
        /// Test DeleteCorpus
        /// </summary>
        [Fact]
        public void DeleteCorpusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //instance.DeleteCorpus(name);
        }

        /// <summary>
        /// Test DeleteDocument
        /// </summary>
        [Fact]
        public void DeleteDocumentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string corpus = null;
            //string document = null;
            //instance.DeleteDocument(corpus, document);
        }

        /// <summary>
        /// Test DeleteFile
        /// </summary>
        [Fact]
        public void DeleteFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //instance.DeleteFile(name);
        }

        /// <summary>
        /// Test DeleteTunedModel
        /// </summary>
        [Fact]
        public void DeleteTunedModelTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //instance.DeleteTunedModel(name);
        }

        /// <summary>
        /// Test EmbedContent
        /// </summary>
        [Fact]
        public void EmbedContentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string model = null;
            //EmbedContentRequest embedContentRequest = null;
            //var response = instance.EmbedContent(model, embedContentRequest);
            //Assert.IsType<ContentEmbedding>(response);
        }

        /// <summary>
        /// Test GenerateContent
        /// </summary>
        [Fact]
        public void GenerateContentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string model = null;
            //GenerateContentRequest generateContentRequest = null;
            //var response = instance.GenerateContent(model, generateContentRequest);
            //Assert.IsType<GenerateContentResponse>(response);
        }

        /// <summary>
        /// Test GenerateImage
        /// </summary>
        [Fact]
        public void GenerateImageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string model = null;
            //GenerateImageRequest generateImageRequest = null;
            //var response = instance.GenerateImage(model, generateImageRequest);
            //Assert.IsType<GenerateImageResponse>(response);
        }

        /// <summary>
        /// Test GetCachedContent
        /// </summary>
        [Fact]
        public void GetCachedContentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //var response = instance.GetCachedContent(name);
            //Assert.IsType<CachedContent>(response);
        }

        /// <summary>
        /// Test GetChunk
        /// </summary>
        [Fact]
        public void GetChunkTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string corpus = null;
            //string document = null;
            //string chunk = null;
            //var response = instance.GetChunk(corpus, document, chunk);
            //Assert.IsType<Chunk>(response);
        }

        /// <summary>
        /// Test GetCorpus
        /// </summary>
        [Fact]
        public void GetCorpusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //var response = instance.GetCorpus(name);
            //Assert.IsType<Corpus>(response);
        }

        /// <summary>
        /// Test GetDocument
        /// </summary>
        [Fact]
        public void GetDocumentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string corpus = null;
            //string document = null;
            //var response = instance.GetDocument(corpus, document);
            //Assert.IsType<Document>(response);
        }

        /// <summary>
        /// Test GetFile
        /// </summary>
        [Fact]
        public void GetFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //var response = instance.GetFile(name);
            //Assert.IsType<File>(response);
        }

        /// <summary>
        /// Test GetModel
        /// </summary>
        [Fact]
        public void GetModelTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string model = null;
            //var response = instance.GetModel(model);
            //Assert.IsType<GeminiModel>(response);
        }

        /// <summary>
        /// Test GetOperation
        /// </summary>
        [Fact]
        public void GetOperationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //var response = instance.GetOperation(name);
            //Assert.IsType<Operation>(response);
        }

        /// <summary>
        /// Test GetTunedModel
        /// </summary>
        [Fact]
        public void GetTunedModelTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //var response = instance.GetTunedModel(name);
            //Assert.IsType<TunedModel>(response);
        }

        /// <summary>
        /// Test ListCachedContents
        /// </summary>
        [Fact]
        public void ListCachedContentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? pageSize = null;
            //string? pageToken = null;
            //var response = instance.ListCachedContents(pageSize, pageToken);
            //Assert.IsType<ListCachedContents200Response>(response);
        }

        /// <summary>
        /// Test ListChunks
        /// </summary>
        [Fact]
        public void ListChunksTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string corpus = null;
            //string document = null;
            //int? pageSize = null;
            //string? pageToken = null;
            //var response = instance.ListChunks(corpus, document, pageSize, pageToken);
            //Assert.IsType<ListChunks200Response>(response);
        }

        /// <summary>
        /// Test ListCorpora
        /// </summary>
        [Fact]
        public void ListCorporaTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? pageSize = null;
            //string? pageToken = null;
            //var response = instance.ListCorpora(pageSize, pageToken);
            //Assert.IsType<ListCorpora200Response>(response);
        }

        /// <summary>
        /// Test ListDocuments
        /// </summary>
        [Fact]
        public void ListDocumentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string corpus = null;
            //int? pageSize = null;
            //string? pageToken = null;
            //var response = instance.ListDocuments(corpus, pageSize, pageToken);
            //Assert.IsType<ListDocuments200Response>(response);
        }

        /// <summary>
        /// Test ListFiles
        /// </summary>
        [Fact]
        public void ListFilesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? pageSize = null;
            //string? pageToken = null;
            //var response = instance.ListFiles(pageSize, pageToken);
            //Assert.IsType<ListFiles200Response>(response);
        }

        /// <summary>
        /// Test ListModels
        /// </summary>
        [Fact]
        public void ListModelsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? pageSize = null;
            //string? pageToken = null;
            //var response = instance.ListModels(pageSize, pageToken);
            //Assert.IsType<ListModels200Response>(response);
        }

        /// <summary>
        /// Test ListOperations
        /// </summary>
        [Fact]
        public void ListOperationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? name = null;
            //string? filter = null;
            //int? pageSize = null;
            //string? pageToken = null;
            //var response = instance.ListOperations(name, filter, pageSize, pageToken);
            //Assert.IsType<ListOperations200Response>(response);
        }

        /// <summary>
        /// Test ListTunedModels
        /// </summary>
        [Fact]
        public void ListTunedModelsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? pageSize = null;
            //string? pageToken = null;
            //string? filter = null;
            //var response = instance.ListTunedModels(pageSize, pageToken, filter);
            //Assert.IsType<ListTunedModels200Response>(response);
        }

        /// <summary>
        /// Test QueryCorpus
        /// </summary>
        [Fact]
        public void QueryCorpusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string corpus = null;
            //QueryCorpusRequest queryCorpusRequest = null;
            //var response = instance.QueryCorpus(corpus, queryCorpusRequest);
            //Assert.IsType<QueryCorpusResponse>(response);
        }

        /// <summary>
        /// Test StreamGenerateContent
        /// </summary>
        [Fact]
        public void StreamGenerateContentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string model = null;
            //GenerateContentRequest generateContentRequest = null;
            //var response = instance.StreamGenerateContent(model, generateContentRequest);
            //Assert.IsType<string>(response);
        }

        /// <summary>
        /// Test UpdateCachedContent
        /// </summary>
        [Fact]
        public void UpdateCachedContentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //CachedContent cachedContent = null;
            //string? updateMask = null;
            //var response = instance.UpdateCachedContent(name, cachedContent, updateMask);
            //Assert.IsType<CachedContent>(response);
        }

        /// <summary>
        /// Test UpdateChunk
        /// </summary>
        [Fact]
        public void UpdateChunkTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string corpus = null;
            //string document = null;
            //string chunk = null;
            //Chunk chunk2 = null;
            //string? updateMask = null;
            //var response = instance.UpdateChunk(corpus, document, chunk, chunk2, updateMask);
            //Assert.IsType<Chunk>(response);
        }

        /// <summary>
        /// Test UpdateCorpus
        /// </summary>
        [Fact]
        public void UpdateCorpusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //Corpus corpus = null;
            //string? updateMask = null;
            //var response = instance.UpdateCorpus(name, corpus, updateMask);
            //Assert.IsType<Corpus>(response);
        }

        /// <summary>
        /// Test UpdateDocument
        /// </summary>
        [Fact]
        public void UpdateDocumentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string corpus = null;
            //string document = null;
            //Document document2 = null;
            //string? updateMask = null;
            //var response = instance.UpdateDocument(corpus, document, document2, updateMask);
            //Assert.IsType<Document>(response);
        }

        /// <summary>
        /// Test UpdateTunedModel
        /// </summary>
        [Fact]
        public void UpdateTunedModelTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //TunedModel tunedModel = null;
            //string? updateMask = null;
            //var response = instance.UpdateTunedModel(name, tunedModel, updateMask);
            //Assert.IsType<TunedModel>(response);
        }

        /// <summary>
        /// Test UploadFile
        /// </summary>
        [Fact]
        public void UploadFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //FileParameter? file = null;
            //UploadFileRequestMetadata? metadata = null;
            //var response = instance.UploadFile(file, metadata);
            //Assert.IsType<File>(response);
        }

        /// <summary>
        /// Test UploadMedia
        /// </summary>
        [Fact]
        public void UploadMediaTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //FileParameter? file = null;
            //var response = instance.UploadMedia(file);
            //Assert.IsType<File>(response);
        }
    }
}
