/*
 * Google Gemini API
 *
 * Comprehensive API for interacting with Google's Gemini models supporting text, chat, image generation, file uploads, grounding, code execution, model tuning, and more.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using GeminiSharp.Client;
using GeminiSharp.Model;

namespace GeminiSharp.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGeminiApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Batch Embed Contents
        /// </summary>
        /// <remarks>
        /// Generates embeddings for multiple pieces of content in a single request.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <param name="batchEmbedContentsRequest"></param>
        /// <returns>BatchEmbedContents200Response</returns>
        BatchEmbedContents200Response BatchEmbedContents(string model, BatchEmbedContentsRequest batchEmbedContentsRequest);

        /// <summary>
        /// Batch Embed Contents
        /// </summary>
        /// <remarks>
        /// Generates embeddings for multiple pieces of content in a single request.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <param name="batchEmbedContentsRequest"></param>
        /// <returns>ApiResponse of BatchEmbedContents200Response</returns>
        ApiResponse<BatchEmbedContents200Response> BatchEmbedContentsWithHttpInfo(string model, BatchEmbedContentsRequest batchEmbedContentsRequest);
        /// <summary>
        /// Cancel Operation
        /// </summary>
        /// <remarks>
        /// Cancels a long-running operation.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns></returns>
        void CancelOperation(string name);

        /// <summary>
        /// Cancel Operation
        /// </summary>
        /// <remarks>
        /// Cancels a long-running operation.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CancelOperationWithHttpInfo(string name);
        /// <summary>
        /// Count Tokens
        /// </summary>
        /// <remarks>
        /// Counts the number of tokens in the given prompt.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <param name="generateContentRequest"></param>
        /// <returns>CountTokens200Response</returns>
        CountTokens200Response CountTokens(string model, GenerateContentRequest generateContentRequest);

        /// <summary>
        /// Count Tokens
        /// </summary>
        /// <remarks>
        /// Counts the number of tokens in the given prompt.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <param name="generateContentRequest"></param>
        /// <returns>ApiResponse of CountTokens200Response</returns>
        ApiResponse<CountTokens200Response> CountTokensWithHttpInfo(string model, GenerateContentRequest generateContentRequest);
        /// <summary>
        /// Create Cached Content
        /// </summary>
        /// <remarks>
        /// Creates cached content for efficient context reuse in subsequent requests.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cachedContent"></param>
        /// <returns>CachedContent</returns>
        CachedContent CreateCachedContent(CachedContent cachedContent);

        /// <summary>
        /// Create Cached Content
        /// </summary>
        /// <remarks>
        /// Creates cached content for efficient context reuse in subsequent requests.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cachedContent"></param>
        /// <returns>ApiResponse of CachedContent</returns>
        ApiResponse<CachedContent> CreateCachedContentWithHttpInfo(CachedContent cachedContent);
        /// <summary>
        /// Create Chunk
        /// </summary>
        /// <remarks>
        /// Creates a chunk in a document.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corpus"></param>
        /// <param name="document"></param>
        /// <param name="chunk"></param>
        /// <returns>Chunk</returns>
        Chunk CreateChunk(string corpus, string document, Chunk chunk);

        /// <summary>
        /// Create Chunk
        /// </summary>
        /// <remarks>
        /// Creates a chunk in a document.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corpus"></param>
        /// <param name="document"></param>
        /// <param name="chunk"></param>
        /// <returns>ApiResponse of Chunk</returns>
        ApiResponse<Chunk> CreateChunkWithHttpInfo(string corpus, string document, Chunk chunk);
        /// <summary>
        /// Create Corpus
        /// </summary>
        /// <remarks>
        /// Creates a corpus for semantic retrieval.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corpus"></param>
        /// <returns>Corpus</returns>
        Corpus CreateCorpus(Corpus corpus);

        /// <summary>
        /// Create Corpus
        /// </summary>
        /// <remarks>
        /// Creates a corpus for semantic retrieval.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corpus"></param>
        /// <returns>ApiResponse of Corpus</returns>
        ApiResponse<Corpus> CreateCorpusWithHttpInfo(Corpus corpus);
        /// <summary>
        /// Create Document
        /// </summary>
        /// <remarks>
        /// Creates a document in a corpus.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corpus"></param>
        /// <param name="document"></param>
        /// <returns>Document</returns>
        Document CreateDocument(string corpus, Document document);

        /// <summary>
        /// Create Document
        /// </summary>
        /// <remarks>
        /// Creates a document in a corpus.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corpus"></param>
        /// <param name="document"></param>
        /// <returns>ApiResponse of Document</returns>
        ApiResponse<Document> CreateDocumentWithHttpInfo(string corpus, Document document);
        /// <summary>
        /// Create Tuned Model
        /// </summary>
        /// <remarks>
        /// Creates a tuned model.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTunedModelRequest"></param>
        /// <returns>Operation</returns>
        Operation CreateTunedModel(CreateTunedModelRequest createTunedModelRequest);

        /// <summary>
        /// Create Tuned Model
        /// </summary>
        /// <remarks>
        /// Creates a tuned model.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTunedModelRequest"></param>
        /// <returns>ApiResponse of Operation</returns>
        ApiResponse<Operation> CreateTunedModelWithHttpInfo(CreateTunedModelRequest createTunedModelRequest);
        /// <summary>
        /// Delete Cached Content
        /// </summary>
        /// <remarks>
        /// Deletes cached content.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns></returns>
        void DeleteCachedContent(string name);

        /// <summary>
        /// Delete Cached Content
        /// </summary>
        /// <remarks>
        /// Deletes cached content.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCachedContentWithHttpInfo(string name);
        /// <summary>
        /// Delete Chunk
        /// </summary>
        /// <remarks>
        /// Deletes a chunk from a document.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corpus"></param>
        /// <param name="document"></param>
        /// <param name="chunk"></param>
        /// <returns></returns>
        void DeleteChunk(string corpus, string document, string chunk);

        /// <summary>
        /// Delete Chunk
        /// </summary>
        /// <remarks>
        /// Deletes a chunk from a document.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corpus"></param>
        /// <param name="document"></param>
        /// <param name="chunk"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteChunkWithHttpInfo(string corpus, string document, string chunk);
        /// <summary>
        /// Delete Corpus
        /// </summary>
        /// <remarks>
        /// Deletes a corpus.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns></returns>
        void DeleteCorpus(string name);

        /// <summary>
        /// Delete Corpus
        /// </summary>
        /// <remarks>
        /// Deletes a corpus.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCorpusWithHttpInfo(string name);
        /// <summary>
        /// Delete Document
        /// </summary>
        /// <remarks>
        /// Deletes a document from a corpus.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corpus"></param>
        /// <param name="document"></param>
        /// <returns></returns>
        void DeleteDocument(string corpus, string document);

        /// <summary>
        /// Delete Document
        /// </summary>
        /// <remarks>
        /// Deletes a document from a corpus.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corpus"></param>
        /// <param name="document"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteDocumentWithHttpInfo(string corpus, string document);
        /// <summary>
        /// Delete File
        /// </summary>
        /// <remarks>
        /// Deletes an uploaded file.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns></returns>
        void DeleteFile(string name);

        /// <summary>
        /// Delete File
        /// </summary>
        /// <remarks>
        /// Deletes an uploaded file.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteFileWithHttpInfo(string name);
        /// <summary>
        /// Delete Tuned Model
        /// </summary>
        /// <remarks>
        /// Deletes a tuned model.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns></returns>
        void DeleteTunedModel(string name);

        /// <summary>
        /// Delete Tuned Model
        /// </summary>
        /// <remarks>
        /// Deletes a tuned model.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteTunedModelWithHttpInfo(string name);
        /// <summary>
        /// Embed Content
        /// </summary>
        /// <remarks>
        /// Generates an embedding representation of the given content.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <param name="embedContentRequest"></param>
        /// <returns>ContentEmbedding</returns>
        ContentEmbedding EmbedContent(string model, EmbedContentRequest embedContentRequest);

        /// <summary>
        /// Embed Content
        /// </summary>
        /// <remarks>
        /// Generates an embedding representation of the given content.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <param name="embedContentRequest"></param>
        /// <returns>ApiResponse of ContentEmbedding</returns>
        ApiResponse<ContentEmbedding> EmbedContentWithHttpInfo(string model, EmbedContentRequest embedContentRequest);
        /// <summary>
        /// Generate Content
        /// </summary>
        /// <remarks>
        /// Generates content from the model given an input GenerateContentRequest.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <param name="generateContentRequest"></param>
        /// <returns>GenerateContentResponse</returns>
        GenerateContentResponse GenerateContent(string model, GenerateContentRequest generateContentRequest);

        /// <summary>
        /// Generate Content
        /// </summary>
        /// <remarks>
        /// Generates content from the model given an input GenerateContentRequest.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <param name="generateContentRequest"></param>
        /// <returns>ApiResponse of GenerateContentResponse</returns>
        ApiResponse<GenerateContentResponse> GenerateContentWithHttpInfo(string model, GenerateContentRequest generateContentRequest);
        /// <summary>
        /// Generate Image
        /// </summary>
        /// <remarks>
        /// Generates images based on text prompts using Gemini image generation models.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <param name="generateImageRequest"></param>
        /// <returns>GenerateImageResponse</returns>
        GenerateImageResponse GenerateImage(string model, GenerateImageRequest generateImageRequest);

        /// <summary>
        /// Generate Image
        /// </summary>
        /// <remarks>
        /// Generates images based on text prompts using Gemini image generation models.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <param name="generateImageRequest"></param>
        /// <returns>ApiResponse of GenerateImageResponse</returns>
        ApiResponse<GenerateImageResponse> GenerateImageWithHttpInfo(string model, GenerateImageRequest generateImageRequest);
        /// <summary>
        /// Get Cached Content
        /// </summary>
        /// <remarks>
        /// Gets a cached content by name.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>CachedContent</returns>
        CachedContent GetCachedContent(string name);

        /// <summary>
        /// Get Cached Content
        /// </summary>
        /// <remarks>
        /// Gets a cached content by name.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>ApiResponse of CachedContent</returns>
        ApiResponse<CachedContent> GetCachedContentWithHttpInfo(string name);
        /// <summary>
        /// Get Chunk
        /// </summary>
        /// <remarks>
        /// Gets a chunk from a document.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corpus"></param>
        /// <param name="document"></param>
        /// <param name="chunk"></param>
        /// <returns>Chunk</returns>
        Chunk GetChunk(string corpus, string document, string chunk);

        /// <summary>
        /// Get Chunk
        /// </summary>
        /// <remarks>
        /// Gets a chunk from a document.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corpus"></param>
        /// <param name="document"></param>
        /// <param name="chunk"></param>
        /// <returns>ApiResponse of Chunk</returns>
        ApiResponse<Chunk> GetChunkWithHttpInfo(string corpus, string document, string chunk);
        /// <summary>
        /// Get Corpus
        /// </summary>
        /// <remarks>
        /// Gets a corpus by name.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>Corpus</returns>
        Corpus GetCorpus(string name);

        /// <summary>
        /// Get Corpus
        /// </summary>
        /// <remarks>
        /// Gets a corpus by name.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>ApiResponse of Corpus</returns>
        ApiResponse<Corpus> GetCorpusWithHttpInfo(string name);
        /// <summary>
        /// Get Document
        /// </summary>
        /// <remarks>
        /// Gets a document from a corpus.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corpus"></param>
        /// <param name="document"></param>
        /// <returns>Document</returns>
        Document GetDocument(string corpus, string document);

        /// <summary>
        /// Get Document
        /// </summary>
        /// <remarks>
        /// Gets a document from a corpus.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corpus"></param>
        /// <param name="document"></param>
        /// <returns>ApiResponse of Document</returns>
        ApiResponse<Document> GetDocumentWithHttpInfo(string corpus, string document);
        /// <summary>
        /// Get File
        /// </summary>
        /// <remarks>
        /// Gets the metadata for a specific uploaded file.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>File</returns>
        File GetFile(string name);

        /// <summary>
        /// Get File
        /// </summary>
        /// <remarks>
        /// Gets the metadata for a specific uploaded file.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>ApiResponse of File</returns>
        ApiResponse<File> GetFileWithHttpInfo(string name);
        /// <summary>
        /// Get Model
        /// </summary>
        /// <remarks>
        /// Gets detailed information about a specific model.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <returns>GeminiModel</returns>
        GeminiModel GetModel(string model);

        /// <summary>
        /// Get Model
        /// </summary>
        /// <remarks>
        /// Gets detailed information about a specific model.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <returns>ApiResponse of GeminiModel</returns>
        ApiResponse<GeminiModel> GetModelWithHttpInfo(string model);
        /// <summary>
        /// Get Operation
        /// </summary>
        /// <remarks>
        /// Gets the status of a long-running operation.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>Operation</returns>
        Operation GetOperation(string name);

        /// <summary>
        /// Get Operation
        /// </summary>
        /// <remarks>
        /// Gets the status of a long-running operation.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>ApiResponse of Operation</returns>
        ApiResponse<Operation> GetOperationWithHttpInfo(string name);
        /// <summary>
        /// Get Tuned Model
        /// </summary>
        /// <remarks>
        /// Gets information about a specific tuned model.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>TunedModel</returns>
        TunedModel GetTunedModel(string name);

        /// <summary>
        /// Get Tuned Model
        /// </summary>
        /// <remarks>
        /// Gets information about a specific tuned model.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>ApiResponse of TunedModel</returns>
        ApiResponse<TunedModel> GetTunedModelWithHttpInfo(string name);
        /// <summary>
        /// List Cached Contents
        /// </summary>
        /// <remarks>
        /// Lists cached contents for efficient context reuse.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <returns>ListCachedContents200Response</returns>
        ListCachedContents200Response ListCachedContents(int? pageSize = default, string? pageToken = default);

        /// <summary>
        /// List Cached Contents
        /// </summary>
        /// <remarks>
        /// Lists cached contents for efficient context reuse.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <returns>ApiResponse of ListCachedContents200Response</returns>
        ApiResponse<ListCachedContents200Response> ListCachedContentsWithHttpInfo(int? pageSize = default, string? pageToken = default);
        /// <summary>
        /// List Chunks
        /// </summary>
        /// <remarks>
        /// Lists chunks in a document.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corpus"></param>
        /// <param name="document"></param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <returns>ListChunks200Response</returns>
        ListChunks200Response ListChunks(string corpus, string document, int? pageSize = default, string? pageToken = default);

        /// <summary>
        /// List Chunks
        /// </summary>
        /// <remarks>
        /// Lists chunks in a document.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corpus"></param>
        /// <param name="document"></param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <returns>ApiResponse of ListChunks200Response</returns>
        ApiResponse<ListChunks200Response> ListChunksWithHttpInfo(string corpus, string document, int? pageSize = default, string? pageToken = default);
        /// <summary>
        /// List Corpora
        /// </summary>
        /// <remarks>
        /// Lists corpora for semantic retrieval.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <returns>ListCorpora200Response</returns>
        ListCorpora200Response ListCorpora(int? pageSize = default, string? pageToken = default);

        /// <summary>
        /// List Corpora
        /// </summary>
        /// <remarks>
        /// Lists corpora for semantic retrieval.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <returns>ApiResponse of ListCorpora200Response</returns>
        ApiResponse<ListCorpora200Response> ListCorporaWithHttpInfo(int? pageSize = default, string? pageToken = default);
        /// <summary>
        /// List Documents
        /// </summary>
        /// <remarks>
        /// Lists documents in a corpus.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corpus"></param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <returns>ListDocuments200Response</returns>
        ListDocuments200Response ListDocuments(string corpus, int? pageSize = default, string? pageToken = default);

        /// <summary>
        /// List Documents
        /// </summary>
        /// <remarks>
        /// Lists documents in a corpus.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corpus"></param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <returns>ApiResponse of ListDocuments200Response</returns>
        ApiResponse<ListDocuments200Response> ListDocumentsWithHttpInfo(string corpus, int? pageSize = default, string? pageToken = default);
        /// <summary>
        /// List Files
        /// </summary>
        /// <remarks>
        /// Lists uploaded files.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <returns>ListFiles200Response</returns>
        ListFiles200Response ListFiles(int? pageSize = default, string? pageToken = default);

        /// <summary>
        /// List Files
        /// </summary>
        /// <remarks>
        /// Lists uploaded files.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <returns>ApiResponse of ListFiles200Response</returns>
        ApiResponse<ListFiles200Response> ListFilesWithHttpInfo(int? pageSize = default, string? pageToken = default);
        /// <summary>
        /// List Models
        /// </summary>
        /// <remarks>
        /// Lists all available Gemini models including base models and tuned models.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">Maximum number of models to return (optional)</param>
        /// <param name="pageToken">Token for pagination (optional)</param>
        /// <returns>ListModels200Response</returns>
        ListModels200Response ListModels(int? pageSize = default, string? pageToken = default);

        /// <summary>
        /// List Models
        /// </summary>
        /// <remarks>
        /// Lists all available Gemini models including base models and tuned models.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">Maximum number of models to return (optional)</param>
        /// <param name="pageToken">Token for pagination (optional)</param>
        /// <returns>ApiResponse of ListModels200Response</returns>
        ApiResponse<ListModels200Response> ListModelsWithHttpInfo(int? pageSize = default, string? pageToken = default);
        /// <summary>
        /// List Operations
        /// </summary>
        /// <remarks>
        /// Lists operations that match the specified filter.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the operation&#39;s parent resource (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <returns>ListOperations200Response</returns>
        ListOperations200Response ListOperations(string? name = default, string? filter = default, int? pageSize = default, string? pageToken = default);

        /// <summary>
        /// List Operations
        /// </summary>
        /// <remarks>
        /// Lists operations that match the specified filter.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the operation&#39;s parent resource (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <returns>ApiResponse of ListOperations200Response</returns>
        ApiResponse<ListOperations200Response> ListOperationsWithHttpInfo(string? name = default, string? filter = default, int? pageSize = default, string? pageToken = default);
        /// <summary>
        /// List Tuned Models
        /// </summary>
        /// <remarks>
        /// Lists tuned models owned by the user.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="filter">Filter expression to list tuned models (optional)</param>
        /// <returns>ListTunedModels200Response</returns>
        ListTunedModels200Response ListTunedModels(int? pageSize = default, string? pageToken = default, string? filter = default);

        /// <summary>
        /// List Tuned Models
        /// </summary>
        /// <remarks>
        /// Lists tuned models owned by the user.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="filter">Filter expression to list tuned models (optional)</param>
        /// <returns>ApiResponse of ListTunedModels200Response</returns>
        ApiResponse<ListTunedModels200Response> ListTunedModelsWithHttpInfo(int? pageSize = default, string? pageToken = default, string? filter = default);
        /// <summary>
        /// Query Corpus
        /// </summary>
        /// <remarks>
        /// Performs a semantic search query against a corpus.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corpus"></param>
        /// <param name="queryCorpusRequest"></param>
        /// <returns>QueryCorpusResponse</returns>
        QueryCorpusResponse QueryCorpus(string corpus, QueryCorpusRequest queryCorpusRequest);

        /// <summary>
        /// Query Corpus
        /// </summary>
        /// <remarks>
        /// Performs a semantic search query against a corpus.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corpus"></param>
        /// <param name="queryCorpusRequest"></param>
        /// <returns>ApiResponse of QueryCorpusResponse</returns>
        ApiResponse<QueryCorpusResponse> QueryCorpusWithHttpInfo(string corpus, QueryCorpusRequest queryCorpusRequest);
        /// <summary>
        /// Stream Generate Content
        /// </summary>
        /// <remarks>
        /// Generates streaming content from the model.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <param name="generateContentRequest"></param>
        /// <returns>string</returns>
        string StreamGenerateContent(string model, GenerateContentRequest generateContentRequest);

        /// <summary>
        /// Stream Generate Content
        /// </summary>
        /// <remarks>
        /// Generates streaming content from the model.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <param name="generateContentRequest"></param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> StreamGenerateContentWithHttpInfo(string model, GenerateContentRequest generateContentRequest);
        /// <summary>
        /// Update Cached Content
        /// </summary>
        /// <remarks>
        /// Updates a cached content.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="cachedContent"></param>
        /// <param name="updateMask"> (optional)</param>
        /// <returns>CachedContent</returns>
        CachedContent UpdateCachedContent(string name, CachedContent cachedContent, string? updateMask = default);

        /// <summary>
        /// Update Cached Content
        /// </summary>
        /// <remarks>
        /// Updates a cached content.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="cachedContent"></param>
        /// <param name="updateMask"> (optional)</param>
        /// <returns>ApiResponse of CachedContent</returns>
        ApiResponse<CachedContent> UpdateCachedContentWithHttpInfo(string name, CachedContent cachedContent, string? updateMask = default);
        /// <summary>
        /// Update Chunk
        /// </summary>
        /// <remarks>
        /// Updates a chunk in a document.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corpus"></param>
        /// <param name="document"></param>
        /// <param name="chunk"></param>
        /// <param name="chunk2"></param>
        /// <param name="updateMask"> (optional)</param>
        /// <returns>Chunk</returns>
        Chunk UpdateChunk(string corpus, string document, string chunk, Chunk chunk2, string? updateMask = default);

        /// <summary>
        /// Update Chunk
        /// </summary>
        /// <remarks>
        /// Updates a chunk in a document.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corpus"></param>
        /// <param name="document"></param>
        /// <param name="chunk"></param>
        /// <param name="chunk2"></param>
        /// <param name="updateMask"> (optional)</param>
        /// <returns>ApiResponse of Chunk</returns>
        ApiResponse<Chunk> UpdateChunkWithHttpInfo(string corpus, string document, string chunk, Chunk chunk2, string? updateMask = default);
        /// <summary>
        /// Update Corpus
        /// </summary>
        /// <remarks>
        /// Updates a corpus.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="corpus"></param>
        /// <param name="updateMask"> (optional)</param>
        /// <returns>Corpus</returns>
        Corpus UpdateCorpus(string name, Corpus corpus, string? updateMask = default);

        /// <summary>
        /// Update Corpus
        /// </summary>
        /// <remarks>
        /// Updates a corpus.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="corpus"></param>
        /// <param name="updateMask"> (optional)</param>
        /// <returns>ApiResponse of Corpus</returns>
        ApiResponse<Corpus> UpdateCorpusWithHttpInfo(string name, Corpus corpus, string? updateMask = default);
        /// <summary>
        /// Update Document
        /// </summary>
        /// <remarks>
        /// Updates a document in a corpus.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corpus"></param>
        /// <param name="document"></param>
        /// <param name="document2"></param>
        /// <param name="updateMask"> (optional)</param>
        /// <returns>Document</returns>
        Document UpdateDocument(string corpus, string document, Document document2, string? updateMask = default);

        /// <summary>
        /// Update Document
        /// </summary>
        /// <remarks>
        /// Updates a document in a corpus.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corpus"></param>
        /// <param name="document"></param>
        /// <param name="document2"></param>
        /// <param name="updateMask"> (optional)</param>
        /// <returns>ApiResponse of Document</returns>
        ApiResponse<Document> UpdateDocumentWithHttpInfo(string corpus, string document, Document document2, string? updateMask = default);
        /// <summary>
        /// Update Tuned Model
        /// </summary>
        /// <remarks>
        /// Updates a tuned model.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="tunedModel"></param>
        /// <param name="updateMask">Field mask to specify which fields to update (optional)</param>
        /// <returns>TunedModel</returns>
        TunedModel UpdateTunedModel(string name, TunedModel tunedModel, string? updateMask = default);

        /// <summary>
        /// Update Tuned Model
        /// </summary>
        /// <remarks>
        /// Updates a tuned model.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="tunedModel"></param>
        /// <param name="updateMask">Field mask to specify which fields to update (optional)</param>
        /// <returns>ApiResponse of TunedModel</returns>
        ApiResponse<TunedModel> UpdateTunedModelWithHttpInfo(string name, TunedModel tunedModel, string? updateMask = default);
        /// <summary>
        /// Upload File
        /// </summary>
        /// <remarks>
        /// Creates a File by uploading to the API.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"> (optional)</param>
        /// <param name="metadata"> (optional)</param>
        /// <returns>File</returns>
        File UploadFile(FileParameter? file = default, UploadFileRequestMetadata? metadata = default);

        /// <summary>
        /// Upload File
        /// </summary>
        /// <remarks>
        /// Creates a File by uploading to the API.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"> (optional)</param>
        /// <param name="metadata"> (optional)</param>
        /// <returns>ApiResponse of File</returns>
        ApiResponse<File> UploadFileWithHttpInfo(FileParameter? file = default, UploadFileRequestMetadata? metadata = default);
        /// <summary>
        /// Upload Media
        /// </summary>
        /// <remarks>
        /// Uploads media files for processing with Gemini models.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"> (optional)</param>
        /// <returns>File</returns>
        File UploadMedia(FileParameter? file = default);

        /// <summary>
        /// Upload Media
        /// </summary>
        /// <remarks>
        /// Uploads media files for processing with Gemini models.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"> (optional)</param>
        /// <returns>ApiResponse of File</returns>
        ApiResponse<File> UploadMediaWithHttpInfo(FileParameter? file = default);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGeminiApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Batch Embed Contents
        /// </summary>
        /// <remarks>
        /// Generates embeddings for multiple pieces of content in a single request.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <param name="batchEmbedContentsRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchEmbedContents200Response</returns>
        System.Threading.Tasks.Task<BatchEmbedContents200Response> BatchEmbedContentsAsync(string model, BatchEmbedContentsRequest batchEmbedContentsRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Batch Embed Contents
        /// </summary>
        /// <remarks>
        /// Generates embeddings for multiple pieces of content in a single request.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <param name="batchEmbedContentsRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchEmbedContents200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchEmbedContents200Response>> BatchEmbedContentsWithHttpInfoAsync(string model, BatchEmbedContentsRequest batchEmbedContentsRequest, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Cancel Operation
        /// </summary>
        /// <remarks>
        /// Cancels a long-running operation.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CancelOperationAsync(string name, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Cancel Operation
        /// </summary>
        /// <remarks>
        /// Cancels a long-running operation.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CancelOperationWithHttpInfoAsync(string name, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Count Tokens
        /// </summary>
        /// <remarks>
        /// Counts the number of tokens in the given prompt.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <param name="generateContentRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CountTokens200Response</returns>
        System.Threading.Tasks.Task<CountTokens200Response> CountTokensAsync(string model, GenerateContentRequest generateContentRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Count Tokens
        /// </summary>
        /// <remarks>
        /// Counts the number of tokens in the given prompt.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <param name="generateContentRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CountTokens200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CountTokens200Response>> CountTokensWithHttpInfoAsync(string model, GenerateContentRequest generateContentRequest, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Create Cached Content
        /// </summary>
        /// <remarks>
        /// Creates cached content for efficient context reuse in subsequent requests.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cachedContent"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CachedContent</returns>
        System.Threading.Tasks.Task<CachedContent> CreateCachedContentAsync(CachedContent cachedContent, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create Cached Content
        /// </summary>
        /// <remarks>
        /// Creates cached content for efficient context reuse in subsequent requests.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cachedContent"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CachedContent)</returns>
        System.Threading.Tasks.Task<ApiResponse<CachedContent>> CreateCachedContentWithHttpInfoAsync(CachedContent cachedContent, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Create Chunk
        /// </summary>
        /// <remarks>
        /// Creates a chunk in a document.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corpus"></param>
        /// <param name="document"></param>
        /// <param name="chunk"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Chunk</returns>
        System.Threading.Tasks.Task<Chunk> CreateChunkAsync(string corpus, string document, Chunk chunk, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create Chunk
        /// </summary>
        /// <remarks>
        /// Creates a chunk in a document.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corpus"></param>
        /// <param name="document"></param>
        /// <param name="chunk"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Chunk)</returns>
        System.Threading.Tasks.Task<ApiResponse<Chunk>> CreateChunkWithHttpInfoAsync(string corpus, string document, Chunk chunk, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Create Corpus
        /// </summary>
        /// <remarks>
        /// Creates a corpus for semantic retrieval.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corpus"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Corpus</returns>
        System.Threading.Tasks.Task<Corpus> CreateCorpusAsync(Corpus corpus, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create Corpus
        /// </summary>
        /// <remarks>
        /// Creates a corpus for semantic retrieval.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corpus"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Corpus)</returns>
        System.Threading.Tasks.Task<ApiResponse<Corpus>> CreateCorpusWithHttpInfoAsync(Corpus corpus, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Create Document
        /// </summary>
        /// <remarks>
        /// Creates a document in a corpus.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corpus"></param>
        /// <param name="document"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Document</returns>
        System.Threading.Tasks.Task<Document> CreateDocumentAsync(string corpus, Document document, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create Document
        /// </summary>
        /// <remarks>
        /// Creates a document in a corpus.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corpus"></param>
        /// <param name="document"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Document)</returns>
        System.Threading.Tasks.Task<ApiResponse<Document>> CreateDocumentWithHttpInfoAsync(string corpus, Document document, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Create Tuned Model
        /// </summary>
        /// <remarks>
        /// Creates a tuned model.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTunedModelRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Operation</returns>
        System.Threading.Tasks.Task<Operation> CreateTunedModelAsync(CreateTunedModelRequest createTunedModelRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create Tuned Model
        /// </summary>
        /// <remarks>
        /// Creates a tuned model.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTunedModelRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Operation)</returns>
        System.Threading.Tasks.Task<ApiResponse<Operation>> CreateTunedModelWithHttpInfoAsync(CreateTunedModelRequest createTunedModelRequest, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Delete Cached Content
        /// </summary>
        /// <remarks>
        /// Deletes cached content.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCachedContentAsync(string name, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Cached Content
        /// </summary>
        /// <remarks>
        /// Deletes cached content.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCachedContentWithHttpInfoAsync(string name, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Delete Chunk
        /// </summary>
        /// <remarks>
        /// Deletes a chunk from a document.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corpus"></param>
        /// <param name="document"></param>
        /// <param name="chunk"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteChunkAsync(string corpus, string document, string chunk, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Chunk
        /// </summary>
        /// <remarks>
        /// Deletes a chunk from a document.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corpus"></param>
        /// <param name="document"></param>
        /// <param name="chunk"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteChunkWithHttpInfoAsync(string corpus, string document, string chunk, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Delete Corpus
        /// </summary>
        /// <remarks>
        /// Deletes a corpus.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCorpusAsync(string name, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Corpus
        /// </summary>
        /// <remarks>
        /// Deletes a corpus.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCorpusWithHttpInfoAsync(string name, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Delete Document
        /// </summary>
        /// <remarks>
        /// Deletes a document from a corpus.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corpus"></param>
        /// <param name="document"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteDocumentAsync(string corpus, string document, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Document
        /// </summary>
        /// <remarks>
        /// Deletes a document from a corpus.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corpus"></param>
        /// <param name="document"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteDocumentWithHttpInfoAsync(string corpus, string document, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Delete File
        /// </summary>
        /// <remarks>
        /// Deletes an uploaded file.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteFileAsync(string name, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete File
        /// </summary>
        /// <remarks>
        /// Deletes an uploaded file.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteFileWithHttpInfoAsync(string name, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Delete Tuned Model
        /// </summary>
        /// <remarks>
        /// Deletes a tuned model.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteTunedModelAsync(string name, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Tuned Model
        /// </summary>
        /// <remarks>
        /// Deletes a tuned model.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTunedModelWithHttpInfoAsync(string name, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Embed Content
        /// </summary>
        /// <remarks>
        /// Generates an embedding representation of the given content.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <param name="embedContentRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ContentEmbedding</returns>
        System.Threading.Tasks.Task<ContentEmbedding> EmbedContentAsync(string model, EmbedContentRequest embedContentRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Embed Content
        /// </summary>
        /// <remarks>
        /// Generates an embedding representation of the given content.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <param name="embedContentRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ContentEmbedding)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContentEmbedding>> EmbedContentWithHttpInfoAsync(string model, EmbedContentRequest embedContentRequest, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Generate Content
        /// </summary>
        /// <remarks>
        /// Generates content from the model given an input GenerateContentRequest.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <param name="generateContentRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GenerateContentResponse</returns>
        System.Threading.Tasks.Task<GenerateContentResponse> GenerateContentAsync(string model, GenerateContentRequest generateContentRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Generate Content
        /// </summary>
        /// <remarks>
        /// Generates content from the model given an input GenerateContentRequest.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <param name="generateContentRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GenerateContentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GenerateContentResponse>> GenerateContentWithHttpInfoAsync(string model, GenerateContentRequest generateContentRequest, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Generate Image
        /// </summary>
        /// <remarks>
        /// Generates images based on text prompts using Gemini image generation models.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <param name="generateImageRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GenerateImageResponse</returns>
        System.Threading.Tasks.Task<GenerateImageResponse> GenerateImageAsync(string model, GenerateImageRequest generateImageRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Generate Image
        /// </summary>
        /// <remarks>
        /// Generates images based on text prompts using Gemini image generation models.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <param name="generateImageRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GenerateImageResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GenerateImageResponse>> GenerateImageWithHttpInfoAsync(string model, GenerateImageRequest generateImageRequest, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get Cached Content
        /// </summary>
        /// <remarks>
        /// Gets a cached content by name.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CachedContent</returns>
        System.Threading.Tasks.Task<CachedContent> GetCachedContentAsync(string name, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Cached Content
        /// </summary>
        /// <remarks>
        /// Gets a cached content by name.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CachedContent)</returns>
        System.Threading.Tasks.Task<ApiResponse<CachedContent>> GetCachedContentWithHttpInfoAsync(string name, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get Chunk
        /// </summary>
        /// <remarks>
        /// Gets a chunk from a document.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corpus"></param>
        /// <param name="document"></param>
        /// <param name="chunk"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Chunk</returns>
        System.Threading.Tasks.Task<Chunk> GetChunkAsync(string corpus, string document, string chunk, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Chunk
        /// </summary>
        /// <remarks>
        /// Gets a chunk from a document.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corpus"></param>
        /// <param name="document"></param>
        /// <param name="chunk"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Chunk)</returns>
        System.Threading.Tasks.Task<ApiResponse<Chunk>> GetChunkWithHttpInfoAsync(string corpus, string document, string chunk, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get Corpus
        /// </summary>
        /// <remarks>
        /// Gets a corpus by name.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Corpus</returns>
        System.Threading.Tasks.Task<Corpus> GetCorpusAsync(string name, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Corpus
        /// </summary>
        /// <remarks>
        /// Gets a corpus by name.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Corpus)</returns>
        System.Threading.Tasks.Task<ApiResponse<Corpus>> GetCorpusWithHttpInfoAsync(string name, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get Document
        /// </summary>
        /// <remarks>
        /// Gets a document from a corpus.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corpus"></param>
        /// <param name="document"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Document</returns>
        System.Threading.Tasks.Task<Document> GetDocumentAsync(string corpus, string document, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Document
        /// </summary>
        /// <remarks>
        /// Gets a document from a corpus.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corpus"></param>
        /// <param name="document"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Document)</returns>
        System.Threading.Tasks.Task<ApiResponse<Document>> GetDocumentWithHttpInfoAsync(string corpus, string document, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get File
        /// </summary>
        /// <remarks>
        /// Gets the metadata for a specific uploaded file.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of File</returns>
        System.Threading.Tasks.Task<File> GetFileAsync(string name, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get File
        /// </summary>
        /// <remarks>
        /// Gets the metadata for a specific uploaded file.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (File)</returns>
        System.Threading.Tasks.Task<ApiResponse<File>> GetFileWithHttpInfoAsync(string name, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get Model
        /// </summary>
        /// <remarks>
        /// Gets detailed information about a specific model.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GeminiModel</returns>
        System.Threading.Tasks.Task<GeminiModel> GetModelAsync(string model, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Model
        /// </summary>
        /// <remarks>
        /// Gets detailed information about a specific model.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GeminiModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<GeminiModel>> GetModelWithHttpInfoAsync(string model, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get Operation
        /// </summary>
        /// <remarks>
        /// Gets the status of a long-running operation.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Operation</returns>
        System.Threading.Tasks.Task<Operation> GetOperationAsync(string name, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Operation
        /// </summary>
        /// <remarks>
        /// Gets the status of a long-running operation.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Operation)</returns>
        System.Threading.Tasks.Task<ApiResponse<Operation>> GetOperationWithHttpInfoAsync(string name, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get Tuned Model
        /// </summary>
        /// <remarks>
        /// Gets information about a specific tuned model.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TunedModel</returns>
        System.Threading.Tasks.Task<TunedModel> GetTunedModelAsync(string name, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Tuned Model
        /// </summary>
        /// <remarks>
        /// Gets information about a specific tuned model.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TunedModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<TunedModel>> GetTunedModelWithHttpInfoAsync(string name, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// List Cached Contents
        /// </summary>
        /// <remarks>
        /// Lists cached contents for efficient context reuse.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListCachedContents200Response</returns>
        System.Threading.Tasks.Task<ListCachedContents200Response> ListCachedContentsAsync(int? pageSize = default, string? pageToken = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List Cached Contents
        /// </summary>
        /// <remarks>
        /// Lists cached contents for efficient context reuse.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListCachedContents200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListCachedContents200Response>> ListCachedContentsWithHttpInfoAsync(int? pageSize = default, string? pageToken = default, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// List Chunks
        /// </summary>
        /// <remarks>
        /// Lists chunks in a document.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corpus"></param>
        /// <param name="document"></param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListChunks200Response</returns>
        System.Threading.Tasks.Task<ListChunks200Response> ListChunksAsync(string corpus, string document, int? pageSize = default, string? pageToken = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List Chunks
        /// </summary>
        /// <remarks>
        /// Lists chunks in a document.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corpus"></param>
        /// <param name="document"></param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListChunks200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListChunks200Response>> ListChunksWithHttpInfoAsync(string corpus, string document, int? pageSize = default, string? pageToken = default, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// List Corpora
        /// </summary>
        /// <remarks>
        /// Lists corpora for semantic retrieval.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListCorpora200Response</returns>
        System.Threading.Tasks.Task<ListCorpora200Response> ListCorporaAsync(int? pageSize = default, string? pageToken = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List Corpora
        /// </summary>
        /// <remarks>
        /// Lists corpora for semantic retrieval.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListCorpora200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListCorpora200Response>> ListCorporaWithHttpInfoAsync(int? pageSize = default, string? pageToken = default, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// List Documents
        /// </summary>
        /// <remarks>
        /// Lists documents in a corpus.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corpus"></param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListDocuments200Response</returns>
        System.Threading.Tasks.Task<ListDocuments200Response> ListDocumentsAsync(string corpus, int? pageSize = default, string? pageToken = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List Documents
        /// </summary>
        /// <remarks>
        /// Lists documents in a corpus.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corpus"></param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListDocuments200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListDocuments200Response>> ListDocumentsWithHttpInfoAsync(string corpus, int? pageSize = default, string? pageToken = default, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// List Files
        /// </summary>
        /// <remarks>
        /// Lists uploaded files.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListFiles200Response</returns>
        System.Threading.Tasks.Task<ListFiles200Response> ListFilesAsync(int? pageSize = default, string? pageToken = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List Files
        /// </summary>
        /// <remarks>
        /// Lists uploaded files.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListFiles200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListFiles200Response>> ListFilesWithHttpInfoAsync(int? pageSize = default, string? pageToken = default, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// List Models
        /// </summary>
        /// <remarks>
        /// Lists all available Gemini models including base models and tuned models.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">Maximum number of models to return (optional)</param>
        /// <param name="pageToken">Token for pagination (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListModels200Response</returns>
        System.Threading.Tasks.Task<ListModels200Response> ListModelsAsync(int? pageSize = default, string? pageToken = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List Models
        /// </summary>
        /// <remarks>
        /// Lists all available Gemini models including base models and tuned models.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">Maximum number of models to return (optional)</param>
        /// <param name="pageToken">Token for pagination (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListModels200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListModels200Response>> ListModelsWithHttpInfoAsync(int? pageSize = default, string? pageToken = default, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// List Operations
        /// </summary>
        /// <remarks>
        /// Lists operations that match the specified filter.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the operation&#39;s parent resource (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListOperations200Response</returns>
        System.Threading.Tasks.Task<ListOperations200Response> ListOperationsAsync(string? name = default, string? filter = default, int? pageSize = default, string? pageToken = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List Operations
        /// </summary>
        /// <remarks>
        /// Lists operations that match the specified filter.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the operation&#39;s parent resource (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListOperations200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListOperations200Response>> ListOperationsWithHttpInfoAsync(string? name = default, string? filter = default, int? pageSize = default, string? pageToken = default, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// List Tuned Models
        /// </summary>
        /// <remarks>
        /// Lists tuned models owned by the user.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="filter">Filter expression to list tuned models (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListTunedModels200Response</returns>
        System.Threading.Tasks.Task<ListTunedModels200Response> ListTunedModelsAsync(int? pageSize = default, string? pageToken = default, string? filter = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List Tuned Models
        /// </summary>
        /// <remarks>
        /// Lists tuned models owned by the user.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="filter">Filter expression to list tuned models (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListTunedModels200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListTunedModels200Response>> ListTunedModelsWithHttpInfoAsync(int? pageSize = default, string? pageToken = default, string? filter = default, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Query Corpus
        /// </summary>
        /// <remarks>
        /// Performs a semantic search query against a corpus.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corpus"></param>
        /// <param name="queryCorpusRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of QueryCorpusResponse</returns>
        System.Threading.Tasks.Task<QueryCorpusResponse> QueryCorpusAsync(string corpus, QueryCorpusRequest queryCorpusRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Query Corpus
        /// </summary>
        /// <remarks>
        /// Performs a semantic search query against a corpus.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corpus"></param>
        /// <param name="queryCorpusRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (QueryCorpusResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<QueryCorpusResponse>> QueryCorpusWithHttpInfoAsync(string corpus, QueryCorpusRequest queryCorpusRequest, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Stream Generate Content
        /// </summary>
        /// <remarks>
        /// Generates streaming content from the model.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <param name="generateContentRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> StreamGenerateContentAsync(string model, GenerateContentRequest generateContentRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Stream Generate Content
        /// </summary>
        /// <remarks>
        /// Generates streaming content from the model.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <param name="generateContentRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> StreamGenerateContentWithHttpInfoAsync(string model, GenerateContentRequest generateContentRequest, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Update Cached Content
        /// </summary>
        /// <remarks>
        /// Updates a cached content.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="cachedContent"></param>
        /// <param name="updateMask"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CachedContent</returns>
        System.Threading.Tasks.Task<CachedContent> UpdateCachedContentAsync(string name, CachedContent cachedContent, string? updateMask = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update Cached Content
        /// </summary>
        /// <remarks>
        /// Updates a cached content.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="cachedContent"></param>
        /// <param name="updateMask"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CachedContent)</returns>
        System.Threading.Tasks.Task<ApiResponse<CachedContent>> UpdateCachedContentWithHttpInfoAsync(string name, CachedContent cachedContent, string? updateMask = default, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Update Chunk
        /// </summary>
        /// <remarks>
        /// Updates a chunk in a document.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corpus"></param>
        /// <param name="document"></param>
        /// <param name="chunk"></param>
        /// <param name="chunk2"></param>
        /// <param name="updateMask"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Chunk</returns>
        System.Threading.Tasks.Task<Chunk> UpdateChunkAsync(string corpus, string document, string chunk, Chunk chunk2, string? updateMask = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update Chunk
        /// </summary>
        /// <remarks>
        /// Updates a chunk in a document.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corpus"></param>
        /// <param name="document"></param>
        /// <param name="chunk"></param>
        /// <param name="chunk2"></param>
        /// <param name="updateMask"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Chunk)</returns>
        System.Threading.Tasks.Task<ApiResponse<Chunk>> UpdateChunkWithHttpInfoAsync(string corpus, string document, string chunk, Chunk chunk2, string? updateMask = default, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Update Corpus
        /// </summary>
        /// <remarks>
        /// Updates a corpus.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="corpus"></param>
        /// <param name="updateMask"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Corpus</returns>
        System.Threading.Tasks.Task<Corpus> UpdateCorpusAsync(string name, Corpus corpus, string? updateMask = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update Corpus
        /// </summary>
        /// <remarks>
        /// Updates a corpus.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="corpus"></param>
        /// <param name="updateMask"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Corpus)</returns>
        System.Threading.Tasks.Task<ApiResponse<Corpus>> UpdateCorpusWithHttpInfoAsync(string name, Corpus corpus, string? updateMask = default, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Update Document
        /// </summary>
        /// <remarks>
        /// Updates a document in a corpus.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corpus"></param>
        /// <param name="document"></param>
        /// <param name="document2"></param>
        /// <param name="updateMask"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Document</returns>
        System.Threading.Tasks.Task<Document> UpdateDocumentAsync(string corpus, string document, Document document2, string? updateMask = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update Document
        /// </summary>
        /// <remarks>
        /// Updates a document in a corpus.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corpus"></param>
        /// <param name="document"></param>
        /// <param name="document2"></param>
        /// <param name="updateMask"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Document)</returns>
        System.Threading.Tasks.Task<ApiResponse<Document>> UpdateDocumentWithHttpInfoAsync(string corpus, string document, Document document2, string? updateMask = default, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Update Tuned Model
        /// </summary>
        /// <remarks>
        /// Updates a tuned model.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="tunedModel"></param>
        /// <param name="updateMask">Field mask to specify which fields to update (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TunedModel</returns>
        System.Threading.Tasks.Task<TunedModel> UpdateTunedModelAsync(string name, TunedModel tunedModel, string? updateMask = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update Tuned Model
        /// </summary>
        /// <remarks>
        /// Updates a tuned model.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="tunedModel"></param>
        /// <param name="updateMask">Field mask to specify which fields to update (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TunedModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<TunedModel>> UpdateTunedModelWithHttpInfoAsync(string name, TunedModel tunedModel, string? updateMask = default, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Upload File
        /// </summary>
        /// <remarks>
        /// Creates a File by uploading to the API.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"> (optional)</param>
        /// <param name="metadata"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of File</returns>
        System.Threading.Tasks.Task<File> UploadFileAsync(FileParameter? file = default, UploadFileRequestMetadata? metadata = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Upload File
        /// </summary>
        /// <remarks>
        /// Creates a File by uploading to the API.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"> (optional)</param>
        /// <param name="metadata"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (File)</returns>
        System.Threading.Tasks.Task<ApiResponse<File>> UploadFileWithHttpInfoAsync(FileParameter? file = default, UploadFileRequestMetadata? metadata = default, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Upload Media
        /// </summary>
        /// <remarks>
        /// Uploads media files for processing with Gemini models.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of File</returns>
        System.Threading.Tasks.Task<File> UploadMediaAsync(FileParameter? file = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Upload Media
        /// </summary>
        /// <remarks>
        /// Uploads media files for processing with Gemini models.
        /// </remarks>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (File)</returns>
        System.Threading.Tasks.Task<ApiResponse<File>> UploadMediaWithHttpInfoAsync(FileParameter? file = default, System.Threading.CancellationToken cancellationToken = default);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGeminiApi : IGeminiApiSync, IGeminiApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class GeminiApi : IDisposable, IGeminiApi
    {
        private GeminiSharp.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="GeminiApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public GeminiApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GeminiApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public GeminiApi(string basePath)
        {
            this.Configuration = GeminiSharp.Client.Configuration.MergeConfigurations(
                GeminiSharp.Client.GlobalConfiguration.Instance,
                new GeminiSharp.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new GeminiSharp.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = GeminiSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GeminiApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public GeminiApi(GeminiSharp.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = GeminiSharp.Client.Configuration.MergeConfigurations(
                GeminiSharp.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new GeminiSharp.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = GeminiSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GeminiApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public GeminiApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GeminiApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public GeminiApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = GeminiSharp.Client.Configuration.MergeConfigurations(
                GeminiSharp.Client.GlobalConfiguration.Instance,
                new GeminiSharp.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new GeminiSharp.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = GeminiSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GeminiApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public GeminiApi(HttpClient client, GeminiSharp.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = GeminiSharp.Client.Configuration.MergeConfigurations(
                GeminiSharp.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new GeminiSharp.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = GeminiSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GeminiApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public GeminiApi(GeminiSharp.Client.ISynchronousClient client, GeminiSharp.Client.IAsynchronousClient asyncClient, GeminiSharp.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = GeminiSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public GeminiSharp.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public GeminiSharp.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public GeminiSharp.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public GeminiSharp.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public GeminiSharp.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Batch Embed Contents Generates embeddings for multiple pieces of content in a single request.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <param name="batchEmbedContentsRequest"></param>
        /// <returns>BatchEmbedContents200Response</returns>
        public BatchEmbedContents200Response BatchEmbedContents(string model, BatchEmbedContentsRequest batchEmbedContentsRequest)
        {
            GeminiSharp.Client.ApiResponse<BatchEmbedContents200Response> localVarResponse = BatchEmbedContentsWithHttpInfo(model, batchEmbedContentsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Batch Embed Contents Generates embeddings for multiple pieces of content in a single request.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <param name="batchEmbedContentsRequest"></param>
        /// <returns>ApiResponse of BatchEmbedContents200Response</returns>
        public GeminiSharp.Client.ApiResponse<BatchEmbedContents200Response> BatchEmbedContentsWithHttpInfo(string model, BatchEmbedContentsRequest batchEmbedContentsRequest)
        {
            // verify the required parameter 'model' is set
            if (model == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'model' when calling GeminiApi->BatchEmbedContents");

            // verify the required parameter 'batchEmbedContentsRequest' is set
            if (batchEmbedContentsRequest == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'batchEmbedContentsRequest' when calling GeminiApi->BatchEmbedContents");

            GeminiSharp.Client.RequestOptions localVarRequestOptions = new GeminiSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GeminiSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeminiSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("model", GeminiSharp.Client.ClientUtils.ParameterToString(model)); // path parameter
            localVarRequestOptions.Data = batchEmbedContentsRequest;

            // authentication (ApiKeyHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-goog-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-goog-api-key", this.Configuration.GetApiKeyWithPrefix("x-goog-api-key"));
            }
            // authentication (ApiKeyQuery) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<BatchEmbedContents200Response>("/v1/models/{model}:batchEmbedContents", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BatchEmbedContents", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Batch Embed Contents Generates embeddings for multiple pieces of content in a single request.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <param name="batchEmbedContentsRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchEmbedContents200Response</returns>
        public async System.Threading.Tasks.Task<BatchEmbedContents200Response> BatchEmbedContentsAsync(string model, BatchEmbedContentsRequest batchEmbedContentsRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            GeminiSharp.Client.ApiResponse<BatchEmbedContents200Response> localVarResponse = await BatchEmbedContentsWithHttpInfoAsync(model, batchEmbedContentsRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Batch Embed Contents Generates embeddings for multiple pieces of content in a single request.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <param name="batchEmbedContentsRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchEmbedContents200Response)</returns>
        public async System.Threading.Tasks.Task<GeminiSharp.Client.ApiResponse<BatchEmbedContents200Response>> BatchEmbedContentsWithHttpInfoAsync(string model, BatchEmbedContentsRequest batchEmbedContentsRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'model' is set
            if (model == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'model' when calling GeminiApi->BatchEmbedContents");

            // verify the required parameter 'batchEmbedContentsRequest' is set
            if (batchEmbedContentsRequest == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'batchEmbedContentsRequest' when calling GeminiApi->BatchEmbedContents");


            GeminiSharp.Client.RequestOptions localVarRequestOptions = new GeminiSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = GeminiSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeminiSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("model", GeminiSharp.Client.ClientUtils.ParameterToString(model)); // path parameter
            localVarRequestOptions.Data = batchEmbedContentsRequest;

            // authentication (ApiKeyHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-goog-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-goog-api-key", this.Configuration.GetApiKeyWithPrefix("x-goog-api-key"));
            }
            // authentication (ApiKeyQuery) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<BatchEmbedContents200Response>("/v1/models/{model}:batchEmbedContents", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BatchEmbedContents", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel Operation Cancels a long-running operation.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns></returns>
        public void CancelOperation(string name)
        {
            CancelOperationWithHttpInfo(name);
        }

        /// <summary>
        /// Cancel Operation Cancels a long-running operation.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public GeminiSharp.Client.ApiResponse<Object> CancelOperationWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'name' when calling GeminiApi->CancelOperation");

            GeminiSharp.Client.RequestOptions localVarRequestOptions = new GeminiSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = GeminiSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeminiSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", GeminiSharp.Client.ClientUtils.ParameterToString(name)); // path parameter

            // authentication (ApiKeyHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-goog-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-goog-api-key", this.Configuration.GetApiKeyWithPrefix("x-goog-api-key"));
            }
            // authentication (ApiKeyQuery) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/operations/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelOperation", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel Operation Cancels a long-running operation.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CancelOperationAsync(string name, System.Threading.CancellationToken cancellationToken = default)
        {
            await CancelOperationWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Cancel Operation Cancels a long-running operation.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<GeminiSharp.Client.ApiResponse<Object>> CancelOperationWithHttpInfoAsync(string name, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'name' when calling GeminiApi->CancelOperation");


            GeminiSharp.Client.RequestOptions localVarRequestOptions = new GeminiSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = GeminiSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeminiSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", GeminiSharp.Client.ClientUtils.ParameterToString(name)); // path parameter

            // authentication (ApiKeyHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-goog-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-goog-api-key", this.Configuration.GetApiKeyWithPrefix("x-goog-api-key"));
            }
            // authentication (ApiKeyQuery) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v1/operations/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelOperation", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Count Tokens Counts the number of tokens in the given prompt.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <param name="generateContentRequest"></param>
        /// <returns>CountTokens200Response</returns>
        public CountTokens200Response CountTokens(string model, GenerateContentRequest generateContentRequest)
        {
            GeminiSharp.Client.ApiResponse<CountTokens200Response> localVarResponse = CountTokensWithHttpInfo(model, generateContentRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Count Tokens Counts the number of tokens in the given prompt.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <param name="generateContentRequest"></param>
        /// <returns>ApiResponse of CountTokens200Response</returns>
        public GeminiSharp.Client.ApiResponse<CountTokens200Response> CountTokensWithHttpInfo(string model, GenerateContentRequest generateContentRequest)
        {
            // verify the required parameter 'model' is set
            if (model == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'model' when calling GeminiApi->CountTokens");

            // verify the required parameter 'generateContentRequest' is set
            if (generateContentRequest == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'generateContentRequest' when calling GeminiApi->CountTokens");

            GeminiSharp.Client.RequestOptions localVarRequestOptions = new GeminiSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GeminiSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeminiSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("model", GeminiSharp.Client.ClientUtils.ParameterToString(model)); // path parameter
            localVarRequestOptions.Data = generateContentRequest;

            // authentication (ApiKeyHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-goog-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-goog-api-key", this.Configuration.GetApiKeyWithPrefix("x-goog-api-key"));
            }
            // authentication (ApiKeyQuery) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CountTokens200Response>("/v1/models/{model}:countTokens", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CountTokens", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Count Tokens Counts the number of tokens in the given prompt.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <param name="generateContentRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CountTokens200Response</returns>
        public async System.Threading.Tasks.Task<CountTokens200Response> CountTokensAsync(string model, GenerateContentRequest generateContentRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            GeminiSharp.Client.ApiResponse<CountTokens200Response> localVarResponse = await CountTokensWithHttpInfoAsync(model, generateContentRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Count Tokens Counts the number of tokens in the given prompt.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <param name="generateContentRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CountTokens200Response)</returns>
        public async System.Threading.Tasks.Task<GeminiSharp.Client.ApiResponse<CountTokens200Response>> CountTokensWithHttpInfoAsync(string model, GenerateContentRequest generateContentRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'model' is set
            if (model == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'model' when calling GeminiApi->CountTokens");

            // verify the required parameter 'generateContentRequest' is set
            if (generateContentRequest == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'generateContentRequest' when calling GeminiApi->CountTokens");


            GeminiSharp.Client.RequestOptions localVarRequestOptions = new GeminiSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = GeminiSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeminiSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("model", GeminiSharp.Client.ClientUtils.ParameterToString(model)); // path parameter
            localVarRequestOptions.Data = generateContentRequest;

            // authentication (ApiKeyHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-goog-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-goog-api-key", this.Configuration.GetApiKeyWithPrefix("x-goog-api-key"));
            }
            // authentication (ApiKeyQuery) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CountTokens200Response>("/v1/models/{model}:countTokens", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CountTokens", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Cached Content Creates cached content for efficient context reuse in subsequent requests.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cachedContent"></param>
        /// <returns>CachedContent</returns>
        public CachedContent CreateCachedContent(CachedContent cachedContent)
        {
            GeminiSharp.Client.ApiResponse<CachedContent> localVarResponse = CreateCachedContentWithHttpInfo(cachedContent);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Cached Content Creates cached content for efficient context reuse in subsequent requests.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cachedContent"></param>
        /// <returns>ApiResponse of CachedContent</returns>
        public GeminiSharp.Client.ApiResponse<CachedContent> CreateCachedContentWithHttpInfo(CachedContent cachedContent)
        {
            // verify the required parameter 'cachedContent' is set
            if (cachedContent == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'cachedContent' when calling GeminiApi->CreateCachedContent");

            GeminiSharp.Client.RequestOptions localVarRequestOptions = new GeminiSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GeminiSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeminiSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = cachedContent;

            // authentication (ApiKeyHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-goog-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-goog-api-key", this.Configuration.GetApiKeyWithPrefix("x-goog-api-key"));
            }
            // authentication (ApiKeyQuery) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CachedContent>("/v1/cachedContents", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCachedContent", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Cached Content Creates cached content for efficient context reuse in subsequent requests.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cachedContent"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CachedContent</returns>
        public async System.Threading.Tasks.Task<CachedContent> CreateCachedContentAsync(CachedContent cachedContent, System.Threading.CancellationToken cancellationToken = default)
        {
            GeminiSharp.Client.ApiResponse<CachedContent> localVarResponse = await CreateCachedContentWithHttpInfoAsync(cachedContent, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Cached Content Creates cached content for efficient context reuse in subsequent requests.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cachedContent"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CachedContent)</returns>
        public async System.Threading.Tasks.Task<GeminiSharp.Client.ApiResponse<CachedContent>> CreateCachedContentWithHttpInfoAsync(CachedContent cachedContent, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'cachedContent' is set
            if (cachedContent == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'cachedContent' when calling GeminiApi->CreateCachedContent");


            GeminiSharp.Client.RequestOptions localVarRequestOptions = new GeminiSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = GeminiSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeminiSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = cachedContent;

            // authentication (ApiKeyHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-goog-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-goog-api-key", this.Configuration.GetApiKeyWithPrefix("x-goog-api-key"));
            }
            // authentication (ApiKeyQuery) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CachedContent>("/v1/cachedContents", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCachedContent", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Chunk Creates a chunk in a document.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corpus"></param>
        /// <param name="document"></param>
        /// <param name="chunk"></param>
        /// <returns>Chunk</returns>
        public Chunk CreateChunk(string corpus, string document, Chunk chunk)
        {
            GeminiSharp.Client.ApiResponse<Chunk> localVarResponse = CreateChunkWithHttpInfo(corpus, document, chunk);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Chunk Creates a chunk in a document.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corpus"></param>
        /// <param name="document"></param>
        /// <param name="chunk"></param>
        /// <returns>ApiResponse of Chunk</returns>
        public GeminiSharp.Client.ApiResponse<Chunk> CreateChunkWithHttpInfo(string corpus, string document, Chunk chunk)
        {
            // verify the required parameter 'corpus' is set
            if (corpus == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'corpus' when calling GeminiApi->CreateChunk");

            // verify the required parameter 'document' is set
            if (document == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'document' when calling GeminiApi->CreateChunk");

            // verify the required parameter 'chunk' is set
            if (chunk == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'chunk' when calling GeminiApi->CreateChunk");

            GeminiSharp.Client.RequestOptions localVarRequestOptions = new GeminiSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GeminiSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeminiSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("corpus", GeminiSharp.Client.ClientUtils.ParameterToString(corpus)); // path parameter
            localVarRequestOptions.PathParameters.Add("document", GeminiSharp.Client.ClientUtils.ParameterToString(document)); // path parameter
            localVarRequestOptions.Data = chunk;

            // authentication (ApiKeyHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-goog-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-goog-api-key", this.Configuration.GetApiKeyWithPrefix("x-goog-api-key"));
            }
            // authentication (ApiKeyQuery) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Chunk>("/v1/corpora/{corpus}/documents/{document}/chunks", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateChunk", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Chunk Creates a chunk in a document.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corpus"></param>
        /// <param name="document"></param>
        /// <param name="chunk"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Chunk</returns>
        public async System.Threading.Tasks.Task<Chunk> CreateChunkAsync(string corpus, string document, Chunk chunk, System.Threading.CancellationToken cancellationToken = default)
        {
            GeminiSharp.Client.ApiResponse<Chunk> localVarResponse = await CreateChunkWithHttpInfoAsync(corpus, document, chunk, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Chunk Creates a chunk in a document.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corpus"></param>
        /// <param name="document"></param>
        /// <param name="chunk"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Chunk)</returns>
        public async System.Threading.Tasks.Task<GeminiSharp.Client.ApiResponse<Chunk>> CreateChunkWithHttpInfoAsync(string corpus, string document, Chunk chunk, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'corpus' is set
            if (corpus == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'corpus' when calling GeminiApi->CreateChunk");

            // verify the required parameter 'document' is set
            if (document == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'document' when calling GeminiApi->CreateChunk");

            // verify the required parameter 'chunk' is set
            if (chunk == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'chunk' when calling GeminiApi->CreateChunk");


            GeminiSharp.Client.RequestOptions localVarRequestOptions = new GeminiSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = GeminiSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeminiSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("corpus", GeminiSharp.Client.ClientUtils.ParameterToString(corpus)); // path parameter
            localVarRequestOptions.PathParameters.Add("document", GeminiSharp.Client.ClientUtils.ParameterToString(document)); // path parameter
            localVarRequestOptions.Data = chunk;

            // authentication (ApiKeyHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-goog-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-goog-api-key", this.Configuration.GetApiKeyWithPrefix("x-goog-api-key"));
            }
            // authentication (ApiKeyQuery) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Chunk>("/v1/corpora/{corpus}/documents/{document}/chunks", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateChunk", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Corpus Creates a corpus for semantic retrieval.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corpus"></param>
        /// <returns>Corpus</returns>
        public Corpus CreateCorpus(Corpus corpus)
        {
            GeminiSharp.Client.ApiResponse<Corpus> localVarResponse = CreateCorpusWithHttpInfo(corpus);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Corpus Creates a corpus for semantic retrieval.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corpus"></param>
        /// <returns>ApiResponse of Corpus</returns>
        public GeminiSharp.Client.ApiResponse<Corpus> CreateCorpusWithHttpInfo(Corpus corpus)
        {
            // verify the required parameter 'corpus' is set
            if (corpus == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'corpus' when calling GeminiApi->CreateCorpus");

            GeminiSharp.Client.RequestOptions localVarRequestOptions = new GeminiSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GeminiSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeminiSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = corpus;

            // authentication (ApiKeyHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-goog-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-goog-api-key", this.Configuration.GetApiKeyWithPrefix("x-goog-api-key"));
            }
            // authentication (ApiKeyQuery) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Corpus>("/v1/corpora", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCorpus", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Corpus Creates a corpus for semantic retrieval.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corpus"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Corpus</returns>
        public async System.Threading.Tasks.Task<Corpus> CreateCorpusAsync(Corpus corpus, System.Threading.CancellationToken cancellationToken = default)
        {
            GeminiSharp.Client.ApiResponse<Corpus> localVarResponse = await CreateCorpusWithHttpInfoAsync(corpus, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Corpus Creates a corpus for semantic retrieval.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corpus"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Corpus)</returns>
        public async System.Threading.Tasks.Task<GeminiSharp.Client.ApiResponse<Corpus>> CreateCorpusWithHttpInfoAsync(Corpus corpus, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'corpus' is set
            if (corpus == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'corpus' when calling GeminiApi->CreateCorpus");


            GeminiSharp.Client.RequestOptions localVarRequestOptions = new GeminiSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = GeminiSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeminiSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = corpus;

            // authentication (ApiKeyHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-goog-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-goog-api-key", this.Configuration.GetApiKeyWithPrefix("x-goog-api-key"));
            }
            // authentication (ApiKeyQuery) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Corpus>("/v1/corpora", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCorpus", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Document Creates a document in a corpus.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corpus"></param>
        /// <param name="document"></param>
        /// <returns>Document</returns>
        public Document CreateDocument(string corpus, Document document)
        {
            GeminiSharp.Client.ApiResponse<Document> localVarResponse = CreateDocumentWithHttpInfo(corpus, document);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Document Creates a document in a corpus.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corpus"></param>
        /// <param name="document"></param>
        /// <returns>ApiResponse of Document</returns>
        public GeminiSharp.Client.ApiResponse<Document> CreateDocumentWithHttpInfo(string corpus, Document document)
        {
            // verify the required parameter 'corpus' is set
            if (corpus == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'corpus' when calling GeminiApi->CreateDocument");

            // verify the required parameter 'document' is set
            if (document == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'document' when calling GeminiApi->CreateDocument");

            GeminiSharp.Client.RequestOptions localVarRequestOptions = new GeminiSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GeminiSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeminiSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("corpus", GeminiSharp.Client.ClientUtils.ParameterToString(corpus)); // path parameter
            localVarRequestOptions.Data = document;

            // authentication (ApiKeyHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-goog-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-goog-api-key", this.Configuration.GetApiKeyWithPrefix("x-goog-api-key"));
            }
            // authentication (ApiKeyQuery) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Document>("/v1/corpora/{corpus}/documents", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateDocument", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Document Creates a document in a corpus.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corpus"></param>
        /// <param name="document"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Document</returns>
        public async System.Threading.Tasks.Task<Document> CreateDocumentAsync(string corpus, Document document, System.Threading.CancellationToken cancellationToken = default)
        {
            GeminiSharp.Client.ApiResponse<Document> localVarResponse = await CreateDocumentWithHttpInfoAsync(corpus, document, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Document Creates a document in a corpus.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corpus"></param>
        /// <param name="document"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Document)</returns>
        public async System.Threading.Tasks.Task<GeminiSharp.Client.ApiResponse<Document>> CreateDocumentWithHttpInfoAsync(string corpus, Document document, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'corpus' is set
            if (corpus == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'corpus' when calling GeminiApi->CreateDocument");

            // verify the required parameter 'document' is set
            if (document == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'document' when calling GeminiApi->CreateDocument");


            GeminiSharp.Client.RequestOptions localVarRequestOptions = new GeminiSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = GeminiSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeminiSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("corpus", GeminiSharp.Client.ClientUtils.ParameterToString(corpus)); // path parameter
            localVarRequestOptions.Data = document;

            // authentication (ApiKeyHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-goog-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-goog-api-key", this.Configuration.GetApiKeyWithPrefix("x-goog-api-key"));
            }
            // authentication (ApiKeyQuery) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Document>("/v1/corpora/{corpus}/documents", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateDocument", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Tuned Model Creates a tuned model.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTunedModelRequest"></param>
        /// <returns>Operation</returns>
        public Operation CreateTunedModel(CreateTunedModelRequest createTunedModelRequest)
        {
            GeminiSharp.Client.ApiResponse<Operation> localVarResponse = CreateTunedModelWithHttpInfo(createTunedModelRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Tuned Model Creates a tuned model.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTunedModelRequest"></param>
        /// <returns>ApiResponse of Operation</returns>
        public GeminiSharp.Client.ApiResponse<Operation> CreateTunedModelWithHttpInfo(CreateTunedModelRequest createTunedModelRequest)
        {
            // verify the required parameter 'createTunedModelRequest' is set
            if (createTunedModelRequest == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'createTunedModelRequest' when calling GeminiApi->CreateTunedModel");

            GeminiSharp.Client.RequestOptions localVarRequestOptions = new GeminiSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GeminiSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeminiSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = createTunedModelRequest;

            // authentication (ApiKeyHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-goog-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-goog-api-key", this.Configuration.GetApiKeyWithPrefix("x-goog-api-key"));
            }
            // authentication (ApiKeyQuery) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Operation>("/v1/tunedModels", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTunedModel", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Tuned Model Creates a tuned model.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTunedModelRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Operation</returns>
        public async System.Threading.Tasks.Task<Operation> CreateTunedModelAsync(CreateTunedModelRequest createTunedModelRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            GeminiSharp.Client.ApiResponse<Operation> localVarResponse = await CreateTunedModelWithHttpInfoAsync(createTunedModelRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Tuned Model Creates a tuned model.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTunedModelRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Operation)</returns>
        public async System.Threading.Tasks.Task<GeminiSharp.Client.ApiResponse<Operation>> CreateTunedModelWithHttpInfoAsync(CreateTunedModelRequest createTunedModelRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'createTunedModelRequest' is set
            if (createTunedModelRequest == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'createTunedModelRequest' when calling GeminiApi->CreateTunedModel");


            GeminiSharp.Client.RequestOptions localVarRequestOptions = new GeminiSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = GeminiSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeminiSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = createTunedModelRequest;

            // authentication (ApiKeyHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-goog-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-goog-api-key", this.Configuration.GetApiKeyWithPrefix("x-goog-api-key"));
            }
            // authentication (ApiKeyQuery) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Operation>("/v1/tunedModels", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTunedModel", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Cached Content Deletes cached content.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns></returns>
        public void DeleteCachedContent(string name)
        {
            DeleteCachedContentWithHttpInfo(name);
        }

        /// <summary>
        /// Delete Cached Content Deletes cached content.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public GeminiSharp.Client.ApiResponse<Object> DeleteCachedContentWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'name' when calling GeminiApi->DeleteCachedContent");

            GeminiSharp.Client.RequestOptions localVarRequestOptions = new GeminiSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = GeminiSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeminiSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", GeminiSharp.Client.ClientUtils.ParameterToString(name)); // path parameter

            // authentication (ApiKeyHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-goog-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-goog-api-key", this.Configuration.GetApiKeyWithPrefix("x-goog-api-key"));
            }
            // authentication (ApiKeyQuery) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/cachedContents/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCachedContent", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Cached Content Deletes cached content.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCachedContentAsync(string name, System.Threading.CancellationToken cancellationToken = default)
        {
            await DeleteCachedContentWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Cached Content Deletes cached content.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<GeminiSharp.Client.ApiResponse<Object>> DeleteCachedContentWithHttpInfoAsync(string name, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'name' when calling GeminiApi->DeleteCachedContent");


            GeminiSharp.Client.RequestOptions localVarRequestOptions = new GeminiSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = GeminiSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeminiSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", GeminiSharp.Client.ClientUtils.ParameterToString(name)); // path parameter

            // authentication (ApiKeyHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-goog-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-goog-api-key", this.Configuration.GetApiKeyWithPrefix("x-goog-api-key"));
            }
            // authentication (ApiKeyQuery) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v1/cachedContents/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCachedContent", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Chunk Deletes a chunk from a document.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corpus"></param>
        /// <param name="document"></param>
        /// <param name="chunk"></param>
        /// <returns></returns>
        public void DeleteChunk(string corpus, string document, string chunk)
        {
            DeleteChunkWithHttpInfo(corpus, document, chunk);
        }

        /// <summary>
        /// Delete Chunk Deletes a chunk from a document.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corpus"></param>
        /// <param name="document"></param>
        /// <param name="chunk"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public GeminiSharp.Client.ApiResponse<Object> DeleteChunkWithHttpInfo(string corpus, string document, string chunk)
        {
            // verify the required parameter 'corpus' is set
            if (corpus == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'corpus' when calling GeminiApi->DeleteChunk");

            // verify the required parameter 'document' is set
            if (document == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'document' when calling GeminiApi->DeleteChunk");

            // verify the required parameter 'chunk' is set
            if (chunk == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'chunk' when calling GeminiApi->DeleteChunk");

            GeminiSharp.Client.RequestOptions localVarRequestOptions = new GeminiSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = GeminiSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeminiSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("corpus", GeminiSharp.Client.ClientUtils.ParameterToString(corpus)); // path parameter
            localVarRequestOptions.PathParameters.Add("document", GeminiSharp.Client.ClientUtils.ParameterToString(document)); // path parameter
            localVarRequestOptions.PathParameters.Add("chunk", GeminiSharp.Client.ClientUtils.ParameterToString(chunk)); // path parameter

            // authentication (ApiKeyHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-goog-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-goog-api-key", this.Configuration.GetApiKeyWithPrefix("x-goog-api-key"));
            }
            // authentication (ApiKeyQuery) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/corpora/{corpus}/documents/{document}/chunks/{chunk}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteChunk", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Chunk Deletes a chunk from a document.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corpus"></param>
        /// <param name="document"></param>
        /// <param name="chunk"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteChunkAsync(string corpus, string document, string chunk, System.Threading.CancellationToken cancellationToken = default)
        {
            await DeleteChunkWithHttpInfoAsync(corpus, document, chunk, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Chunk Deletes a chunk from a document.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corpus"></param>
        /// <param name="document"></param>
        /// <param name="chunk"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<GeminiSharp.Client.ApiResponse<Object>> DeleteChunkWithHttpInfoAsync(string corpus, string document, string chunk, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'corpus' is set
            if (corpus == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'corpus' when calling GeminiApi->DeleteChunk");

            // verify the required parameter 'document' is set
            if (document == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'document' when calling GeminiApi->DeleteChunk");

            // verify the required parameter 'chunk' is set
            if (chunk == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'chunk' when calling GeminiApi->DeleteChunk");


            GeminiSharp.Client.RequestOptions localVarRequestOptions = new GeminiSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = GeminiSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeminiSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("corpus", GeminiSharp.Client.ClientUtils.ParameterToString(corpus)); // path parameter
            localVarRequestOptions.PathParameters.Add("document", GeminiSharp.Client.ClientUtils.ParameterToString(document)); // path parameter
            localVarRequestOptions.PathParameters.Add("chunk", GeminiSharp.Client.ClientUtils.ParameterToString(chunk)); // path parameter

            // authentication (ApiKeyHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-goog-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-goog-api-key", this.Configuration.GetApiKeyWithPrefix("x-goog-api-key"));
            }
            // authentication (ApiKeyQuery) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v1/corpora/{corpus}/documents/{document}/chunks/{chunk}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteChunk", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Corpus Deletes a corpus.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns></returns>
        public void DeleteCorpus(string name)
        {
            DeleteCorpusWithHttpInfo(name);
        }

        /// <summary>
        /// Delete Corpus Deletes a corpus.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public GeminiSharp.Client.ApiResponse<Object> DeleteCorpusWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'name' when calling GeminiApi->DeleteCorpus");

            GeminiSharp.Client.RequestOptions localVarRequestOptions = new GeminiSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = GeminiSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeminiSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", GeminiSharp.Client.ClientUtils.ParameterToString(name)); // path parameter

            // authentication (ApiKeyHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-goog-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-goog-api-key", this.Configuration.GetApiKeyWithPrefix("x-goog-api-key"));
            }
            // authentication (ApiKeyQuery) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/corpora/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCorpus", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Corpus Deletes a corpus.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCorpusAsync(string name, System.Threading.CancellationToken cancellationToken = default)
        {
            await DeleteCorpusWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Corpus Deletes a corpus.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<GeminiSharp.Client.ApiResponse<Object>> DeleteCorpusWithHttpInfoAsync(string name, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'name' when calling GeminiApi->DeleteCorpus");


            GeminiSharp.Client.RequestOptions localVarRequestOptions = new GeminiSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = GeminiSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeminiSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", GeminiSharp.Client.ClientUtils.ParameterToString(name)); // path parameter

            // authentication (ApiKeyHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-goog-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-goog-api-key", this.Configuration.GetApiKeyWithPrefix("x-goog-api-key"));
            }
            // authentication (ApiKeyQuery) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v1/corpora/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCorpus", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Document Deletes a document from a corpus.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corpus"></param>
        /// <param name="document"></param>
        /// <returns></returns>
        public void DeleteDocument(string corpus, string document)
        {
            DeleteDocumentWithHttpInfo(corpus, document);
        }

        /// <summary>
        /// Delete Document Deletes a document from a corpus.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corpus"></param>
        /// <param name="document"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public GeminiSharp.Client.ApiResponse<Object> DeleteDocumentWithHttpInfo(string corpus, string document)
        {
            // verify the required parameter 'corpus' is set
            if (corpus == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'corpus' when calling GeminiApi->DeleteDocument");

            // verify the required parameter 'document' is set
            if (document == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'document' when calling GeminiApi->DeleteDocument");

            GeminiSharp.Client.RequestOptions localVarRequestOptions = new GeminiSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = GeminiSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeminiSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("corpus", GeminiSharp.Client.ClientUtils.ParameterToString(corpus)); // path parameter
            localVarRequestOptions.PathParameters.Add("document", GeminiSharp.Client.ClientUtils.ParameterToString(document)); // path parameter

            // authentication (ApiKeyHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-goog-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-goog-api-key", this.Configuration.GetApiKeyWithPrefix("x-goog-api-key"));
            }
            // authentication (ApiKeyQuery) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/corpora/{corpus}/documents/{document}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteDocument", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Document Deletes a document from a corpus.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corpus"></param>
        /// <param name="document"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteDocumentAsync(string corpus, string document, System.Threading.CancellationToken cancellationToken = default)
        {
            await DeleteDocumentWithHttpInfoAsync(corpus, document, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Document Deletes a document from a corpus.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corpus"></param>
        /// <param name="document"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<GeminiSharp.Client.ApiResponse<Object>> DeleteDocumentWithHttpInfoAsync(string corpus, string document, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'corpus' is set
            if (corpus == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'corpus' when calling GeminiApi->DeleteDocument");

            // verify the required parameter 'document' is set
            if (document == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'document' when calling GeminiApi->DeleteDocument");


            GeminiSharp.Client.RequestOptions localVarRequestOptions = new GeminiSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = GeminiSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeminiSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("corpus", GeminiSharp.Client.ClientUtils.ParameterToString(corpus)); // path parameter
            localVarRequestOptions.PathParameters.Add("document", GeminiSharp.Client.ClientUtils.ParameterToString(document)); // path parameter

            // authentication (ApiKeyHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-goog-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-goog-api-key", this.Configuration.GetApiKeyWithPrefix("x-goog-api-key"));
            }
            // authentication (ApiKeyQuery) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v1/corpora/{corpus}/documents/{document}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteDocument", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete File Deletes an uploaded file.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns></returns>
        public void DeleteFile(string name)
        {
            DeleteFileWithHttpInfo(name);
        }

        /// <summary>
        /// Delete File Deletes an uploaded file.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public GeminiSharp.Client.ApiResponse<Object> DeleteFileWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'name' when calling GeminiApi->DeleteFile");

            GeminiSharp.Client.RequestOptions localVarRequestOptions = new GeminiSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = GeminiSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeminiSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", GeminiSharp.Client.ClientUtils.ParameterToString(name)); // path parameter

            // authentication (ApiKeyHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-goog-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-goog-api-key", this.Configuration.GetApiKeyWithPrefix("x-goog-api-key"));
            }
            // authentication (ApiKeyQuery) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/files/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteFile", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete File Deletes an uploaded file.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteFileAsync(string name, System.Threading.CancellationToken cancellationToken = default)
        {
            await DeleteFileWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete File Deletes an uploaded file.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<GeminiSharp.Client.ApiResponse<Object>> DeleteFileWithHttpInfoAsync(string name, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'name' when calling GeminiApi->DeleteFile");


            GeminiSharp.Client.RequestOptions localVarRequestOptions = new GeminiSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = GeminiSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeminiSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", GeminiSharp.Client.ClientUtils.ParameterToString(name)); // path parameter

            // authentication (ApiKeyHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-goog-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-goog-api-key", this.Configuration.GetApiKeyWithPrefix("x-goog-api-key"));
            }
            // authentication (ApiKeyQuery) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v1/files/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteFile", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Tuned Model Deletes a tuned model.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns></returns>
        public void DeleteTunedModel(string name)
        {
            DeleteTunedModelWithHttpInfo(name);
        }

        /// <summary>
        /// Delete Tuned Model Deletes a tuned model.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public GeminiSharp.Client.ApiResponse<Object> DeleteTunedModelWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'name' when calling GeminiApi->DeleteTunedModel");

            GeminiSharp.Client.RequestOptions localVarRequestOptions = new GeminiSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = GeminiSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeminiSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", GeminiSharp.Client.ClientUtils.ParameterToString(name)); // path parameter

            // authentication (ApiKeyHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-goog-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-goog-api-key", this.Configuration.GetApiKeyWithPrefix("x-goog-api-key"));
            }
            // authentication (ApiKeyQuery) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/tunedModels/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTunedModel", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Tuned Model Deletes a tuned model.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteTunedModelAsync(string name, System.Threading.CancellationToken cancellationToken = default)
        {
            await DeleteTunedModelWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Tuned Model Deletes a tuned model.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<GeminiSharp.Client.ApiResponse<Object>> DeleteTunedModelWithHttpInfoAsync(string name, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'name' when calling GeminiApi->DeleteTunedModel");


            GeminiSharp.Client.RequestOptions localVarRequestOptions = new GeminiSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = GeminiSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeminiSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", GeminiSharp.Client.ClientUtils.ParameterToString(name)); // path parameter

            // authentication (ApiKeyHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-goog-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-goog-api-key", this.Configuration.GetApiKeyWithPrefix("x-goog-api-key"));
            }
            // authentication (ApiKeyQuery) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v1/tunedModels/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTunedModel", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Embed Content Generates an embedding representation of the given content.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <param name="embedContentRequest"></param>
        /// <returns>ContentEmbedding</returns>
        public ContentEmbedding EmbedContent(string model, EmbedContentRequest embedContentRequest)
        {
            GeminiSharp.Client.ApiResponse<ContentEmbedding> localVarResponse = EmbedContentWithHttpInfo(model, embedContentRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Embed Content Generates an embedding representation of the given content.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <param name="embedContentRequest"></param>
        /// <returns>ApiResponse of ContentEmbedding</returns>
        public GeminiSharp.Client.ApiResponse<ContentEmbedding> EmbedContentWithHttpInfo(string model, EmbedContentRequest embedContentRequest)
        {
            // verify the required parameter 'model' is set
            if (model == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'model' when calling GeminiApi->EmbedContent");

            // verify the required parameter 'embedContentRequest' is set
            if (embedContentRequest == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'embedContentRequest' when calling GeminiApi->EmbedContent");

            GeminiSharp.Client.RequestOptions localVarRequestOptions = new GeminiSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GeminiSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeminiSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("model", GeminiSharp.Client.ClientUtils.ParameterToString(model)); // path parameter
            localVarRequestOptions.Data = embedContentRequest;

            // authentication (ApiKeyHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-goog-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-goog-api-key", this.Configuration.GetApiKeyWithPrefix("x-goog-api-key"));
            }
            // authentication (ApiKeyQuery) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ContentEmbedding>("/v1/models/{model}:embedContent", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EmbedContent", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Embed Content Generates an embedding representation of the given content.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <param name="embedContentRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ContentEmbedding</returns>
        public async System.Threading.Tasks.Task<ContentEmbedding> EmbedContentAsync(string model, EmbedContentRequest embedContentRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            GeminiSharp.Client.ApiResponse<ContentEmbedding> localVarResponse = await EmbedContentWithHttpInfoAsync(model, embedContentRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Embed Content Generates an embedding representation of the given content.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <param name="embedContentRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ContentEmbedding)</returns>
        public async System.Threading.Tasks.Task<GeminiSharp.Client.ApiResponse<ContentEmbedding>> EmbedContentWithHttpInfoAsync(string model, EmbedContentRequest embedContentRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'model' is set
            if (model == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'model' when calling GeminiApi->EmbedContent");

            // verify the required parameter 'embedContentRequest' is set
            if (embedContentRequest == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'embedContentRequest' when calling GeminiApi->EmbedContent");


            GeminiSharp.Client.RequestOptions localVarRequestOptions = new GeminiSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = GeminiSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeminiSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("model", GeminiSharp.Client.ClientUtils.ParameterToString(model)); // path parameter
            localVarRequestOptions.Data = embedContentRequest;

            // authentication (ApiKeyHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-goog-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-goog-api-key", this.Configuration.GetApiKeyWithPrefix("x-goog-api-key"));
            }
            // authentication (ApiKeyQuery) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ContentEmbedding>("/v1/models/{model}:embedContent", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EmbedContent", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate Content Generates content from the model given an input GenerateContentRequest.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <param name="generateContentRequest"></param>
        /// <returns>GenerateContentResponse</returns>
        public GenerateContentResponse GenerateContent(string model, GenerateContentRequest generateContentRequest)
        {
            GeminiSharp.Client.ApiResponse<GenerateContentResponse> localVarResponse = GenerateContentWithHttpInfo(model, generateContentRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Generate Content Generates content from the model given an input GenerateContentRequest.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <param name="generateContentRequest"></param>
        /// <returns>ApiResponse of GenerateContentResponse</returns>
        public GeminiSharp.Client.ApiResponse<GenerateContentResponse> GenerateContentWithHttpInfo(string model, GenerateContentRequest generateContentRequest)
        {
            // verify the required parameter 'model' is set
            if (model == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'model' when calling GeminiApi->GenerateContent");

            // verify the required parameter 'generateContentRequest' is set
            if (generateContentRequest == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'generateContentRequest' when calling GeminiApi->GenerateContent");

            GeminiSharp.Client.RequestOptions localVarRequestOptions = new GeminiSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GeminiSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeminiSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("model", GeminiSharp.Client.ClientUtils.ParameterToString(model)); // path parameter
            localVarRequestOptions.Data = generateContentRequest;

            // authentication (ApiKeyHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-goog-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-goog-api-key", this.Configuration.GetApiKeyWithPrefix("x-goog-api-key"));
            }
            // authentication (ApiKeyQuery) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GenerateContentResponse>("/v1/models/{model}:generateContent", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GenerateContent", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate Content Generates content from the model given an input GenerateContentRequest.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <param name="generateContentRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GenerateContentResponse</returns>
        public async System.Threading.Tasks.Task<GenerateContentResponse> GenerateContentAsync(string model, GenerateContentRequest generateContentRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            GeminiSharp.Client.ApiResponse<GenerateContentResponse> localVarResponse = await GenerateContentWithHttpInfoAsync(model, generateContentRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Generate Content Generates content from the model given an input GenerateContentRequest.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <param name="generateContentRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GenerateContentResponse)</returns>
        public async System.Threading.Tasks.Task<GeminiSharp.Client.ApiResponse<GenerateContentResponse>> GenerateContentWithHttpInfoAsync(string model, GenerateContentRequest generateContentRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'model' is set
            if (model == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'model' when calling GeminiApi->GenerateContent");

            // verify the required parameter 'generateContentRequest' is set
            if (generateContentRequest == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'generateContentRequest' when calling GeminiApi->GenerateContent");


            GeminiSharp.Client.RequestOptions localVarRequestOptions = new GeminiSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = GeminiSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeminiSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("model", GeminiSharp.Client.ClientUtils.ParameterToString(model)); // path parameter
            localVarRequestOptions.Data = generateContentRequest;

            // authentication (ApiKeyHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-goog-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-goog-api-key", this.Configuration.GetApiKeyWithPrefix("x-goog-api-key"));
            }
            // authentication (ApiKeyQuery) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<GenerateContentResponse>("/v1/models/{model}:generateContent", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GenerateContent", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate Image Generates images based on text prompts using Gemini image generation models.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <param name="generateImageRequest"></param>
        /// <returns>GenerateImageResponse</returns>
        public GenerateImageResponse GenerateImage(string model, GenerateImageRequest generateImageRequest)
        {
            GeminiSharp.Client.ApiResponse<GenerateImageResponse> localVarResponse = GenerateImageWithHttpInfo(model, generateImageRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Generate Image Generates images based on text prompts using Gemini image generation models.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <param name="generateImageRequest"></param>
        /// <returns>ApiResponse of GenerateImageResponse</returns>
        public GeminiSharp.Client.ApiResponse<GenerateImageResponse> GenerateImageWithHttpInfo(string model, GenerateImageRequest generateImageRequest)
        {
            // verify the required parameter 'model' is set
            if (model == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'model' when calling GeminiApi->GenerateImage");

            // verify the required parameter 'generateImageRequest' is set
            if (generateImageRequest == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'generateImageRequest' when calling GeminiApi->GenerateImage");

            GeminiSharp.Client.RequestOptions localVarRequestOptions = new GeminiSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GeminiSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeminiSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("model", GeminiSharp.Client.ClientUtils.ParameterToString(model)); // path parameter
            localVarRequestOptions.Data = generateImageRequest;

            // authentication (ApiKeyHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-goog-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-goog-api-key", this.Configuration.GetApiKeyWithPrefix("x-goog-api-key"));
            }
            // authentication (ApiKeyQuery) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GenerateImageResponse>("/v1/models/{model}:generateImage", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GenerateImage", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate Image Generates images based on text prompts using Gemini image generation models.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <param name="generateImageRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GenerateImageResponse</returns>
        public async System.Threading.Tasks.Task<GenerateImageResponse> GenerateImageAsync(string model, GenerateImageRequest generateImageRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            GeminiSharp.Client.ApiResponse<GenerateImageResponse> localVarResponse = await GenerateImageWithHttpInfoAsync(model, generateImageRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Generate Image Generates images based on text prompts using Gemini image generation models.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <param name="generateImageRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GenerateImageResponse)</returns>
        public async System.Threading.Tasks.Task<GeminiSharp.Client.ApiResponse<GenerateImageResponse>> GenerateImageWithHttpInfoAsync(string model, GenerateImageRequest generateImageRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'model' is set
            if (model == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'model' when calling GeminiApi->GenerateImage");

            // verify the required parameter 'generateImageRequest' is set
            if (generateImageRequest == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'generateImageRequest' when calling GeminiApi->GenerateImage");


            GeminiSharp.Client.RequestOptions localVarRequestOptions = new GeminiSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = GeminiSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeminiSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("model", GeminiSharp.Client.ClientUtils.ParameterToString(model)); // path parameter
            localVarRequestOptions.Data = generateImageRequest;

            // authentication (ApiKeyHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-goog-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-goog-api-key", this.Configuration.GetApiKeyWithPrefix("x-goog-api-key"));
            }
            // authentication (ApiKeyQuery) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<GenerateImageResponse>("/v1/models/{model}:generateImage", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GenerateImage", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Cached Content Gets a cached content by name.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>CachedContent</returns>
        public CachedContent GetCachedContent(string name)
        {
            GeminiSharp.Client.ApiResponse<CachedContent> localVarResponse = GetCachedContentWithHttpInfo(name);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Cached Content Gets a cached content by name.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>ApiResponse of CachedContent</returns>
        public GeminiSharp.Client.ApiResponse<CachedContent> GetCachedContentWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'name' when calling GeminiApi->GetCachedContent");

            GeminiSharp.Client.RequestOptions localVarRequestOptions = new GeminiSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GeminiSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeminiSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", GeminiSharp.Client.ClientUtils.ParameterToString(name)); // path parameter

            // authentication (ApiKeyHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-goog-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-goog-api-key", this.Configuration.GetApiKeyWithPrefix("x-goog-api-key"));
            }
            // authentication (ApiKeyQuery) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CachedContent>("/v1/cachedContents/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCachedContent", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Cached Content Gets a cached content by name.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CachedContent</returns>
        public async System.Threading.Tasks.Task<CachedContent> GetCachedContentAsync(string name, System.Threading.CancellationToken cancellationToken = default)
        {
            GeminiSharp.Client.ApiResponse<CachedContent> localVarResponse = await GetCachedContentWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Cached Content Gets a cached content by name.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CachedContent)</returns>
        public async System.Threading.Tasks.Task<GeminiSharp.Client.ApiResponse<CachedContent>> GetCachedContentWithHttpInfoAsync(string name, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'name' when calling GeminiApi->GetCachedContent");


            GeminiSharp.Client.RequestOptions localVarRequestOptions = new GeminiSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = GeminiSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeminiSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", GeminiSharp.Client.ClientUtils.ParameterToString(name)); // path parameter

            // authentication (ApiKeyHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-goog-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-goog-api-key", this.Configuration.GetApiKeyWithPrefix("x-goog-api-key"));
            }
            // authentication (ApiKeyQuery) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<CachedContent>("/v1/cachedContents/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCachedContent", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Chunk Gets a chunk from a document.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corpus"></param>
        /// <param name="document"></param>
        /// <param name="chunk"></param>
        /// <returns>Chunk</returns>
        public Chunk GetChunk(string corpus, string document, string chunk)
        {
            GeminiSharp.Client.ApiResponse<Chunk> localVarResponse = GetChunkWithHttpInfo(corpus, document, chunk);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Chunk Gets a chunk from a document.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corpus"></param>
        /// <param name="document"></param>
        /// <param name="chunk"></param>
        /// <returns>ApiResponse of Chunk</returns>
        public GeminiSharp.Client.ApiResponse<Chunk> GetChunkWithHttpInfo(string corpus, string document, string chunk)
        {
            // verify the required parameter 'corpus' is set
            if (corpus == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'corpus' when calling GeminiApi->GetChunk");

            // verify the required parameter 'document' is set
            if (document == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'document' when calling GeminiApi->GetChunk");

            // verify the required parameter 'chunk' is set
            if (chunk == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'chunk' when calling GeminiApi->GetChunk");

            GeminiSharp.Client.RequestOptions localVarRequestOptions = new GeminiSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GeminiSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeminiSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("corpus", GeminiSharp.Client.ClientUtils.ParameterToString(corpus)); // path parameter
            localVarRequestOptions.PathParameters.Add("document", GeminiSharp.Client.ClientUtils.ParameterToString(document)); // path parameter
            localVarRequestOptions.PathParameters.Add("chunk", GeminiSharp.Client.ClientUtils.ParameterToString(chunk)); // path parameter

            // authentication (ApiKeyHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-goog-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-goog-api-key", this.Configuration.GetApiKeyWithPrefix("x-goog-api-key"));
            }
            // authentication (ApiKeyQuery) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Chunk>("/v1/corpora/{corpus}/documents/{document}/chunks/{chunk}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetChunk", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Chunk Gets a chunk from a document.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corpus"></param>
        /// <param name="document"></param>
        /// <param name="chunk"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Chunk</returns>
        public async System.Threading.Tasks.Task<Chunk> GetChunkAsync(string corpus, string document, string chunk, System.Threading.CancellationToken cancellationToken = default)
        {
            GeminiSharp.Client.ApiResponse<Chunk> localVarResponse = await GetChunkWithHttpInfoAsync(corpus, document, chunk, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Chunk Gets a chunk from a document.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corpus"></param>
        /// <param name="document"></param>
        /// <param name="chunk"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Chunk)</returns>
        public async System.Threading.Tasks.Task<GeminiSharp.Client.ApiResponse<Chunk>> GetChunkWithHttpInfoAsync(string corpus, string document, string chunk, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'corpus' is set
            if (corpus == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'corpus' when calling GeminiApi->GetChunk");

            // verify the required parameter 'document' is set
            if (document == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'document' when calling GeminiApi->GetChunk");

            // verify the required parameter 'chunk' is set
            if (chunk == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'chunk' when calling GeminiApi->GetChunk");


            GeminiSharp.Client.RequestOptions localVarRequestOptions = new GeminiSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = GeminiSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeminiSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("corpus", GeminiSharp.Client.ClientUtils.ParameterToString(corpus)); // path parameter
            localVarRequestOptions.PathParameters.Add("document", GeminiSharp.Client.ClientUtils.ParameterToString(document)); // path parameter
            localVarRequestOptions.PathParameters.Add("chunk", GeminiSharp.Client.ClientUtils.ParameterToString(chunk)); // path parameter

            // authentication (ApiKeyHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-goog-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-goog-api-key", this.Configuration.GetApiKeyWithPrefix("x-goog-api-key"));
            }
            // authentication (ApiKeyQuery) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Chunk>("/v1/corpora/{corpus}/documents/{document}/chunks/{chunk}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetChunk", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Corpus Gets a corpus by name.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>Corpus</returns>
        public Corpus GetCorpus(string name)
        {
            GeminiSharp.Client.ApiResponse<Corpus> localVarResponse = GetCorpusWithHttpInfo(name);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Corpus Gets a corpus by name.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>ApiResponse of Corpus</returns>
        public GeminiSharp.Client.ApiResponse<Corpus> GetCorpusWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'name' when calling GeminiApi->GetCorpus");

            GeminiSharp.Client.RequestOptions localVarRequestOptions = new GeminiSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GeminiSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeminiSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", GeminiSharp.Client.ClientUtils.ParameterToString(name)); // path parameter

            // authentication (ApiKeyHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-goog-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-goog-api-key", this.Configuration.GetApiKeyWithPrefix("x-goog-api-key"));
            }
            // authentication (ApiKeyQuery) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Corpus>("/v1/corpora/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCorpus", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Corpus Gets a corpus by name.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Corpus</returns>
        public async System.Threading.Tasks.Task<Corpus> GetCorpusAsync(string name, System.Threading.CancellationToken cancellationToken = default)
        {
            GeminiSharp.Client.ApiResponse<Corpus> localVarResponse = await GetCorpusWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Corpus Gets a corpus by name.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Corpus)</returns>
        public async System.Threading.Tasks.Task<GeminiSharp.Client.ApiResponse<Corpus>> GetCorpusWithHttpInfoAsync(string name, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'name' when calling GeminiApi->GetCorpus");


            GeminiSharp.Client.RequestOptions localVarRequestOptions = new GeminiSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = GeminiSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeminiSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", GeminiSharp.Client.ClientUtils.ParameterToString(name)); // path parameter

            // authentication (ApiKeyHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-goog-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-goog-api-key", this.Configuration.GetApiKeyWithPrefix("x-goog-api-key"));
            }
            // authentication (ApiKeyQuery) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Corpus>("/v1/corpora/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCorpus", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Document Gets a document from a corpus.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corpus"></param>
        /// <param name="document"></param>
        /// <returns>Document</returns>
        public Document GetDocument(string corpus, string document)
        {
            GeminiSharp.Client.ApiResponse<Document> localVarResponse = GetDocumentWithHttpInfo(corpus, document);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Document Gets a document from a corpus.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corpus"></param>
        /// <param name="document"></param>
        /// <returns>ApiResponse of Document</returns>
        public GeminiSharp.Client.ApiResponse<Document> GetDocumentWithHttpInfo(string corpus, string document)
        {
            // verify the required parameter 'corpus' is set
            if (corpus == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'corpus' when calling GeminiApi->GetDocument");

            // verify the required parameter 'document' is set
            if (document == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'document' when calling GeminiApi->GetDocument");

            GeminiSharp.Client.RequestOptions localVarRequestOptions = new GeminiSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GeminiSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeminiSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("corpus", GeminiSharp.Client.ClientUtils.ParameterToString(corpus)); // path parameter
            localVarRequestOptions.PathParameters.Add("document", GeminiSharp.Client.ClientUtils.ParameterToString(document)); // path parameter

            // authentication (ApiKeyHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-goog-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-goog-api-key", this.Configuration.GetApiKeyWithPrefix("x-goog-api-key"));
            }
            // authentication (ApiKeyQuery) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Document>("/v1/corpora/{corpus}/documents/{document}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDocument", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Document Gets a document from a corpus.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corpus"></param>
        /// <param name="document"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Document</returns>
        public async System.Threading.Tasks.Task<Document> GetDocumentAsync(string corpus, string document, System.Threading.CancellationToken cancellationToken = default)
        {
            GeminiSharp.Client.ApiResponse<Document> localVarResponse = await GetDocumentWithHttpInfoAsync(corpus, document, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Document Gets a document from a corpus.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corpus"></param>
        /// <param name="document"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Document)</returns>
        public async System.Threading.Tasks.Task<GeminiSharp.Client.ApiResponse<Document>> GetDocumentWithHttpInfoAsync(string corpus, string document, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'corpus' is set
            if (corpus == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'corpus' when calling GeminiApi->GetDocument");

            // verify the required parameter 'document' is set
            if (document == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'document' when calling GeminiApi->GetDocument");


            GeminiSharp.Client.RequestOptions localVarRequestOptions = new GeminiSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = GeminiSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeminiSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("corpus", GeminiSharp.Client.ClientUtils.ParameterToString(corpus)); // path parameter
            localVarRequestOptions.PathParameters.Add("document", GeminiSharp.Client.ClientUtils.ParameterToString(document)); // path parameter

            // authentication (ApiKeyHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-goog-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-goog-api-key", this.Configuration.GetApiKeyWithPrefix("x-goog-api-key"));
            }
            // authentication (ApiKeyQuery) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Document>("/v1/corpora/{corpus}/documents/{document}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDocument", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get File Gets the metadata for a specific uploaded file.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>File</returns>
        public File GetFile(string name)
        {
            GeminiSharp.Client.ApiResponse<File> localVarResponse = GetFileWithHttpInfo(name);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get File Gets the metadata for a specific uploaded file.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>ApiResponse of File</returns>
        public GeminiSharp.Client.ApiResponse<File> GetFileWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'name' when calling GeminiApi->GetFile");

            GeminiSharp.Client.RequestOptions localVarRequestOptions = new GeminiSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GeminiSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeminiSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", GeminiSharp.Client.ClientUtils.ParameterToString(name)); // path parameter

            // authentication (ApiKeyHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-goog-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-goog-api-key", this.Configuration.GetApiKeyWithPrefix("x-goog-api-key"));
            }
            // authentication (ApiKeyQuery) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<File>("/v1/files/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFile", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get File Gets the metadata for a specific uploaded file.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of File</returns>
        public async System.Threading.Tasks.Task<File> GetFileAsync(string name, System.Threading.CancellationToken cancellationToken = default)
        {
            GeminiSharp.Client.ApiResponse<File> localVarResponse = await GetFileWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get File Gets the metadata for a specific uploaded file.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (File)</returns>
        public async System.Threading.Tasks.Task<GeminiSharp.Client.ApiResponse<File>> GetFileWithHttpInfoAsync(string name, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'name' when calling GeminiApi->GetFile");


            GeminiSharp.Client.RequestOptions localVarRequestOptions = new GeminiSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = GeminiSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeminiSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", GeminiSharp.Client.ClientUtils.ParameterToString(name)); // path parameter

            // authentication (ApiKeyHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-goog-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-goog-api-key", this.Configuration.GetApiKeyWithPrefix("x-goog-api-key"));
            }
            // authentication (ApiKeyQuery) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<File>("/v1/files/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFile", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Model Gets detailed information about a specific model.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <returns>GeminiModel</returns>
        public GeminiModel GetModel(string model)
        {
            GeminiSharp.Client.ApiResponse<GeminiModel> localVarResponse = GetModelWithHttpInfo(model);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Model Gets detailed information about a specific model.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <returns>ApiResponse of GeminiModel</returns>
        public GeminiSharp.Client.ApiResponse<GeminiModel> GetModelWithHttpInfo(string model)
        {
            // verify the required parameter 'model' is set
            if (model == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'model' when calling GeminiApi->GetModel");

            GeminiSharp.Client.RequestOptions localVarRequestOptions = new GeminiSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GeminiSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeminiSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("model", GeminiSharp.Client.ClientUtils.ParameterToString(model)); // path parameter

            // authentication (ApiKeyHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-goog-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-goog-api-key", this.Configuration.GetApiKeyWithPrefix("x-goog-api-key"));
            }
            // authentication (ApiKeyQuery) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GeminiModel>("/v1/models/{model}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetModel", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Model Gets detailed information about a specific model.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GeminiModel</returns>
        public async System.Threading.Tasks.Task<GeminiModel> GetModelAsync(string model, System.Threading.CancellationToken cancellationToken = default)
        {
            GeminiSharp.Client.ApiResponse<GeminiModel> localVarResponse = await GetModelWithHttpInfoAsync(model, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Model Gets detailed information about a specific model.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GeminiModel)</returns>
        public async System.Threading.Tasks.Task<GeminiSharp.Client.ApiResponse<GeminiModel>> GetModelWithHttpInfoAsync(string model, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'model' is set
            if (model == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'model' when calling GeminiApi->GetModel");


            GeminiSharp.Client.RequestOptions localVarRequestOptions = new GeminiSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = GeminiSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeminiSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("model", GeminiSharp.Client.ClientUtils.ParameterToString(model)); // path parameter

            // authentication (ApiKeyHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-goog-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-goog-api-key", this.Configuration.GetApiKeyWithPrefix("x-goog-api-key"));
            }
            // authentication (ApiKeyQuery) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GeminiModel>("/v1/models/{model}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetModel", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Operation Gets the status of a long-running operation.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>Operation</returns>
        public Operation GetOperation(string name)
        {
            GeminiSharp.Client.ApiResponse<Operation> localVarResponse = GetOperationWithHttpInfo(name);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Operation Gets the status of a long-running operation.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>ApiResponse of Operation</returns>
        public GeminiSharp.Client.ApiResponse<Operation> GetOperationWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'name' when calling GeminiApi->GetOperation");

            GeminiSharp.Client.RequestOptions localVarRequestOptions = new GeminiSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GeminiSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeminiSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", GeminiSharp.Client.ClientUtils.ParameterToString(name)); // path parameter

            // authentication (ApiKeyHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-goog-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-goog-api-key", this.Configuration.GetApiKeyWithPrefix("x-goog-api-key"));
            }
            // authentication (ApiKeyQuery) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Operation>("/v1/operations/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOperation", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Operation Gets the status of a long-running operation.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Operation</returns>
        public async System.Threading.Tasks.Task<Operation> GetOperationAsync(string name, System.Threading.CancellationToken cancellationToken = default)
        {
            GeminiSharp.Client.ApiResponse<Operation> localVarResponse = await GetOperationWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Operation Gets the status of a long-running operation.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Operation)</returns>
        public async System.Threading.Tasks.Task<GeminiSharp.Client.ApiResponse<Operation>> GetOperationWithHttpInfoAsync(string name, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'name' when calling GeminiApi->GetOperation");


            GeminiSharp.Client.RequestOptions localVarRequestOptions = new GeminiSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = GeminiSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeminiSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", GeminiSharp.Client.ClientUtils.ParameterToString(name)); // path parameter

            // authentication (ApiKeyHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-goog-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-goog-api-key", this.Configuration.GetApiKeyWithPrefix("x-goog-api-key"));
            }
            // authentication (ApiKeyQuery) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Operation>("/v1/operations/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOperation", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Tuned Model Gets information about a specific tuned model.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>TunedModel</returns>
        public TunedModel GetTunedModel(string name)
        {
            GeminiSharp.Client.ApiResponse<TunedModel> localVarResponse = GetTunedModelWithHttpInfo(name);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Tuned Model Gets information about a specific tuned model.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>ApiResponse of TunedModel</returns>
        public GeminiSharp.Client.ApiResponse<TunedModel> GetTunedModelWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'name' when calling GeminiApi->GetTunedModel");

            GeminiSharp.Client.RequestOptions localVarRequestOptions = new GeminiSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GeminiSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeminiSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", GeminiSharp.Client.ClientUtils.ParameterToString(name)); // path parameter

            // authentication (ApiKeyHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-goog-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-goog-api-key", this.Configuration.GetApiKeyWithPrefix("x-goog-api-key"));
            }
            // authentication (ApiKeyQuery) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TunedModel>("/v1/tunedModels/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTunedModel", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Tuned Model Gets information about a specific tuned model.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TunedModel</returns>
        public async System.Threading.Tasks.Task<TunedModel> GetTunedModelAsync(string name, System.Threading.CancellationToken cancellationToken = default)
        {
            GeminiSharp.Client.ApiResponse<TunedModel> localVarResponse = await GetTunedModelWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Tuned Model Gets information about a specific tuned model.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TunedModel)</returns>
        public async System.Threading.Tasks.Task<GeminiSharp.Client.ApiResponse<TunedModel>> GetTunedModelWithHttpInfoAsync(string name, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'name' when calling GeminiApi->GetTunedModel");


            GeminiSharp.Client.RequestOptions localVarRequestOptions = new GeminiSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = GeminiSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeminiSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", GeminiSharp.Client.ClientUtils.ParameterToString(name)); // path parameter

            // authentication (ApiKeyHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-goog-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-goog-api-key", this.Configuration.GetApiKeyWithPrefix("x-goog-api-key"));
            }
            // authentication (ApiKeyQuery) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<TunedModel>("/v1/tunedModels/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTunedModel", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Cached Contents Lists cached contents for efficient context reuse.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <returns>ListCachedContents200Response</returns>
        public ListCachedContents200Response ListCachedContents(int? pageSize = default, string? pageToken = default)
        {
            GeminiSharp.Client.ApiResponse<ListCachedContents200Response> localVarResponse = ListCachedContentsWithHttpInfo(pageSize, pageToken);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Cached Contents Lists cached contents for efficient context reuse.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <returns>ApiResponse of ListCachedContents200Response</returns>
        public GeminiSharp.Client.ApiResponse<ListCachedContents200Response> ListCachedContentsWithHttpInfo(int? pageSize = default, string? pageToken = default)
        {
            GeminiSharp.Client.RequestOptions localVarRequestOptions = new GeminiSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GeminiSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeminiSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "pageToken", pageToken));
            }

            // authentication (ApiKeyHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-goog-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-goog-api-key", this.Configuration.GetApiKeyWithPrefix("x-goog-api-key"));
            }
            // authentication (ApiKeyQuery) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ListCachedContents200Response>("/v1/cachedContents", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListCachedContents", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Cached Contents Lists cached contents for efficient context reuse.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListCachedContents200Response</returns>
        public async System.Threading.Tasks.Task<ListCachedContents200Response> ListCachedContentsAsync(int? pageSize = default, string? pageToken = default, System.Threading.CancellationToken cancellationToken = default)
        {
            GeminiSharp.Client.ApiResponse<ListCachedContents200Response> localVarResponse = await ListCachedContentsWithHttpInfoAsync(pageSize, pageToken, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Cached Contents Lists cached contents for efficient context reuse.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListCachedContents200Response)</returns>
        public async System.Threading.Tasks.Task<GeminiSharp.Client.ApiResponse<ListCachedContents200Response>> ListCachedContentsWithHttpInfoAsync(int? pageSize = default, string? pageToken = default, System.Threading.CancellationToken cancellationToken = default)
        {

            GeminiSharp.Client.RequestOptions localVarRequestOptions = new GeminiSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = GeminiSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeminiSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "pageToken", pageToken));
            }

            // authentication (ApiKeyHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-goog-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-goog-api-key", this.Configuration.GetApiKeyWithPrefix("x-goog-api-key"));
            }
            // authentication (ApiKeyQuery) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ListCachedContents200Response>("/v1/cachedContents", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListCachedContents", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Chunks Lists chunks in a document.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corpus"></param>
        /// <param name="document"></param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <returns>ListChunks200Response</returns>
        public ListChunks200Response ListChunks(string corpus, string document, int? pageSize = default, string? pageToken = default)
        {
            GeminiSharp.Client.ApiResponse<ListChunks200Response> localVarResponse = ListChunksWithHttpInfo(corpus, document, pageSize, pageToken);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Chunks Lists chunks in a document.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corpus"></param>
        /// <param name="document"></param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <returns>ApiResponse of ListChunks200Response</returns>
        public GeminiSharp.Client.ApiResponse<ListChunks200Response> ListChunksWithHttpInfo(string corpus, string document, int? pageSize = default, string? pageToken = default)
        {
            // verify the required parameter 'corpus' is set
            if (corpus == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'corpus' when calling GeminiApi->ListChunks");

            // verify the required parameter 'document' is set
            if (document == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'document' when calling GeminiApi->ListChunks");

            GeminiSharp.Client.RequestOptions localVarRequestOptions = new GeminiSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GeminiSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeminiSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("corpus", GeminiSharp.Client.ClientUtils.ParameterToString(corpus)); // path parameter
            localVarRequestOptions.PathParameters.Add("document", GeminiSharp.Client.ClientUtils.ParameterToString(document)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "pageToken", pageToken));
            }

            // authentication (ApiKeyHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-goog-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-goog-api-key", this.Configuration.GetApiKeyWithPrefix("x-goog-api-key"));
            }
            // authentication (ApiKeyQuery) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ListChunks200Response>("/v1/corpora/{corpus}/documents/{document}/chunks", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListChunks", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Chunks Lists chunks in a document.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corpus"></param>
        /// <param name="document"></param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListChunks200Response</returns>
        public async System.Threading.Tasks.Task<ListChunks200Response> ListChunksAsync(string corpus, string document, int? pageSize = default, string? pageToken = default, System.Threading.CancellationToken cancellationToken = default)
        {
            GeminiSharp.Client.ApiResponse<ListChunks200Response> localVarResponse = await ListChunksWithHttpInfoAsync(corpus, document, pageSize, pageToken, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Chunks Lists chunks in a document.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corpus"></param>
        /// <param name="document"></param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListChunks200Response)</returns>
        public async System.Threading.Tasks.Task<GeminiSharp.Client.ApiResponse<ListChunks200Response>> ListChunksWithHttpInfoAsync(string corpus, string document, int? pageSize = default, string? pageToken = default, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'corpus' is set
            if (corpus == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'corpus' when calling GeminiApi->ListChunks");

            // verify the required parameter 'document' is set
            if (document == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'document' when calling GeminiApi->ListChunks");


            GeminiSharp.Client.RequestOptions localVarRequestOptions = new GeminiSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = GeminiSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeminiSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("corpus", GeminiSharp.Client.ClientUtils.ParameterToString(corpus)); // path parameter
            localVarRequestOptions.PathParameters.Add("document", GeminiSharp.Client.ClientUtils.ParameterToString(document)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "pageToken", pageToken));
            }

            // authentication (ApiKeyHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-goog-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-goog-api-key", this.Configuration.GetApiKeyWithPrefix("x-goog-api-key"));
            }
            // authentication (ApiKeyQuery) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ListChunks200Response>("/v1/corpora/{corpus}/documents/{document}/chunks", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListChunks", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Corpora Lists corpora for semantic retrieval.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <returns>ListCorpora200Response</returns>
        public ListCorpora200Response ListCorpora(int? pageSize = default, string? pageToken = default)
        {
            GeminiSharp.Client.ApiResponse<ListCorpora200Response> localVarResponse = ListCorporaWithHttpInfo(pageSize, pageToken);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Corpora Lists corpora for semantic retrieval.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <returns>ApiResponse of ListCorpora200Response</returns>
        public GeminiSharp.Client.ApiResponse<ListCorpora200Response> ListCorporaWithHttpInfo(int? pageSize = default, string? pageToken = default)
        {
            GeminiSharp.Client.RequestOptions localVarRequestOptions = new GeminiSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GeminiSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeminiSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "pageToken", pageToken));
            }

            // authentication (ApiKeyHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-goog-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-goog-api-key", this.Configuration.GetApiKeyWithPrefix("x-goog-api-key"));
            }
            // authentication (ApiKeyQuery) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ListCorpora200Response>("/v1/corpora", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListCorpora", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Corpora Lists corpora for semantic retrieval.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListCorpora200Response</returns>
        public async System.Threading.Tasks.Task<ListCorpora200Response> ListCorporaAsync(int? pageSize = default, string? pageToken = default, System.Threading.CancellationToken cancellationToken = default)
        {
            GeminiSharp.Client.ApiResponse<ListCorpora200Response> localVarResponse = await ListCorporaWithHttpInfoAsync(pageSize, pageToken, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Corpora Lists corpora for semantic retrieval.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListCorpora200Response)</returns>
        public async System.Threading.Tasks.Task<GeminiSharp.Client.ApiResponse<ListCorpora200Response>> ListCorporaWithHttpInfoAsync(int? pageSize = default, string? pageToken = default, System.Threading.CancellationToken cancellationToken = default)
        {

            GeminiSharp.Client.RequestOptions localVarRequestOptions = new GeminiSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = GeminiSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeminiSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "pageToken", pageToken));
            }

            // authentication (ApiKeyHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-goog-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-goog-api-key", this.Configuration.GetApiKeyWithPrefix("x-goog-api-key"));
            }
            // authentication (ApiKeyQuery) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ListCorpora200Response>("/v1/corpora", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListCorpora", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Documents Lists documents in a corpus.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corpus"></param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <returns>ListDocuments200Response</returns>
        public ListDocuments200Response ListDocuments(string corpus, int? pageSize = default, string? pageToken = default)
        {
            GeminiSharp.Client.ApiResponse<ListDocuments200Response> localVarResponse = ListDocumentsWithHttpInfo(corpus, pageSize, pageToken);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Documents Lists documents in a corpus.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corpus"></param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <returns>ApiResponse of ListDocuments200Response</returns>
        public GeminiSharp.Client.ApiResponse<ListDocuments200Response> ListDocumentsWithHttpInfo(string corpus, int? pageSize = default, string? pageToken = default)
        {
            // verify the required parameter 'corpus' is set
            if (corpus == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'corpus' when calling GeminiApi->ListDocuments");

            GeminiSharp.Client.RequestOptions localVarRequestOptions = new GeminiSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GeminiSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeminiSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("corpus", GeminiSharp.Client.ClientUtils.ParameterToString(corpus)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "pageToken", pageToken));
            }

            // authentication (ApiKeyHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-goog-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-goog-api-key", this.Configuration.GetApiKeyWithPrefix("x-goog-api-key"));
            }
            // authentication (ApiKeyQuery) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ListDocuments200Response>("/v1/corpora/{corpus}/documents", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListDocuments", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Documents Lists documents in a corpus.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corpus"></param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListDocuments200Response</returns>
        public async System.Threading.Tasks.Task<ListDocuments200Response> ListDocumentsAsync(string corpus, int? pageSize = default, string? pageToken = default, System.Threading.CancellationToken cancellationToken = default)
        {
            GeminiSharp.Client.ApiResponse<ListDocuments200Response> localVarResponse = await ListDocumentsWithHttpInfoAsync(corpus, pageSize, pageToken, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Documents Lists documents in a corpus.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corpus"></param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListDocuments200Response)</returns>
        public async System.Threading.Tasks.Task<GeminiSharp.Client.ApiResponse<ListDocuments200Response>> ListDocumentsWithHttpInfoAsync(string corpus, int? pageSize = default, string? pageToken = default, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'corpus' is set
            if (corpus == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'corpus' when calling GeminiApi->ListDocuments");


            GeminiSharp.Client.RequestOptions localVarRequestOptions = new GeminiSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = GeminiSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeminiSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("corpus", GeminiSharp.Client.ClientUtils.ParameterToString(corpus)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "pageToken", pageToken));
            }

            // authentication (ApiKeyHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-goog-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-goog-api-key", this.Configuration.GetApiKeyWithPrefix("x-goog-api-key"));
            }
            // authentication (ApiKeyQuery) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ListDocuments200Response>("/v1/corpora/{corpus}/documents", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListDocuments", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Files Lists uploaded files.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <returns>ListFiles200Response</returns>
        public ListFiles200Response ListFiles(int? pageSize = default, string? pageToken = default)
        {
            GeminiSharp.Client.ApiResponse<ListFiles200Response> localVarResponse = ListFilesWithHttpInfo(pageSize, pageToken);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Files Lists uploaded files.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <returns>ApiResponse of ListFiles200Response</returns>
        public GeminiSharp.Client.ApiResponse<ListFiles200Response> ListFilesWithHttpInfo(int? pageSize = default, string? pageToken = default)
        {
            GeminiSharp.Client.RequestOptions localVarRequestOptions = new GeminiSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GeminiSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeminiSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "pageToken", pageToken));
            }

            // authentication (ApiKeyHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-goog-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-goog-api-key", this.Configuration.GetApiKeyWithPrefix("x-goog-api-key"));
            }
            // authentication (ApiKeyQuery) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ListFiles200Response>("/v1/files", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListFiles", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Files Lists uploaded files.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListFiles200Response</returns>
        public async System.Threading.Tasks.Task<ListFiles200Response> ListFilesAsync(int? pageSize = default, string? pageToken = default, System.Threading.CancellationToken cancellationToken = default)
        {
            GeminiSharp.Client.ApiResponse<ListFiles200Response> localVarResponse = await ListFilesWithHttpInfoAsync(pageSize, pageToken, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Files Lists uploaded files.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListFiles200Response)</returns>
        public async System.Threading.Tasks.Task<GeminiSharp.Client.ApiResponse<ListFiles200Response>> ListFilesWithHttpInfoAsync(int? pageSize = default, string? pageToken = default, System.Threading.CancellationToken cancellationToken = default)
        {

            GeminiSharp.Client.RequestOptions localVarRequestOptions = new GeminiSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = GeminiSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeminiSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "pageToken", pageToken));
            }

            // authentication (ApiKeyHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-goog-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-goog-api-key", this.Configuration.GetApiKeyWithPrefix("x-goog-api-key"));
            }
            // authentication (ApiKeyQuery) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ListFiles200Response>("/v1/files", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListFiles", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Models Lists all available Gemini models including base models and tuned models.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">Maximum number of models to return (optional)</param>
        /// <param name="pageToken">Token for pagination (optional)</param>
        /// <returns>ListModels200Response</returns>
        public ListModels200Response ListModels(int? pageSize = default, string? pageToken = default)
        {
            GeminiSharp.Client.ApiResponse<ListModels200Response> localVarResponse = ListModelsWithHttpInfo(pageSize, pageToken);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Models Lists all available Gemini models including base models and tuned models.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">Maximum number of models to return (optional)</param>
        /// <param name="pageToken">Token for pagination (optional)</param>
        /// <returns>ApiResponse of ListModels200Response</returns>
        public GeminiSharp.Client.ApiResponse<ListModels200Response> ListModelsWithHttpInfo(int? pageSize = default, string? pageToken = default)
        {
            GeminiSharp.Client.RequestOptions localVarRequestOptions = new GeminiSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GeminiSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeminiSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "pageToken", pageToken));
            }

            // authentication (ApiKeyHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-goog-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-goog-api-key", this.Configuration.GetApiKeyWithPrefix("x-goog-api-key"));
            }
            // authentication (ApiKeyQuery) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ListModels200Response>("/v1/models", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListModels", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Models Lists all available Gemini models including base models and tuned models.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">Maximum number of models to return (optional)</param>
        /// <param name="pageToken">Token for pagination (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListModels200Response</returns>
        public async System.Threading.Tasks.Task<ListModels200Response> ListModelsAsync(int? pageSize = default, string? pageToken = default, System.Threading.CancellationToken cancellationToken = default)
        {
            GeminiSharp.Client.ApiResponse<ListModels200Response> localVarResponse = await ListModelsWithHttpInfoAsync(pageSize, pageToken, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Models Lists all available Gemini models including base models and tuned models.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">Maximum number of models to return (optional)</param>
        /// <param name="pageToken">Token for pagination (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListModels200Response)</returns>
        public async System.Threading.Tasks.Task<GeminiSharp.Client.ApiResponse<ListModels200Response>> ListModelsWithHttpInfoAsync(int? pageSize = default, string? pageToken = default, System.Threading.CancellationToken cancellationToken = default)
        {

            GeminiSharp.Client.RequestOptions localVarRequestOptions = new GeminiSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = GeminiSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeminiSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "pageToken", pageToken));
            }

            // authentication (ApiKeyHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-goog-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-goog-api-key", this.Configuration.GetApiKeyWithPrefix("x-goog-api-key"));
            }
            // authentication (ApiKeyQuery) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ListModels200Response>("/v1/models", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListModels", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Operations Lists operations that match the specified filter.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the operation&#39;s parent resource (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <returns>ListOperations200Response</returns>
        public ListOperations200Response ListOperations(string? name = default, string? filter = default, int? pageSize = default, string? pageToken = default)
        {
            GeminiSharp.Client.ApiResponse<ListOperations200Response> localVarResponse = ListOperationsWithHttpInfo(name, filter, pageSize, pageToken);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Operations Lists operations that match the specified filter.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the operation&#39;s parent resource (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <returns>ApiResponse of ListOperations200Response</returns>
        public GeminiSharp.Client.ApiResponse<ListOperations200Response> ListOperationsWithHttpInfo(string? name = default, string? filter = default, int? pageSize = default, string? pageToken = default)
        {
            GeminiSharp.Client.RequestOptions localVarRequestOptions = new GeminiSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GeminiSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeminiSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "pageToken", pageToken));
            }

            // authentication (ApiKeyHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-goog-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-goog-api-key", this.Configuration.GetApiKeyWithPrefix("x-goog-api-key"));
            }
            // authentication (ApiKeyQuery) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ListOperations200Response>("/v1/operations", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListOperations", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Operations Lists operations that match the specified filter.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the operation&#39;s parent resource (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListOperations200Response</returns>
        public async System.Threading.Tasks.Task<ListOperations200Response> ListOperationsAsync(string? name = default, string? filter = default, int? pageSize = default, string? pageToken = default, System.Threading.CancellationToken cancellationToken = default)
        {
            GeminiSharp.Client.ApiResponse<ListOperations200Response> localVarResponse = await ListOperationsWithHttpInfoAsync(name, filter, pageSize, pageToken, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Operations Lists operations that match the specified filter.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the operation&#39;s parent resource (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListOperations200Response)</returns>
        public async System.Threading.Tasks.Task<GeminiSharp.Client.ApiResponse<ListOperations200Response>> ListOperationsWithHttpInfoAsync(string? name = default, string? filter = default, int? pageSize = default, string? pageToken = default, System.Threading.CancellationToken cancellationToken = default)
        {

            GeminiSharp.Client.RequestOptions localVarRequestOptions = new GeminiSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = GeminiSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeminiSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "pageToken", pageToken));
            }

            // authentication (ApiKeyHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-goog-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-goog-api-key", this.Configuration.GetApiKeyWithPrefix("x-goog-api-key"));
            }
            // authentication (ApiKeyQuery) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ListOperations200Response>("/v1/operations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListOperations", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Tuned Models Lists tuned models owned by the user.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="filter">Filter expression to list tuned models (optional)</param>
        /// <returns>ListTunedModels200Response</returns>
        public ListTunedModels200Response ListTunedModels(int? pageSize = default, string? pageToken = default, string? filter = default)
        {
            GeminiSharp.Client.ApiResponse<ListTunedModels200Response> localVarResponse = ListTunedModelsWithHttpInfo(pageSize, pageToken, filter);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Tuned Models Lists tuned models owned by the user.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="filter">Filter expression to list tuned models (optional)</param>
        /// <returns>ApiResponse of ListTunedModels200Response</returns>
        public GeminiSharp.Client.ApiResponse<ListTunedModels200Response> ListTunedModelsWithHttpInfo(int? pageSize = default, string? pageToken = default, string? filter = default)
        {
            GeminiSharp.Client.RequestOptions localVarRequestOptions = new GeminiSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GeminiSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeminiSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "pageToken", pageToken));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }

            // authentication (ApiKeyHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-goog-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-goog-api-key", this.Configuration.GetApiKeyWithPrefix("x-goog-api-key"));
            }
            // authentication (ApiKeyQuery) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ListTunedModels200Response>("/v1/tunedModels", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListTunedModels", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Tuned Models Lists tuned models owned by the user.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="filter">Filter expression to list tuned models (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListTunedModels200Response</returns>
        public async System.Threading.Tasks.Task<ListTunedModels200Response> ListTunedModelsAsync(int? pageSize = default, string? pageToken = default, string? filter = default, System.Threading.CancellationToken cancellationToken = default)
        {
            GeminiSharp.Client.ApiResponse<ListTunedModels200Response> localVarResponse = await ListTunedModelsWithHttpInfoAsync(pageSize, pageToken, filter, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Tuned Models Lists tuned models owned by the user.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="filter">Filter expression to list tuned models (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListTunedModels200Response)</returns>
        public async System.Threading.Tasks.Task<GeminiSharp.Client.ApiResponse<ListTunedModels200Response>> ListTunedModelsWithHttpInfoAsync(int? pageSize = default, string? pageToken = default, string? filter = default, System.Threading.CancellationToken cancellationToken = default)
        {

            GeminiSharp.Client.RequestOptions localVarRequestOptions = new GeminiSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = GeminiSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeminiSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "pageToken", pageToken));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }

            // authentication (ApiKeyHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-goog-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-goog-api-key", this.Configuration.GetApiKeyWithPrefix("x-goog-api-key"));
            }
            // authentication (ApiKeyQuery) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ListTunedModels200Response>("/v1/tunedModels", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListTunedModels", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Query Corpus Performs a semantic search query against a corpus.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corpus"></param>
        /// <param name="queryCorpusRequest"></param>
        /// <returns>QueryCorpusResponse</returns>
        public QueryCorpusResponse QueryCorpus(string corpus, QueryCorpusRequest queryCorpusRequest)
        {
            GeminiSharp.Client.ApiResponse<QueryCorpusResponse> localVarResponse = QueryCorpusWithHttpInfo(corpus, queryCorpusRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Query Corpus Performs a semantic search query against a corpus.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corpus"></param>
        /// <param name="queryCorpusRequest"></param>
        /// <returns>ApiResponse of QueryCorpusResponse</returns>
        public GeminiSharp.Client.ApiResponse<QueryCorpusResponse> QueryCorpusWithHttpInfo(string corpus, QueryCorpusRequest queryCorpusRequest)
        {
            // verify the required parameter 'corpus' is set
            if (corpus == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'corpus' when calling GeminiApi->QueryCorpus");

            // verify the required parameter 'queryCorpusRequest' is set
            if (queryCorpusRequest == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'queryCorpusRequest' when calling GeminiApi->QueryCorpus");

            GeminiSharp.Client.RequestOptions localVarRequestOptions = new GeminiSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GeminiSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeminiSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("corpus", GeminiSharp.Client.ClientUtils.ParameterToString(corpus)); // path parameter
            localVarRequestOptions.Data = queryCorpusRequest;

            // authentication (ApiKeyHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-goog-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-goog-api-key", this.Configuration.GetApiKeyWithPrefix("x-goog-api-key"));
            }
            // authentication (ApiKeyQuery) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<QueryCorpusResponse>("/v1/corpora/{corpus}:query", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QueryCorpus", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Query Corpus Performs a semantic search query against a corpus.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corpus"></param>
        /// <param name="queryCorpusRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of QueryCorpusResponse</returns>
        public async System.Threading.Tasks.Task<QueryCorpusResponse> QueryCorpusAsync(string corpus, QueryCorpusRequest queryCorpusRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            GeminiSharp.Client.ApiResponse<QueryCorpusResponse> localVarResponse = await QueryCorpusWithHttpInfoAsync(corpus, queryCorpusRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Query Corpus Performs a semantic search query against a corpus.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corpus"></param>
        /// <param name="queryCorpusRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (QueryCorpusResponse)</returns>
        public async System.Threading.Tasks.Task<GeminiSharp.Client.ApiResponse<QueryCorpusResponse>> QueryCorpusWithHttpInfoAsync(string corpus, QueryCorpusRequest queryCorpusRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'corpus' is set
            if (corpus == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'corpus' when calling GeminiApi->QueryCorpus");

            // verify the required parameter 'queryCorpusRequest' is set
            if (queryCorpusRequest == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'queryCorpusRequest' when calling GeminiApi->QueryCorpus");


            GeminiSharp.Client.RequestOptions localVarRequestOptions = new GeminiSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = GeminiSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeminiSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("corpus", GeminiSharp.Client.ClientUtils.ParameterToString(corpus)); // path parameter
            localVarRequestOptions.Data = queryCorpusRequest;

            // authentication (ApiKeyHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-goog-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-goog-api-key", this.Configuration.GetApiKeyWithPrefix("x-goog-api-key"));
            }
            // authentication (ApiKeyQuery) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<QueryCorpusResponse>("/v1/corpora/{corpus}:query", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QueryCorpus", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Stream Generate Content Generates streaming content from the model.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <param name="generateContentRequest"></param>
        /// <returns>string</returns>
        public string StreamGenerateContent(string model, GenerateContentRequest generateContentRequest)
        {
            GeminiSharp.Client.ApiResponse<string> localVarResponse = StreamGenerateContentWithHttpInfo(model, generateContentRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Stream Generate Content Generates streaming content from the model.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <param name="generateContentRequest"></param>
        /// <returns>ApiResponse of string</returns>
        public GeminiSharp.Client.ApiResponse<string> StreamGenerateContentWithHttpInfo(string model, GenerateContentRequest generateContentRequest)
        {
            // verify the required parameter 'model' is set
            if (model == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'model' when calling GeminiApi->StreamGenerateContent");

            // verify the required parameter 'generateContentRequest' is set
            if (generateContentRequest == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'generateContentRequest' when calling GeminiApi->StreamGenerateContent");

            GeminiSharp.Client.RequestOptions localVarRequestOptions = new GeminiSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain"
            };

            var localVarContentType = GeminiSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeminiSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("model", GeminiSharp.Client.ClientUtils.ParameterToString(model)); // path parameter
            localVarRequestOptions.Data = generateContentRequest;

            // authentication (ApiKeyHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-goog-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-goog-api-key", this.Configuration.GetApiKeyWithPrefix("x-goog-api-key"));
            }
            // authentication (ApiKeyQuery) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<string>("/v1/models/{model}:streamGenerateContent", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StreamGenerateContent", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Stream Generate Content Generates streaming content from the model.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <param name="generateContentRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> StreamGenerateContentAsync(string model, GenerateContentRequest generateContentRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            GeminiSharp.Client.ApiResponse<string> localVarResponse = await StreamGenerateContentWithHttpInfoAsync(model, generateContentRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Stream Generate Content Generates streaming content from the model.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <param name="generateContentRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<GeminiSharp.Client.ApiResponse<string>> StreamGenerateContentWithHttpInfoAsync(string model, GenerateContentRequest generateContentRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'model' is set
            if (model == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'model' when calling GeminiApi->StreamGenerateContent");

            // verify the required parameter 'generateContentRequest' is set
            if (generateContentRequest == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'generateContentRequest' when calling GeminiApi->StreamGenerateContent");


            GeminiSharp.Client.RequestOptions localVarRequestOptions = new GeminiSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain"
            };


            var localVarContentType = GeminiSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeminiSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("model", GeminiSharp.Client.ClientUtils.ParameterToString(model)); // path parameter
            localVarRequestOptions.Data = generateContentRequest;

            // authentication (ApiKeyHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-goog-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-goog-api-key", this.Configuration.GetApiKeyWithPrefix("x-goog-api-key"));
            }
            // authentication (ApiKeyQuery) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<string>("/v1/models/{model}:streamGenerateContent", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StreamGenerateContent", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Cached Content Updates a cached content.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="cachedContent"></param>
        /// <param name="updateMask"> (optional)</param>
        /// <returns>CachedContent</returns>
        public CachedContent UpdateCachedContent(string name, CachedContent cachedContent, string? updateMask = default)
        {
            GeminiSharp.Client.ApiResponse<CachedContent> localVarResponse = UpdateCachedContentWithHttpInfo(name, cachedContent, updateMask);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Cached Content Updates a cached content.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="cachedContent"></param>
        /// <param name="updateMask"> (optional)</param>
        /// <returns>ApiResponse of CachedContent</returns>
        public GeminiSharp.Client.ApiResponse<CachedContent> UpdateCachedContentWithHttpInfo(string name, CachedContent cachedContent, string? updateMask = default)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'name' when calling GeminiApi->UpdateCachedContent");

            // verify the required parameter 'cachedContent' is set
            if (cachedContent == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'cachedContent' when calling GeminiApi->UpdateCachedContent");

            GeminiSharp.Client.RequestOptions localVarRequestOptions = new GeminiSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GeminiSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeminiSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", GeminiSharp.Client.ClientUtils.ParameterToString(name)); // path parameter
            if (updateMask != null)
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "updateMask", updateMask));
            }
            localVarRequestOptions.Data = cachedContent;

            // authentication (ApiKeyHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-goog-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-goog-api-key", this.Configuration.GetApiKeyWithPrefix("x-goog-api-key"));
            }
            // authentication (ApiKeyQuery) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<CachedContent>("/v1/cachedContents/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCachedContent", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Cached Content Updates a cached content.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="cachedContent"></param>
        /// <param name="updateMask"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CachedContent</returns>
        public async System.Threading.Tasks.Task<CachedContent> UpdateCachedContentAsync(string name, CachedContent cachedContent, string? updateMask = default, System.Threading.CancellationToken cancellationToken = default)
        {
            GeminiSharp.Client.ApiResponse<CachedContent> localVarResponse = await UpdateCachedContentWithHttpInfoAsync(name, cachedContent, updateMask, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Cached Content Updates a cached content.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="cachedContent"></param>
        /// <param name="updateMask"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CachedContent)</returns>
        public async System.Threading.Tasks.Task<GeminiSharp.Client.ApiResponse<CachedContent>> UpdateCachedContentWithHttpInfoAsync(string name, CachedContent cachedContent, string? updateMask = default, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'name' when calling GeminiApi->UpdateCachedContent");

            // verify the required parameter 'cachedContent' is set
            if (cachedContent == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'cachedContent' when calling GeminiApi->UpdateCachedContent");


            GeminiSharp.Client.RequestOptions localVarRequestOptions = new GeminiSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = GeminiSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeminiSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", GeminiSharp.Client.ClientUtils.ParameterToString(name)); // path parameter
            if (updateMask != null)
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "updateMask", updateMask));
            }
            localVarRequestOptions.Data = cachedContent;

            // authentication (ApiKeyHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-goog-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-goog-api-key", this.Configuration.GetApiKeyWithPrefix("x-goog-api-key"));
            }
            // authentication (ApiKeyQuery) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<CachedContent>("/v1/cachedContents/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCachedContent", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Chunk Updates a chunk in a document.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corpus"></param>
        /// <param name="document"></param>
        /// <param name="chunk"></param>
        /// <param name="chunk2"></param>
        /// <param name="updateMask"> (optional)</param>
        /// <returns>Chunk</returns>
        public Chunk UpdateChunk(string corpus, string document, string chunk, Chunk chunk2, string? updateMask = default)
        {
            GeminiSharp.Client.ApiResponse<Chunk> localVarResponse = UpdateChunkWithHttpInfo(corpus, document, chunk, chunk2, updateMask);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Chunk Updates a chunk in a document.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corpus"></param>
        /// <param name="document"></param>
        /// <param name="chunk"></param>
        /// <param name="chunk2"></param>
        /// <param name="updateMask"> (optional)</param>
        /// <returns>ApiResponse of Chunk</returns>
        public GeminiSharp.Client.ApiResponse<Chunk> UpdateChunkWithHttpInfo(string corpus, string document, string chunk, Chunk chunk2, string? updateMask = default)
        {
            // verify the required parameter 'corpus' is set
            if (corpus == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'corpus' when calling GeminiApi->UpdateChunk");

            // verify the required parameter 'document' is set
            if (document == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'document' when calling GeminiApi->UpdateChunk");

            // verify the required parameter 'chunk' is set
            if (chunk == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'chunk' when calling GeminiApi->UpdateChunk");

            // verify the required parameter 'chunk2' is set
            if (chunk2 == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'chunk2' when calling GeminiApi->UpdateChunk");

            GeminiSharp.Client.RequestOptions localVarRequestOptions = new GeminiSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GeminiSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeminiSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("corpus", GeminiSharp.Client.ClientUtils.ParameterToString(corpus)); // path parameter
            localVarRequestOptions.PathParameters.Add("document", GeminiSharp.Client.ClientUtils.ParameterToString(document)); // path parameter
            localVarRequestOptions.PathParameters.Add("chunk", GeminiSharp.Client.ClientUtils.ParameterToString(chunk)); // path parameter
            if (updateMask != null)
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "updateMask", updateMask));
            }
            localVarRequestOptions.Data = chunk2;

            // authentication (ApiKeyHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-goog-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-goog-api-key", this.Configuration.GetApiKeyWithPrefix("x-goog-api-key"));
            }
            // authentication (ApiKeyQuery) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Chunk>("/v1/corpora/{corpus}/documents/{document}/chunks/{chunk}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateChunk", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Chunk Updates a chunk in a document.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corpus"></param>
        /// <param name="document"></param>
        /// <param name="chunk"></param>
        /// <param name="chunk2"></param>
        /// <param name="updateMask"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Chunk</returns>
        public async System.Threading.Tasks.Task<Chunk> UpdateChunkAsync(string corpus, string document, string chunk, Chunk chunk2, string? updateMask = default, System.Threading.CancellationToken cancellationToken = default)
        {
            GeminiSharp.Client.ApiResponse<Chunk> localVarResponse = await UpdateChunkWithHttpInfoAsync(corpus, document, chunk, chunk2, updateMask, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Chunk Updates a chunk in a document.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corpus"></param>
        /// <param name="document"></param>
        /// <param name="chunk"></param>
        /// <param name="chunk2"></param>
        /// <param name="updateMask"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Chunk)</returns>
        public async System.Threading.Tasks.Task<GeminiSharp.Client.ApiResponse<Chunk>> UpdateChunkWithHttpInfoAsync(string corpus, string document, string chunk, Chunk chunk2, string? updateMask = default, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'corpus' is set
            if (corpus == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'corpus' when calling GeminiApi->UpdateChunk");

            // verify the required parameter 'document' is set
            if (document == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'document' when calling GeminiApi->UpdateChunk");

            // verify the required parameter 'chunk' is set
            if (chunk == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'chunk' when calling GeminiApi->UpdateChunk");

            // verify the required parameter 'chunk2' is set
            if (chunk2 == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'chunk2' when calling GeminiApi->UpdateChunk");


            GeminiSharp.Client.RequestOptions localVarRequestOptions = new GeminiSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = GeminiSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeminiSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("corpus", GeminiSharp.Client.ClientUtils.ParameterToString(corpus)); // path parameter
            localVarRequestOptions.PathParameters.Add("document", GeminiSharp.Client.ClientUtils.ParameterToString(document)); // path parameter
            localVarRequestOptions.PathParameters.Add("chunk", GeminiSharp.Client.ClientUtils.ParameterToString(chunk)); // path parameter
            if (updateMask != null)
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "updateMask", updateMask));
            }
            localVarRequestOptions.Data = chunk2;

            // authentication (ApiKeyHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-goog-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-goog-api-key", this.Configuration.GetApiKeyWithPrefix("x-goog-api-key"));
            }
            // authentication (ApiKeyQuery) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<Chunk>("/v1/corpora/{corpus}/documents/{document}/chunks/{chunk}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateChunk", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Corpus Updates a corpus.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="corpus"></param>
        /// <param name="updateMask"> (optional)</param>
        /// <returns>Corpus</returns>
        public Corpus UpdateCorpus(string name, Corpus corpus, string? updateMask = default)
        {
            GeminiSharp.Client.ApiResponse<Corpus> localVarResponse = UpdateCorpusWithHttpInfo(name, corpus, updateMask);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Corpus Updates a corpus.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="corpus"></param>
        /// <param name="updateMask"> (optional)</param>
        /// <returns>ApiResponse of Corpus</returns>
        public GeminiSharp.Client.ApiResponse<Corpus> UpdateCorpusWithHttpInfo(string name, Corpus corpus, string? updateMask = default)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'name' when calling GeminiApi->UpdateCorpus");

            // verify the required parameter 'corpus' is set
            if (corpus == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'corpus' when calling GeminiApi->UpdateCorpus");

            GeminiSharp.Client.RequestOptions localVarRequestOptions = new GeminiSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GeminiSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeminiSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", GeminiSharp.Client.ClientUtils.ParameterToString(name)); // path parameter
            if (updateMask != null)
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "updateMask", updateMask));
            }
            localVarRequestOptions.Data = corpus;

            // authentication (ApiKeyHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-goog-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-goog-api-key", this.Configuration.GetApiKeyWithPrefix("x-goog-api-key"));
            }
            // authentication (ApiKeyQuery) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Corpus>("/v1/corpora/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCorpus", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Corpus Updates a corpus.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="corpus"></param>
        /// <param name="updateMask"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Corpus</returns>
        public async System.Threading.Tasks.Task<Corpus> UpdateCorpusAsync(string name, Corpus corpus, string? updateMask = default, System.Threading.CancellationToken cancellationToken = default)
        {
            GeminiSharp.Client.ApiResponse<Corpus> localVarResponse = await UpdateCorpusWithHttpInfoAsync(name, corpus, updateMask, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Corpus Updates a corpus.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="corpus"></param>
        /// <param name="updateMask"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Corpus)</returns>
        public async System.Threading.Tasks.Task<GeminiSharp.Client.ApiResponse<Corpus>> UpdateCorpusWithHttpInfoAsync(string name, Corpus corpus, string? updateMask = default, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'name' when calling GeminiApi->UpdateCorpus");

            // verify the required parameter 'corpus' is set
            if (corpus == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'corpus' when calling GeminiApi->UpdateCorpus");


            GeminiSharp.Client.RequestOptions localVarRequestOptions = new GeminiSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = GeminiSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeminiSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", GeminiSharp.Client.ClientUtils.ParameterToString(name)); // path parameter
            if (updateMask != null)
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "updateMask", updateMask));
            }
            localVarRequestOptions.Data = corpus;

            // authentication (ApiKeyHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-goog-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-goog-api-key", this.Configuration.GetApiKeyWithPrefix("x-goog-api-key"));
            }
            // authentication (ApiKeyQuery) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<Corpus>("/v1/corpora/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCorpus", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Document Updates a document in a corpus.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corpus"></param>
        /// <param name="document"></param>
        /// <param name="document2"></param>
        /// <param name="updateMask"> (optional)</param>
        /// <returns>Document</returns>
        public Document UpdateDocument(string corpus, string document, Document document2, string? updateMask = default)
        {
            GeminiSharp.Client.ApiResponse<Document> localVarResponse = UpdateDocumentWithHttpInfo(corpus, document, document2, updateMask);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Document Updates a document in a corpus.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corpus"></param>
        /// <param name="document"></param>
        /// <param name="document2"></param>
        /// <param name="updateMask"> (optional)</param>
        /// <returns>ApiResponse of Document</returns>
        public GeminiSharp.Client.ApiResponse<Document> UpdateDocumentWithHttpInfo(string corpus, string document, Document document2, string? updateMask = default)
        {
            // verify the required parameter 'corpus' is set
            if (corpus == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'corpus' when calling GeminiApi->UpdateDocument");

            // verify the required parameter 'document' is set
            if (document == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'document' when calling GeminiApi->UpdateDocument");

            // verify the required parameter 'document2' is set
            if (document2 == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'document2' when calling GeminiApi->UpdateDocument");

            GeminiSharp.Client.RequestOptions localVarRequestOptions = new GeminiSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GeminiSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeminiSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("corpus", GeminiSharp.Client.ClientUtils.ParameterToString(corpus)); // path parameter
            localVarRequestOptions.PathParameters.Add("document", GeminiSharp.Client.ClientUtils.ParameterToString(document)); // path parameter
            if (updateMask != null)
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "updateMask", updateMask));
            }
            localVarRequestOptions.Data = document2;

            // authentication (ApiKeyHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-goog-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-goog-api-key", this.Configuration.GetApiKeyWithPrefix("x-goog-api-key"));
            }
            // authentication (ApiKeyQuery) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Document>("/v1/corpora/{corpus}/documents/{document}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateDocument", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Document Updates a document in a corpus.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corpus"></param>
        /// <param name="document"></param>
        /// <param name="document2"></param>
        /// <param name="updateMask"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Document</returns>
        public async System.Threading.Tasks.Task<Document> UpdateDocumentAsync(string corpus, string document, Document document2, string? updateMask = default, System.Threading.CancellationToken cancellationToken = default)
        {
            GeminiSharp.Client.ApiResponse<Document> localVarResponse = await UpdateDocumentWithHttpInfoAsync(corpus, document, document2, updateMask, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Document Updates a document in a corpus.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corpus"></param>
        /// <param name="document"></param>
        /// <param name="document2"></param>
        /// <param name="updateMask"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Document)</returns>
        public async System.Threading.Tasks.Task<GeminiSharp.Client.ApiResponse<Document>> UpdateDocumentWithHttpInfoAsync(string corpus, string document, Document document2, string? updateMask = default, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'corpus' is set
            if (corpus == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'corpus' when calling GeminiApi->UpdateDocument");

            // verify the required parameter 'document' is set
            if (document == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'document' when calling GeminiApi->UpdateDocument");

            // verify the required parameter 'document2' is set
            if (document2 == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'document2' when calling GeminiApi->UpdateDocument");


            GeminiSharp.Client.RequestOptions localVarRequestOptions = new GeminiSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = GeminiSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeminiSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("corpus", GeminiSharp.Client.ClientUtils.ParameterToString(corpus)); // path parameter
            localVarRequestOptions.PathParameters.Add("document", GeminiSharp.Client.ClientUtils.ParameterToString(document)); // path parameter
            if (updateMask != null)
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "updateMask", updateMask));
            }
            localVarRequestOptions.Data = document2;

            // authentication (ApiKeyHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-goog-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-goog-api-key", this.Configuration.GetApiKeyWithPrefix("x-goog-api-key"));
            }
            // authentication (ApiKeyQuery) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<Document>("/v1/corpora/{corpus}/documents/{document}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateDocument", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Tuned Model Updates a tuned model.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="tunedModel"></param>
        /// <param name="updateMask">Field mask to specify which fields to update (optional)</param>
        /// <returns>TunedModel</returns>
        public TunedModel UpdateTunedModel(string name, TunedModel tunedModel, string? updateMask = default)
        {
            GeminiSharp.Client.ApiResponse<TunedModel> localVarResponse = UpdateTunedModelWithHttpInfo(name, tunedModel, updateMask);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Tuned Model Updates a tuned model.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="tunedModel"></param>
        /// <param name="updateMask">Field mask to specify which fields to update (optional)</param>
        /// <returns>ApiResponse of TunedModel</returns>
        public GeminiSharp.Client.ApiResponse<TunedModel> UpdateTunedModelWithHttpInfo(string name, TunedModel tunedModel, string? updateMask = default)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'name' when calling GeminiApi->UpdateTunedModel");

            // verify the required parameter 'tunedModel' is set
            if (tunedModel == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'tunedModel' when calling GeminiApi->UpdateTunedModel");

            GeminiSharp.Client.RequestOptions localVarRequestOptions = new GeminiSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GeminiSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeminiSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", GeminiSharp.Client.ClientUtils.ParameterToString(name)); // path parameter
            if (updateMask != null)
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "updateMask", updateMask));
            }
            localVarRequestOptions.Data = tunedModel;

            // authentication (ApiKeyHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-goog-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-goog-api-key", this.Configuration.GetApiKeyWithPrefix("x-goog-api-key"));
            }
            // authentication (ApiKeyQuery) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<TunedModel>("/v1/tunedModels/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTunedModel", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Tuned Model Updates a tuned model.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="tunedModel"></param>
        /// <param name="updateMask">Field mask to specify which fields to update (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TunedModel</returns>
        public async System.Threading.Tasks.Task<TunedModel> UpdateTunedModelAsync(string name, TunedModel tunedModel, string? updateMask = default, System.Threading.CancellationToken cancellationToken = default)
        {
            GeminiSharp.Client.ApiResponse<TunedModel> localVarResponse = await UpdateTunedModelWithHttpInfoAsync(name, tunedModel, updateMask, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Tuned Model Updates a tuned model.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="tunedModel"></param>
        /// <param name="updateMask">Field mask to specify which fields to update (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TunedModel)</returns>
        public async System.Threading.Tasks.Task<GeminiSharp.Client.ApiResponse<TunedModel>> UpdateTunedModelWithHttpInfoAsync(string name, TunedModel tunedModel, string? updateMask = default, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'name' when calling GeminiApi->UpdateTunedModel");

            // verify the required parameter 'tunedModel' is set
            if (tunedModel == null)
                throw new GeminiSharp.Client.ApiException(400, "Missing required parameter 'tunedModel' when calling GeminiApi->UpdateTunedModel");


            GeminiSharp.Client.RequestOptions localVarRequestOptions = new GeminiSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = GeminiSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeminiSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", GeminiSharp.Client.ClientUtils.ParameterToString(name)); // path parameter
            if (updateMask != null)
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "updateMask", updateMask));
            }
            localVarRequestOptions.Data = tunedModel;

            // authentication (ApiKeyHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-goog-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-goog-api-key", this.Configuration.GetApiKeyWithPrefix("x-goog-api-key"));
            }
            // authentication (ApiKeyQuery) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<TunedModel>("/v1/tunedModels/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTunedModel", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upload File Creates a File by uploading to the API.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"> (optional)</param>
        /// <param name="metadata"> (optional)</param>
        /// <returns>File</returns>
        public File UploadFile(FileParameter? file = default, UploadFileRequestMetadata? metadata = default)
        {
            GeminiSharp.Client.ApiResponse<File> localVarResponse = UploadFileWithHttpInfo(file, metadata);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Upload File Creates a File by uploading to the API.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"> (optional)</param>
        /// <param name="metadata"> (optional)</param>
        /// <returns>ApiResponse of File</returns>
        public GeminiSharp.Client.ApiResponse<File> UploadFileWithHttpInfo(FileParameter? file = default, UploadFileRequestMetadata? metadata = default)
        {
            GeminiSharp.Client.RequestOptions localVarRequestOptions = new GeminiSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GeminiSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeminiSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (file != null)
            {
                localVarRequestOptions.FileParameters.Add("file", file);
            }
            if (metadata != null)
            {
                localVarRequestOptions.FormParameters.Add("metadata", GeminiSharp.Client.ClientUtils.ParameterToString(metadata)); // form parameter
            }

            // authentication (ApiKeyHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-goog-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-goog-api-key", this.Configuration.GetApiKeyWithPrefix("x-goog-api-key"));
            }
            // authentication (ApiKeyQuery) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<File>("/v1/files", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UploadFile", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upload File Creates a File by uploading to the API.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"> (optional)</param>
        /// <param name="metadata"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of File</returns>
        public async System.Threading.Tasks.Task<File> UploadFileAsync(FileParameter? file = default, UploadFileRequestMetadata? metadata = default, System.Threading.CancellationToken cancellationToken = default)
        {
            GeminiSharp.Client.ApiResponse<File> localVarResponse = await UploadFileWithHttpInfoAsync(file, metadata, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Upload File Creates a File by uploading to the API.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"> (optional)</param>
        /// <param name="metadata"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (File)</returns>
        public async System.Threading.Tasks.Task<GeminiSharp.Client.ApiResponse<File>> UploadFileWithHttpInfoAsync(FileParameter? file = default, UploadFileRequestMetadata? metadata = default, System.Threading.CancellationToken cancellationToken = default)
        {

            GeminiSharp.Client.RequestOptions localVarRequestOptions = new GeminiSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = GeminiSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeminiSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (file != null)
            {
                localVarRequestOptions.FileParameters.Add("file", file);
            }
            if (metadata != null)
            {
                localVarRequestOptions.FormParameters.Add("metadata", GeminiSharp.Client.ClientUtils.ParameterToString(metadata)); // form parameter
            }

            // authentication (ApiKeyHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-goog-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-goog-api-key", this.Configuration.GetApiKeyWithPrefix("x-goog-api-key"));
            }
            // authentication (ApiKeyQuery) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<File>("/v1/files", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UploadFile", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upload Media Uploads media files for processing with Gemini models.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"> (optional)</param>
        /// <returns>File</returns>
        public File UploadMedia(FileParameter? file = default)
        {
            GeminiSharp.Client.ApiResponse<File> localVarResponse = UploadMediaWithHttpInfo(file);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Upload Media Uploads media files for processing with Gemini models.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"> (optional)</param>
        /// <returns>ApiResponse of File</returns>
        public GeminiSharp.Client.ApiResponse<File> UploadMediaWithHttpInfo(FileParameter? file = default)
        {
            GeminiSharp.Client.RequestOptions localVarRequestOptions = new GeminiSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GeminiSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeminiSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (file != null)
            {
                localVarRequestOptions.FileParameters.Add("file", file);
            }

            // authentication (ApiKeyHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-goog-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-goog-api-key", this.Configuration.GetApiKeyWithPrefix("x-goog-api-key"));
            }
            // authentication (ApiKeyQuery) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<File>("/v1/media", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UploadMedia", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upload Media Uploads media files for processing with Gemini models.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of File</returns>
        public async System.Threading.Tasks.Task<File> UploadMediaAsync(FileParameter? file = default, System.Threading.CancellationToken cancellationToken = default)
        {
            GeminiSharp.Client.ApiResponse<File> localVarResponse = await UploadMediaWithHttpInfoAsync(file, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Upload Media Uploads media files for processing with Gemini models.
        /// </summary>
        /// <exception cref="GeminiSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (File)</returns>
        public async System.Threading.Tasks.Task<GeminiSharp.Client.ApiResponse<File>> UploadMediaWithHttpInfoAsync(FileParameter? file = default, System.Threading.CancellationToken cancellationToken = default)
        {

            GeminiSharp.Client.RequestOptions localVarRequestOptions = new GeminiSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = GeminiSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeminiSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (file != null)
            {
                localVarRequestOptions.FileParameters.Add("file", file);
            }

            // authentication (ApiKeyHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-goog-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-goog-api-key", this.Configuration.GetApiKeyWithPrefix("x-goog-api-key"));
            }
            // authentication (ApiKeyQuery) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(GeminiSharp.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<File>("/v1/media", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UploadMedia", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
