/*
 * Google Gemini API
 *
 * Comprehensive API for interacting with Google's Gemini models supporting text, chat, image generation, file uploads, grounding, code execution, model tuning, and more.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = GeminiSharp.Client.FileParameter;
using OpenAPIDateConverter = GeminiSharp.Client.OpenAPIDateConverter;

namespace GeminiSharp.Model
{
    /// <summary>
    /// BatchEmbedContentsRequestRequestsInner
    /// </summary>
    [DataContract(Name = "BatchEmbedContents_request_requests_inner")]
    public partial class BatchEmbedContentsRequestRequestsInner : IValidatableObject
    {
        /// <summary>
        /// Defines TaskType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TaskTypeEnum
        {
            /// <summary>
            /// Enum TASKTYPEUNSPECIFIED for value: TASK_TYPE_UNSPECIFIED
            /// </summary>
            [EnumMember(Value = "TASK_TYPE_UNSPECIFIED")]
            TASKTYPEUNSPECIFIED = 1,

            /// <summary>
            /// Enum RETRIEVALQUERY for value: RETRIEVAL_QUERY
            /// </summary>
            [EnumMember(Value = "RETRIEVAL_QUERY")]
            RETRIEVALQUERY = 2,

            /// <summary>
            /// Enum RETRIEVALDOCUMENT for value: RETRIEVAL_DOCUMENT
            /// </summary>
            [EnumMember(Value = "RETRIEVAL_DOCUMENT")]
            RETRIEVALDOCUMENT = 3,

            /// <summary>
            /// Enum SEMANTICSIMILARITY for value: SEMANTIC_SIMILARITY
            /// </summary>
            [EnumMember(Value = "SEMANTIC_SIMILARITY")]
            SEMANTICSIMILARITY = 4,

            /// <summary>
            /// Enum CLASSIFICATION for value: CLASSIFICATION
            /// </summary>
            [EnumMember(Value = "CLASSIFICATION")]
            CLASSIFICATION = 5,

            /// <summary>
            /// Enum CLUSTERING for value: CLUSTERING
            /// </summary>
            [EnumMember(Value = "CLUSTERING")]
            CLUSTERING = 6
        }


        /// <summary>
        /// Gets or Sets TaskType
        /// </summary>
        [DataMember(Name = "taskType", EmitDefaultValue = false)]
        public TaskTypeEnum? TaskType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="BatchEmbedContentsRequestRequestsInner" /> class.
        /// </summary>
        /// <param name="content">content.</param>
        /// <param name="taskType">taskType.</param>
        /// <param name="title">title.</param>
        public BatchEmbedContentsRequestRequestsInner(RequestContent content = default, TaskTypeEnum? taskType = default, string title = default)
        {
            this.Content = content;
            this.TaskType = taskType;
            this.Title = title;
        }

        /// <summary>
        /// Gets or Sets Content
        /// </summary>
        [DataMember(Name = "content", EmitDefaultValue = false)]
        public RequestContent Content { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name = "title", EmitDefaultValue = false)]
        public string Title { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BatchEmbedContentsRequestRequestsInner {\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  TaskType: ").Append(TaskType).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
