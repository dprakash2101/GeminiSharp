/*
 * Google Gemini API
 *
 * Comprehensive API for interacting with Google's Gemini models supporting text, chat, image generation, file uploads, grounding, code execution, model tuning, and more.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = GeminiSharp.Client.FileParameter;
using OpenAPIDateConverter = GeminiSharp.Client.OpenAPIDateConverter;

namespace GeminiSharp.Model
{
    /// <summary>
    /// CitationSource
    /// </summary>
    [DataContract(Name = "CitationSource")]
    public partial class CitationSource : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CitationSource" /> class.
        /// </summary>
        /// <param name="startIndex">Start of segment of the response that is attributed to this source.</param>
        /// <param name="endIndex">End of the segment of the response that is attributed to this source.</param>
        /// <param name="uri">URI that is attributed as a source for a portion of the text.</param>
        /// <param name="license">License for the GitHub project that is attributed as a source for segment.</param>
        public CitationSource(int startIndex = default, int endIndex = default, string uri = default, string license = default)
        {
            this.StartIndex = startIndex;
            this.EndIndex = endIndex;
            this.Uri = uri;
            this.License = license;
        }

        /// <summary>
        /// Start of segment of the response that is attributed to this source
        /// </summary>
        /// <value>Start of segment of the response that is attributed to this source</value>
        [DataMember(Name = "startIndex", EmitDefaultValue = false)]
        public int StartIndex { get; set; }

        /// <summary>
        /// End of the segment of the response that is attributed to this source
        /// </summary>
        /// <value>End of the segment of the response that is attributed to this source</value>
        [DataMember(Name = "endIndex", EmitDefaultValue = false)]
        public int EndIndex { get; set; }

        /// <summary>
        /// URI that is attributed as a source for a portion of the text
        /// </summary>
        /// <value>URI that is attributed as a source for a portion of the text</value>
        [DataMember(Name = "uri", EmitDefaultValue = false)]
        public string Uri { get; set; }

        /// <summary>
        /// License for the GitHub project that is attributed as a source for segment
        /// </summary>
        /// <value>License for the GitHub project that is attributed as a source for segment</value>
        [DataMember(Name = "license", EmitDefaultValue = false)]
        public string License { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CitationSource {\n");
            sb.Append("  StartIndex: ").Append(StartIndex).Append("\n");
            sb.Append("  EndIndex: ").Append(EndIndex).Append("\n");
            sb.Append("  Uri: ").Append(Uri).Append("\n");
            sb.Append("  License: ").Append(License).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
