/*
 * Google Gemini API
 *
 * Comprehensive API for interacting with Google's Gemini models supporting text, chat, image generation, file uploads, grounding, code execution, model tuning, and more.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = GeminiSharp.Client.FileParameter;
using OpenAPIDateConverter = GeminiSharp.Client.OpenAPIDateConverter;

namespace GeminiSharp.Model
{
    /// <summary>
    /// GroundingSupport
    /// </summary>
    [DataContract(Name = "GroundingSupport")]
    public partial class GroundingSupport : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GroundingSupport" /> class.
        /// </summary>
        /// <param name="segment">segment.</param>
        /// <param name="groundingChunkIndices">A list of indices (into &#39;grounding_chunk&#39;) specifying the citations associated with the claim.</param>
        /// <param name="confidenceScores">Confidence score of the support references.</param>
        public GroundingSupport(Segment segment = default, Collection<int> groundingChunkIndices = default, Collection<float> confidenceScores = default)
        {
            this.Segment = segment;
            this.GroundingChunkIndices = groundingChunkIndices;
            this.ConfidenceScores = confidenceScores;
        }

        /// <summary>
        /// Gets or Sets Segment
        /// </summary>
        [DataMember(Name = "segment", EmitDefaultValue = false)]
        public Segment Segment { get; set; }

        /// <summary>
        /// A list of indices (into &#39;grounding_chunk&#39;) specifying the citations associated with the claim
        /// </summary>
        /// <value>A list of indices (into &#39;grounding_chunk&#39;) specifying the citations associated with the claim</value>
        [DataMember(Name = "groundingChunkIndices", EmitDefaultValue = false)]
        public Collection<int> GroundingChunkIndices { get; set; }

        /// <summary>
        /// Confidence score of the support references
        /// </summary>
        /// <value>Confidence score of the support references</value>
        [DataMember(Name = "confidenceScores", EmitDefaultValue = false)]
        public Collection<float> ConfidenceScores { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GroundingSupport {\n");
            sb.Append("  Segment: ").Append(Segment).Append("\n");
            sb.Append("  GroundingChunkIndices: ").Append(GroundingChunkIndices).Append("\n");
            sb.Append("  ConfidenceScores: ").Append(ConfidenceScores).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
