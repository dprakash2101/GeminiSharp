/*
 * Google Gemini API
 *
 * Comprehensive API for interacting with Google's Gemini models supporting text, chat, image generation, file uploads, grounding, code execution, model tuning, and more.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = GeminiSharp.Client.FileParameter;
using OpenAPIDateConverter = GeminiSharp.Client.OpenAPIDateConverter;

namespace GeminiSharp.Model
{
    /// <summary>
    /// Segment
    /// </summary>
    [DataContract(Name = "Segment")]
    public partial class Segment : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Segment" /> class.
        /// </summary>
        /// <param name="partIndex">The index of a Part object within its parent Content object.</param>
        /// <param name="startIndex">Start index in the given Part, measured in bytes.</param>
        /// <param name="endIndex">End index in the given Part, measured in bytes.</param>
        /// <param name="text">The text corresponding to the segment from the response.</param>
        public Segment(int partIndex = default, int startIndex = default, int endIndex = default, string text = default)
        {
            this.PartIndex = partIndex;
            this.StartIndex = startIndex;
            this.EndIndex = endIndex;
            this.Text = text;
        }

        /// <summary>
        /// The index of a Part object within its parent Content object
        /// </summary>
        /// <value>The index of a Part object within its parent Content object</value>
        [DataMember(Name = "partIndex", EmitDefaultValue = false)]
        public int PartIndex { get; set; }

        /// <summary>
        /// Start index in the given Part, measured in bytes
        /// </summary>
        /// <value>Start index in the given Part, measured in bytes</value>
        [DataMember(Name = "startIndex", EmitDefaultValue = false)]
        public int StartIndex { get; set; }

        /// <summary>
        /// End index in the given Part, measured in bytes
        /// </summary>
        /// <value>End index in the given Part, measured in bytes</value>
        [DataMember(Name = "endIndex", EmitDefaultValue = false)]
        public int EndIndex { get; set; }

        /// <summary>
        /// The text corresponding to the segment from the response
        /// </summary>
        /// <value>The text corresponding to the segment from the response</value>
        [DataMember(Name = "text", EmitDefaultValue = false)]
        public string Text { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Segment {\n");
            sb.Append("  PartIndex: ").Append(PartIndex).Append("\n");
            sb.Append("  StartIndex: ").Append(StartIndex).Append("\n");
            sb.Append("  EndIndex: ").Append(EndIndex).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
