/*
 * Google Gemini API
 *
 * Comprehensive API for interacting with Google's Gemini models supporting text, chat, image generation, file uploads, grounding, code execution, model tuning, and more.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = GeminiSharp.Client.FileParameter;
using OpenAPIDateConverter = GeminiSharp.Client.OpenAPIDateConverter;

namespace GeminiSharp.Model
{
    /// <summary>
    /// GenerateContentRequest
    /// </summary>
    [DataContract(Name = "GenerateContentRequest")]
    public partial class GenerateContentRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GenerateContentRequest" /> class.
        /// </summary>
        /// <param name="contents">Required. The content of the current conversation with the model.</param>
        /// <param name="tools">Optional. A list of Tools the Model may use to generate the next response.</param>
        /// <param name="toolConfig">toolConfig.</param>
        /// <param name="safetySettings">Optional. A list of unique SafetySetting instances for blocking unsafe content.</param>
        /// <param name="systemInstruction">systemInstruction.</param>
        /// <param name="generationConfig">generationConfig.</param>
        /// <param name="cachedContent">Optional. The name of the cached content to use as context.</param>
        public GenerateContentRequest(Collection<RequestContent> contents = default, Collection<Tool> tools = default, ToolConfig toolConfig = default, Collection<SafetySetting> safetySettings = default, RequestContent systemInstruction = default, GenerationConfig generationConfig = default, string cachedContent = default)
        {
            this.Contents = contents;
            this.Tools = tools;
            this.ToolConfig = toolConfig;
            this.SafetySettings = safetySettings;
            this.SystemInstruction = systemInstruction;
            this.GenerationConfig = generationConfig;
            this.CachedContent = cachedContent;
        }

        /// <summary>
        /// Required. The content of the current conversation with the model
        /// </summary>
        /// <value>Required. The content of the current conversation with the model</value>
        [DataMember(Name = "contents", EmitDefaultValue = false)]
        public Collection<RequestContent> Contents { get; set; }

        /// <summary>
        /// Optional. A list of Tools the Model may use to generate the next response
        /// </summary>
        /// <value>Optional. A list of Tools the Model may use to generate the next response</value>
        [DataMember(Name = "tools", EmitDefaultValue = false)]
        public Collection<Tool> Tools { get; set; }

        /// <summary>
        /// Gets or Sets ToolConfig
        /// </summary>
        [DataMember(Name = "toolConfig", EmitDefaultValue = false)]
        public ToolConfig ToolConfig { get; set; }

        /// <summary>
        /// Optional. A list of unique SafetySetting instances for blocking unsafe content
        /// </summary>
        /// <value>Optional. A list of unique SafetySetting instances for blocking unsafe content</value>
        [DataMember(Name = "safetySettings", EmitDefaultValue = false)]
        public Collection<SafetySetting> SafetySettings { get; set; }

        /// <summary>
        /// Gets or Sets SystemInstruction
        /// </summary>
        [DataMember(Name = "systemInstruction", EmitDefaultValue = false)]
        public RequestContent SystemInstruction { get; set; }

        /// <summary>
        /// Gets or Sets GenerationConfig
        /// </summary>
        [DataMember(Name = "generationConfig", EmitDefaultValue = false)]
        public GenerationConfig GenerationConfig { get; set; }

        /// <summary>
        /// Optional. The name of the cached content to use as context
        /// </summary>
        /// <value>Optional. The name of the cached content to use as context</value>
        [DataMember(Name = "cachedContent", EmitDefaultValue = false)]
        public string CachedContent { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GenerateContentRequest {\n");
            sb.Append("  Contents: ").Append(Contents).Append("\n");
            sb.Append("  Tools: ").Append(Tools).Append("\n");
            sb.Append("  ToolConfig: ").Append(ToolConfig).Append("\n");
            sb.Append("  SafetySettings: ").Append(SafetySettings).Append("\n");
            sb.Append("  SystemInstruction: ").Append(SystemInstruction).Append("\n");
            sb.Append("  GenerationConfig: ").Append(GenerationConfig).Append("\n");
            sb.Append("  CachedContent: ").Append(CachedContent).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
