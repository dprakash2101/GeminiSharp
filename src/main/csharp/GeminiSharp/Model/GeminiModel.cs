/*
 * Google Gemini API
 *
 * Comprehensive API for interacting with Google's Gemini models supporting text, chat, image generation, file uploads, grounding, code execution, model tuning, and more.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = GeminiSharp.Client.FileParameter;
using OpenAPIDateConverter = GeminiSharp.Client.OpenAPIDateConverter;

namespace GeminiSharp.Model
{
    /// <summary>
    /// GeminiModel
    /// </summary>
    [DataContract(Name = "GeminiModel")]
    public partial class GeminiModel : IValidatableObject
    {
        /// <summary>
        /// Defines SupportedGenerationMethods
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SupportedGenerationMethodsEnum
        {
            /// <summary>
            /// Enum GenerateContent for value: generateContent
            /// </summary>
            [EnumMember(Value = "generateContent")]
            GenerateContent = 1,

            /// <summary>
            /// Enum EmbedContent for value: embedContent
            /// </summary>
            [EnumMember(Value = "embedContent")]
            EmbedContent = 2,

            /// <summary>
            /// Enum CountTokens for value: countTokens
            /// </summary>
            [EnumMember(Value = "countTokens")]
            CountTokens = 3
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GeminiModel" /> class.
        /// </summary>
        /// <param name="name">The resource name of the Model.</param>
        /// <param name="baseModelId">The base model ID if this is a tuned model.</param>
        /// <param name="varVersion">varVersion.</param>
        /// <param name="displayName">displayName.</param>
        /// <param name="description">description.</param>
        /// <param name="inputTokenLimit">inputTokenLimit.</param>
        /// <param name="outputTokenLimit">outputTokenLimit.</param>
        /// <param name="supportedGenerationMethods">supportedGenerationMethods.</param>
        /// <param name="temperature">temperature.</param>
        /// <param name="maxTemperature">maxTemperature.</param>
        /// <param name="topP">topP.</param>
        /// <param name="topK">topK.</param>
        public GeminiModel(string name = default, string baseModelId = default, string varVersion = default, string displayName = default, string description = default, int inputTokenLimit = default, int outputTokenLimit = default, Collection<SupportedGenerationMethodsEnum> supportedGenerationMethods = default, float temperature = default, float maxTemperature = default, float topP = default, int topK = default)
        {
            this.Name = name;
            this.BaseModelId = baseModelId;
            this.VarVersion = varVersion;
            this.DisplayName = displayName;
            this.Description = description;
            this.InputTokenLimit = inputTokenLimit;
            this.OutputTokenLimit = outputTokenLimit;
            this.SupportedGenerationMethods = supportedGenerationMethods;
            this.Temperature = temperature;
            this.MaxTemperature = maxTemperature;
            this.TopP = topP;
            this.TopK = topK;
        }

        /// <summary>
        /// The resource name of the Model
        /// </summary>
        /// <value>The resource name of the Model</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// The base model ID if this is a tuned model
        /// </summary>
        /// <value>The base model ID if this is a tuned model</value>
        [DataMember(Name = "baseModelId", EmitDefaultValue = false)]
        public string BaseModelId { get; set; }

        /// <summary>
        /// Gets or Sets VarVersion
        /// </summary>
        [DataMember(Name = "version", EmitDefaultValue = false)]
        public string VarVersion { get; set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name = "displayName", EmitDefaultValue = false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets InputTokenLimit
        /// </summary>
        [DataMember(Name = "inputTokenLimit", EmitDefaultValue = false)]
        public int InputTokenLimit { get; set; }

        /// <summary>
        /// Gets or Sets OutputTokenLimit
        /// </summary>
        [DataMember(Name = "outputTokenLimit", EmitDefaultValue = false)]
        public int OutputTokenLimit { get; set; }

        /// <summary>
        /// Gets or Sets SupportedGenerationMethods
        /// </summary>
        [DataMember(Name = "supportedGenerationMethods", EmitDefaultValue = false)]
        public Collection<GeminiModel.SupportedGenerationMethodsEnum> SupportedGenerationMethods { get; set; }

        /// <summary>
        /// Gets or Sets Temperature
        /// </summary>
        [DataMember(Name = "temperature", EmitDefaultValue = false)]
        public float Temperature { get; set; }

        /// <summary>
        /// Gets or Sets MaxTemperature
        /// </summary>
        [DataMember(Name = "maxTemperature", EmitDefaultValue = false)]
        public float MaxTemperature { get; set; }

        /// <summary>
        /// Gets or Sets TopP
        /// </summary>
        [DataMember(Name = "topP", EmitDefaultValue = false)]
        public float TopP { get; set; }

        /// <summary>
        /// Gets or Sets TopK
        /// </summary>
        [DataMember(Name = "topK", EmitDefaultValue = false)]
        public int TopK { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GeminiModel {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  BaseModelId: ").Append(BaseModelId).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  InputTokenLimit: ").Append(InputTokenLimit).Append("\n");
            sb.Append("  OutputTokenLimit: ").Append(OutputTokenLimit).Append("\n");
            sb.Append("  SupportedGenerationMethods: ").Append(SupportedGenerationMethods).Append("\n");
            sb.Append("  Temperature: ").Append(Temperature).Append("\n");
            sb.Append("  MaxTemperature: ").Append(MaxTemperature).Append("\n");
            sb.Append("  TopP: ").Append(TopP).Append("\n");
            sb.Append("  TopK: ").Append(TopK).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
