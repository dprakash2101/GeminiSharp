/*
 * Google Gemini API
 *
 * Comprehensive API for interacting with Google's Gemini models supporting text, chat, image generation, file uploads, grounding, code execution, model tuning, and more.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = GeminiSharp.Client.FileParameter;
using OpenAPIDateConverter = GeminiSharp.Client.OpenAPIDateConverter;

namespace GeminiSharp.Model
{
    /// <summary>
    /// DynamicRetrievalConfig
    /// </summary>
    [DataContract(Name = "DynamicRetrievalConfig")]
    public partial class DynamicRetrievalConfig : IValidatableObject
    {
        /// <summary>
        /// The mode of the predictor to be used in dynamic retrieval
        /// </summary>
        /// <value>The mode of the predictor to be used in dynamic retrieval</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ModeEnum
        {
            /// <summary>
            /// Enum MODEUNSPECIFIED for value: MODE_UNSPECIFIED
            /// </summary>
            [EnumMember(Value = "MODE_UNSPECIFIED")]
            MODEUNSPECIFIED = 1,

            /// <summary>
            /// Enum MODEDYNAMIC for value: MODE_DYNAMIC
            /// </summary>
            [EnumMember(Value = "MODE_DYNAMIC")]
            MODEDYNAMIC = 2
        }


        /// <summary>
        /// The mode of the predictor to be used in dynamic retrieval
        /// </summary>
        /// <value>The mode of the predictor to be used in dynamic retrieval</value>
        [DataMember(Name = "mode", EmitDefaultValue = false)]
        public ModeEnum? Mode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DynamicRetrievalConfig" /> class.
        /// </summary>
        /// <param name="mode">The mode of the predictor to be used in dynamic retrieval.</param>
        /// <param name="dynamicThreshold">The threshold to be used in dynamic retrieval.</param>
        public DynamicRetrievalConfig(ModeEnum? mode = default, float dynamicThreshold = default)
        {
            this.Mode = mode;
            this.DynamicThreshold = dynamicThreshold;
        }

        /// <summary>
        /// The threshold to be used in dynamic retrieval
        /// </summary>
        /// <value>The threshold to be used in dynamic retrieval</value>
        [DataMember(Name = "dynamicThreshold", EmitDefaultValue = false)]
        public float DynamicThreshold { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DynamicRetrievalConfig {\n");
            sb.Append("  Mode: ").Append(Mode).Append("\n");
            sb.Append("  DynamicThreshold: ").Append(DynamicThreshold).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
