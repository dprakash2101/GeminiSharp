/*
 * Google Gemini API
 *
 * Comprehensive API for interacting with Google's Gemini models supporting text, chat, image generation, file uploads, grounding, code execution, model tuning, and more.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = GeminiSharp.Client.FileParameter;
using OpenAPIDateConverter = GeminiSharp.Client.OpenAPIDateConverter;

namespace GeminiSharp.Model
{
    /// <summary>
    /// Condition
    /// </summary>
    [DataContract(Name = "Condition")]
    public partial class Condition : IValidatableObject
    {
        /// <summary>
        /// Required. Operator applied to the given key-value pair to trigger the condition
        /// </summary>
        /// <value>Required. Operator applied to the given key-value pair to trigger the condition</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OperationEnum
        {
            /// <summary>
            /// Enum OPERATORUNSPECIFIED for value: OPERATOR_UNSPECIFIED
            /// </summary>
            [EnumMember(Value = "OPERATOR_UNSPECIFIED")]
            OPERATORUNSPECIFIED = 1,

            /// <summary>
            /// Enum LESS for value: LESS
            /// </summary>
            [EnumMember(Value = "LESS")]
            LESS = 2,

            /// <summary>
            /// Enum LESSEQUAL for value: LESS_EQUAL
            /// </summary>
            [EnumMember(Value = "LESS_EQUAL")]
            LESSEQUAL = 3,

            /// <summary>
            /// Enum EQUAL for value: EQUAL
            /// </summary>
            [EnumMember(Value = "EQUAL")]
            EQUAL = 4,

            /// <summary>
            /// Enum GREATEREQUAL for value: GREATER_EQUAL
            /// </summary>
            [EnumMember(Value = "GREATER_EQUAL")]
            GREATEREQUAL = 5,

            /// <summary>
            /// Enum GREATER for value: GREATER
            /// </summary>
            [EnumMember(Value = "GREATER")]
            GREATER = 6,

            /// <summary>
            /// Enum NOTEQUAL for value: NOT_EQUAL
            /// </summary>
            [EnumMember(Value = "NOT_EQUAL")]
            NOTEQUAL = 7,

            /// <summary>
            /// Enum INCLUDES for value: INCLUDES
            /// </summary>
            [EnumMember(Value = "INCLUDES")]
            INCLUDES = 8,

            /// <summary>
            /// Enum EXCLUDES for value: EXCLUDES
            /// </summary>
            [EnumMember(Value = "EXCLUDES")]
            EXCLUDES = 9
        }


        /// <summary>
        /// Required. Operator applied to the given key-value pair to trigger the condition
        /// </summary>
        /// <value>Required. Operator applied to the given key-value pair to trigger the condition</value>
        [DataMember(Name = "operation", EmitDefaultValue = false)]
        public OperationEnum? Operation { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Condition" /> class.
        /// </summary>
        /// <param name="operation">Required. Operator applied to the given key-value pair to trigger the condition.</param>
        /// <param name="stringValue">The string value to filter with.</param>
        /// <param name="numericValue">The numeric value to filter with.</param>
        public Condition(OperationEnum? operation = default, string stringValue = default, float numericValue = default)
        {
            this.Operation = operation;
            this.StringValue = stringValue;
            this.NumericValue = numericValue;
        }

        /// <summary>
        /// The string value to filter with
        /// </summary>
        /// <value>The string value to filter with</value>
        [DataMember(Name = "stringValue", EmitDefaultValue = false)]
        public string StringValue { get; set; }

        /// <summary>
        /// The numeric value to filter with
        /// </summary>
        /// <value>The numeric value to filter with</value>
        [DataMember(Name = "numericValue", EmitDefaultValue = false)]
        public float NumericValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Condition {\n");
            sb.Append("  Operation: ").Append(Operation).Append("\n");
            sb.Append("  StringValue: ").Append(StringValue).Append("\n");
            sb.Append("  NumericValue: ").Append(NumericValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
