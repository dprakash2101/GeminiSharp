name: Falcon Linter Self-Review

on:
  pull_request:
    types: [opened, synchronize]
  issue_comment:
    types: [created]

permissions:
  contents: read
  pull-requests: write

jobs:
  review:
    name: Falcon Linter (Dogfooding)
    runs-on: ubuntu-latest

    if: |
      github.event_name == 'pull_request' ||
      (github.event_name == 'issue_comment' && github.event.issue.pull_request && 
      (contains(github.event.comment.body, '/falcon-linter --reviewChanges') || contains(github.event.comment.body, '/falcon-linter --generateSummary')))

    steps:
      - name: Checkout PR Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'


      - name: Configure Git
        run: |
          git config --global user.name "${{ secrets.User_Name }}"
          git config --global user.email "${{ secrets.User_Email }}"

      - name: Determine Command
        id: command
        run: |
          COMMAND_FROM_COMMENT=""
          if [ "${{ github.event_name }}" == "issue_comment" ]; then
            if [[ "${{ github.event.comment.body }}" == *"/falcon-linter --reviewChanges"* ]]; then
              COMMAND_FROM_COMMENT="/falcon-linter --reviewChanges"
            elif [[ "${{ github.event.comment.body }}" == *"/falcon-linter --generateSummary"* ]]; then
              COMMAND_FROM_COMMENT="/falcon-linter --generateSummary"
            fi
          fi

          if [ -n "$COMMAND_FROM_COMMENT" ]; then
            echo "command_text=$COMMAND_FROM_COMMENT" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" == "pull_request" ]; then
            echo "command_text=review" >> $GITHUB_OUTPUT
          else
            # Fallback for other cases, though the 'if' condition on the job should prevent most of these
            echo "command_text=review" >> $GITHUB_OUTPUT
          fi

  

      - name: Fallback to Published Version
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npm install -g github:dprakash2101/falcon-linter
          # The CLI is now in the path, and it knows how to get context from the environment
          npx falcon-linter --command "${{ steps.command.outputs.command_text }}"
