name: GeminiSharp PR Review

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  review:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run CriticWave PR Review
        uses: dprakash2101/criticwave-action@v0.0.1
        with:
          github-token: ${{ secrets.ACCESS_TOKEN }}
          gemini-api-key: ${{ secrets.GEMINI_API_KEY }}
          pr-style-guide: |
            Follow C# SDK best practices for the GeminiSharp library, ensuring compatibility with the Gemini API.
            Adhere to SOLID principles strictly, emphasizing single responsibility and interface segregation for API client classes.
            Use clear, descriptive naming conventions following C# standards (e.g., PascalCase for public members, camelCase for parameters).
            Favor immutability in API models and DTOs to ensure thread-safety and predictability.
            Ensure all public methods and classes are well-documented with XML comments for IntelliSense support.
            Avoid side effects in API calls; ensure methods are stateless or explicitly document state changes.
            Implement robust exception handling, propagating Gemini API errors with meaningful messages.
            Minimize code duplication by leveraging helper methods and shared utilities in the GeminiSharp namespace.
            Ensure thread-safety for HTTP client interactions and proper disposal of resources (e.g., HttpClient).
            Follow REST client best practices, including proper HTTP status code handling and retry logic where applicable.
            Write unit tests for all public API methods, covering edge cases and error conditions.
            Optimize performance for API calls without compromising code clarity or maintainability.
            Ensure compatibility with .NET Standard 2.0 or later for broad usability.
            Validate that all public APIs are intuitive and align with the Gemini API's expected usage patterns.
