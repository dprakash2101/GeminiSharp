name: Manual Publish to NuGet (Dockerized)

on:
  workflow_dispatch:

jobs:
  build-and-publish:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build & Publish using Docker
        run: |
          docker build --build-arg NUGET_API_KEY=${{ secrets.NUGET_API_KEY }} -t gemini-nuget-publisher .
          docker run --rm gemini-nuget-publisher

  create-deployment:
    runs-on: ubuntu-latest
    needs: build-and-publish

    steps:
      - name: Create Deployment
        id: deployment
        uses: actions/github-script@v6
        with:
          script: |
            try {
              const { data } = await github.rest.repos.createDeployment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: context.ref,
                environment: 'nuget',
                required_contexts: [], // skip required checks
                transient_environment: true,
                description: 'Publishing to NuGet'
              });
              core.setOutput('deployment_id', data.id);
            } catch (error) {
              core.setFailed(`Error creating deployment: ${error.message}`);
            }

      - name: Update Deployment Status (Success)
        if: success()
        uses: actions/github-script@v6
        with:
          script: |
            try {
              await github.rest.repos.createDeploymentStatus({
                owner: context.repo.owner,
                repo: context.repo.repo,
                deployment_id: ${{ steps.deployment.outputs.deployment_id }},
                state: 'success',
                environment_url: 'https://www.nuget.org/packages/GeminiSharp'
              });
            } catch (error) {
              core.setFailed(`Error setting success status: ${error.message}`);
            }

      - name: Update Deployment Status (Failure)
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            try {
              await github.rest.repos.createDeploymentStatus({
                owner: context.repo.owner,
                repo: context.repo.repo,
                deployment_id: ${{ steps.deployment.outputs.deployment_id }},
                state: 'failure'
              });
            } catch (error) {
              core.setFailed(`Error setting failure status: ${error.message}`);
            }
